{"version":3,"sources":["webpack://zagram/webpack/universalModuleDefinition","webpack://zagram/webpack/bootstrap","webpack://zagram/./node_modules/pako/lib/utils/common.js","webpack://zagram/./node_modules/aes-js/index.js","webpack://zagram/./node_modules/pako/lib/zlib/messages.js","webpack://zagram/./node_modules/pako/lib/zlib/adler32.js","webpack://zagram/./node_modules/pako/lib/zlib/crc32.js","webpack://zagram/./node_modules/pako/lib/utils/strings.js","webpack://zagram/./node_modules/pako/lib/zlib/zstream.js","webpack://zagram/./node_modules/pako/lib/zlib/constants.js","webpack://zagram/./node_modules/pako/index.js","webpack://zagram/./node_modules/pako/lib/deflate.js","webpack://zagram/./node_modules/pako/lib/zlib/deflate.js","webpack://zagram/./node_modules/pako/lib/zlib/trees.js","webpack://zagram/./node_modules/pako/lib/inflate.js","webpack://zagram/./node_modules/pako/lib/zlib/inflate.js","webpack://zagram/./node_modules/pako/lib/zlib/inffast.js","webpack://zagram/./node_modules/pako/lib/zlib/inftrees.js","webpack://zagram/./node_modules/pako/lib/zlib/gzheader.js","webpack://zagram/./node_modules/ramda/es/internal/_concat.js","webpack://zagram/./node_modules/ramda/es/internal/_arity.js","webpack://zagram/./node_modules/ramda/es/internal/_isPlaceholder.js","webpack://zagram/./node_modules/ramda/es/internal/_curry1.js","webpack://zagram/./node_modules/ramda/es/internal/_curry2.js","webpack://zagram/./node_modules/ramda/es/internal/_createPartialApplicator.js","webpack://zagram/./node_modules/ramda/es/partial.js","webpack://zagram/./node_modules/ramda/es/internal/_pipe.js","webpack://zagram/./node_modules/ramda/es/internal/_curry3.js","webpack://zagram/./node_modules/ramda/es/internal/_isArray.js","webpack://zagram/./node_modules/ramda/es/internal/_isString.js","webpack://zagram/./node_modules/ramda/es/internal/_isArrayLike.js","webpack://zagram/./node_modules/ramda/es/internal/_xwrap.js","webpack://zagram/./node_modules/ramda/es/bind.js","webpack://zagram/./node_modules/ramda/es/internal/_reduce.js","webpack://zagram/./node_modules/ramda/es/reduce.js","webpack://zagram/./node_modules/ramda/es/internal/_checkForMethod.js","webpack://zagram/./node_modules/ramda/es/slice.js","webpack://zagram/./node_modules/ramda/es/tail.js","webpack://zagram/./node_modules/ramda/es/pipe.js","webpack://zagram/./node_modules/ramda/es/curryN.js","webpack://zagram/./node_modules/ramda/es/internal/_curryN.js","webpack://zagram/./node_modules/ramda/es/nth.js","webpack://zagram/./node_modules/ramda/es/nthArg.js","webpack://zagram/./node_modules/ramda/es/internal/_of.js","webpack://zagram/./node_modules/ramda/es/of.js","webpack://zagram/./node_modules/ramda/es/internal/_isTransformer.js","webpack://zagram/./node_modules/ramda/es/internal/_dispatchable.js","webpack://zagram/./node_modules/ramda/es/internal/_map.js","webpack://zagram/./node_modules/ramda/es/internal/_xfBase.js","webpack://zagram/./node_modules/ramda/es/internal/_xmap.js","webpack://zagram/./node_modules/ramda/es/internal/_has.js","webpack://zagram/./node_modules/ramda/es/internal/_isArguments.js","webpack://zagram/./node_modules/ramda/es/keys.js","webpack://zagram/./node_modules/ramda/es/map.js","webpack://zagram/./node_modules/ramda/es/ap.js","webpack://zagram/./node_modules/ramda/es/always.js","webpack://zagram/./node_modules/ramda/es/max.js","webpack://zagram/./node_modules/ramda/es/cond.js","webpack://zagram/./node_modules/ramda/es/flip.js","webpack://zagram/./node_modules/ramda/es/partialRight.js","webpack://zagram/./node_modules/ramda/es/T.js","webpack://zagram/./node_modules/ramda/es/times.js","webpack://zagram/./node_modules/ramda/es/internal/_arrayFromIterator.js","webpack://zagram/./node_modules/ramda/es/internal/_includesWith.js","webpack://zagram/./node_modules/ramda/es/internal/_objectIs.js","webpack://zagram/./node_modules/ramda/es/type.js","webpack://zagram/./node_modules/ramda/es/internal/_equals.js","webpack://zagram/./node_modules/ramda/es/internal/_functionName.js","webpack://zagram/./node_modules/ramda/es/equals.js","webpack://zagram/./node_modules/ramda/es/internal/_xtake.js","webpack://zagram/./node_modules/ramda/es/internal/_reduced.js","webpack://zagram/./node_modules/ramda/es/take.js","webpack://zagram/./node_modules/ramda/es/startsWith.js","webpack://zagram/./node_modules/ramda/es/internal/_identity.js","webpack://zagram/./node_modules/ramda/es/identity.js","webpack://zagram/./node_modules/ramda/es/splitEvery.js","webpack://zagram/./node_modules/ramda/es/nAry.js","webpack://zagram/./node_modules/ramda/es/binary.js","webpack://zagram/./node_modules/ramda/es/path.js","webpack://zagram/./node_modules/ramda/es/prop.js","webpack://zagram/./node_modules/ramda/es/add.js","webpack://zagram/./node_modules/ramda/es/sum.js","webpack://zagram/./node_modules/ramda/es/zipObj.js","webpack://zagram/./node_modules/ramda/es/modulo.js","webpack://zagram/./node_modules/ramda/es/__.js","webpack://zagram/./src/utils.js","webpack://zagram/./node_modules/ramda/es/propEq.js","webpack://zagram/./node_modules/ramda/es/length.js","webpack://zagram/./node_modules/ramda/es/internal/_isNumber.js","webpack://zagram/./node_modules/ramda/es/apply.js","webpack://zagram/./node_modules/ramda/es/zip.js","webpack://zagram/./src/constants.js","webpack://zagram/./src/tl/utils.js","webpack://zagram/./node_modules/ramda/es/unapply.js","webpack://zagram/./src/tl/vector/loadVector.js","webpack://zagram/./node_modules/ramda/es/is.js","webpack://zagram/./node_modules/ramda/es/internal/_isObject.js","webpack://zagram/./node_modules/ramda/es/empty.js","webpack://zagram/./node_modules/ramda/es/isEmpty.js","webpack://zagram/./node_modules/ramda/es/internal/_makeFlat.js","webpack://zagram/./node_modules/ramda/es/flatten.js","webpack://zagram/./src/tl/int/loadInt.js","webpack://zagram/./src/tl/int/dumpInt.js","webpack://zagram/./src/tl/bigInt/loadBigInt.js","webpack://zagram/./src/tl/bigInt/dumpBigInt.js","webpack://zagram/./src/tl/bool/loadBool.js","webpack://zagram/./src/tl/bool/dumpBool.js","webpack://zagram/./node_modules/ramda/es/unary.js","webpack://zagram/./node_modules/ramda/es/gt.js","webpack://zagram/./node_modules/ramda/es/not.js","webpack://zagram/./node_modules/ramda/es/subtract.js","webpack://zagram/./node_modules/ramda/es/internal/_isFunction.js","webpack://zagram/./node_modules/ramda/es/internal/_includes.js","webpack://zagram/./node_modules/ramda/es/internal/_indexOf.js","webpack://zagram/./node_modules/ramda/es/internal/_quote.js","webpack://zagram/./node_modules/ramda/es/internal/_toISOString.js","webpack://zagram/./node_modules/ramda/es/internal/_xfilter.js","webpack://zagram/./node_modules/ramda/es/filter.js","webpack://zagram/./node_modules/ramda/es/internal/_filter.js","webpack://zagram/./node_modules/ramda/es/reject.js","webpack://zagram/./node_modules/ramda/es/internal/_complement.js","webpack://zagram/./node_modules/ramda/es/toString.js","webpack://zagram/./node_modules/ramda/es/internal/_toString.js","webpack://zagram/./node_modules/ramda/es/concat.js","webpack://zagram/./node_modules/ramda/es/inc.js","webpack://zagram/./src/tl/tlSerialization.js","webpack://zagram/./src/tl/string/loadString.js","webpack://zagram/./src/tl/string/dumpString.js","webpack://zagram/./src/tl/vector/dumpVector.js","webpack://zagram/./src/tl/msg_container/loadMessage.js","webpack://zagram/./src/tl/msg_container/loadMessageContainer.js","webpack://zagram/./src/tl/msg_container/dumpMessage.js","webpack://zagram/./src/tl/msg_container/dumpMessageContainer.js","webpack://zagram/./src/tl/bad_msg_notification/loadBadMsgNotification.js","webpack://zagram/./src/tl/bad_msg_notification/dumpBadMsgNotification.js","webpack://zagram/./src/tl/bad_server_salt/loadBadServerSalt.js","webpack://zagram/./src/tl/bad_server_salt/dumpBadServerSalt.js","webpack://zagram/./src/tl/msgs_ack/loadMsgsAck.js","webpack://zagram/./src/tl/msgs_ack/dumpMsgsAck.js","webpack://zagram/./src/tl/rpc_result/loadRpcResult.js","webpack://zagram/./node_modules/ramda/es/curry.js","webpack://zagram/./src/tl/rpc_result/dumpRpcResult.js","webpack://zagram/./src/tl/msgs_state_req/loadMsgsStateReq.js","webpack://zagram/./src/tl/msgs_state_req/dumpMsgsStateReq.js","webpack://zagram/./src/tl/bytes/loadBytes.js","webpack://zagram/./src/tl/bytes/dumpBytes.js","webpack://zagram/./src/tl/msgs_state_info/loadMsgsStateInfo.js","webpack://zagram/./src/tl/msgs_state_info/dumpMsgsStateInfo.js","webpack://zagram/./src/tl/msgs_all_info/loadMsgsAllInfo.js","webpack://zagram/./src/tl/msgs_all_info/dumpMsgsAllInfo.js","webpack://zagram/./src/tl/msg_detailed_info/loadMsgDetailedInfo.js","webpack://zagram/./src/tl/msg_detailed_info/dumpMsgDetailedInfo.js","webpack://zagram/./src/tl/msg_new_detailed_info/loadMsgNewDetailedInfo.js","webpack://zagram/./node_modules/ramda/es/props.js","webpack://zagram/./src/tl/msg_new_detailed_info/dumpMsgNewDetailedInfo.js","webpack://zagram/./src/tl/msg_resend_req/loadMsgResendReq.js","webpack://zagram/./src/tl/msg_resend_req/dumpMsgResendReq.js","webpack://zagram/./src/tl/msg_resend_ans_req/loadMsgResendAnsReq.js","webpack://zagram/./src/tl/msg_resend_ans_req/dumpMsgResendAnsReq.js","webpack://zagram/./src/tl/rpc_error/loadRpcError.js","webpack://zagram/./src/tl/rpc_error/dumpRpcError.js","webpack://zagram/./src/tl/rpc_drop_answer/loadRpcDropAnswer.js","webpack://zagram/./src/tl/rpc_drop_answer/dumpRpcDropAnswer.js","webpack://zagram/./src/tl/rpc_answer_unknown/loadRpcAnswerUnknown.js","webpack://zagram/./src/tl/rpc_answer_unknown/dumpRpcAnswerUnknown.js","webpack://zagram/./src/tl/rpc_answer_dropped_running/loadRpcAnswerDroppedRunning.js","webpack://zagram/./src/tl/rpc_answer_dropped_running/dumpRpcAnswerDroppedRunning.js","webpack://zagram/./src/tl/rpc_answer_dropped/loadRpcAnswerDropped.js","webpack://zagram/./src/tl/rpc_answer_dropped/dumpRpcAnswerDropped.js","webpack://zagram/./src/tl/get_future_salts/loadGetFutureSalts.js","webpack://zagram/./src/tl/get_future_salts/dumpGetFutureSalts.js","webpack://zagram/./src/tl/future_salt/loadFutureSalt.js","webpack://zagram/./src/tl/future_salt/dumpFutureSalt.js","webpack://zagram/./src/tl/future_salts/loadFutureSalts.js","webpack://zagram/./src/tl/future_salts/dumpFutureSalts.js","webpack://zagram/./src/tl/ping/loadPing.js","webpack://zagram/./src/tl/ping/dumpPing.js","webpack://zagram/./src/tl/pong/loadPong.js","webpack://zagram/./src/tl/pong/dumpPong.js","webpack://zagram/./src/tl/ping_delay_disconnect/loadPingDelayDisconnect.js","webpack://zagram/./src/tl/ping_delay_disconnect/dumpPingDelayDisconnect.js","webpack://zagram/./src/tl/destory_session/loadDestroySession.js","webpack://zagram/./src/tl/destory_session/dumpDestroySession.js","webpack://zagram/./src/tl/destory_session_ok/loadDestroySessionOk.js","webpack://zagram/./src/tl/destory_session_ok/dumpDestroySessionOk.js","webpack://zagram/./src/tl/destory_session_none/loadDestroySessionNone.js","webpack://zagram/./src/tl/destory_session_none/dumpDestroySessionNone.js","webpack://zagram/./src/tl/new_session_created/loadNewSessionCreated.js","webpack://zagram/./src/tl/new_session_created/dumpNewSessionCreated.js","webpack://zagram/./src/tl/http_wait/loadHttpWait.js","webpack://zagram/./src/tl/http_wait/dumpHttpWait.js","webpack://zagram/./node_modules/ramda/es/multiply.js","webpack://zagram/./src/tl/bigInt128/loadBigInt128.js","webpack://zagram/./src/tl/bigInt128/dumpBigInt128.js","webpack://zagram/./src/tl/req_pq/loadReqPQ.js","webpack://zagram/./src/tl/req_pq/dumpReqPQ.js","webpack://zagram/./node_modules/ramda/es/hasPath.js","webpack://zagram/./node_modules/ramda/es/has.js","webpack://zagram/./node_modules/ramda/es/over.js","webpack://zagram/./node_modules/ramda/es/assoc.js","webpack://zagram/./node_modules/ramda/es/lens.js","webpack://zagram/./node_modules/ramda/es/lensProp.js","webpack://zagram/./node_modules/ramda/es/fromPairs.js","webpack://zagram/./node_modules/ramda/es/internal/_objectAssign.js","webpack://zagram/./node_modules/ramda/es/mergeAll.js","webpack://zagram/./node_modules/ramda/es/values.js","webpack://zagram/./node_modules/ramda/es/match.js","webpack://zagram/./node_modules/ramda/es/lt.js","webpack://zagram/./node_modules/ramda/es/call.js","webpack://zagram/./node_modules/ramda/es/invoker.js","webpack://zagram/./node_modules/ramda/es/split.js","webpack://zagram/./node_modules/ramda/es/reverse.js","webpack://zagram/./node_modules/ramda/es/join.js","webpack://zagram/./src/tl/schema/utils.js","webpack://zagram/./src/tl/schema/loadBySchema.js","webpack://zagram/./src/tl/schema/dumpBySchema.js","webpack://zagram/./src/tl/unzipMessage.js","webpack://zagram/./src/tl/res_pq/loadResPQ.js","webpack://zagram/./src/tl/res_pq/dumpResPQ.js","webpack://zagram/./src/tl/bigInt256/loadBigInt256.js","webpack://zagram/./src/tl/bigInt256/dumpBigInt256.js","webpack://zagram/./src/tl/p_q_inner_data/loadPQInnerData.js","webpack://zagram/./src/tl/p_q_inner_data/dumpPQInnerData.js","webpack://zagram/./src/tl/p_q_inner_data_temp/loadPQInnerDataTemp.js","webpack://zagram/./src/tl/p_q_inner_data_temp/dumpPQInnerDataTemp.js","webpack://zagram/./src/tl/req_DH_params/loadReqDHParams.js","webpack://zagram/./src/tl/req_DH_params/dumpReqDHParams.js","webpack://zagram/./src/tl/server_DH_params_fail/loadServerDHParamsFail.js","webpack://zagram/./src/tl/server_DH_params_fail/dumpServerDHParamsFail.js","webpack://zagram/./src/tl/server_DH_params_ok/loadServerDHParamsOk.js","webpack://zagram/./src/tl/server_DH_params_ok/dumpServerDHParamsOk.js","webpack://zagram/./src/tl/server_DH_inner_data/loadServerDHInnerData.js","webpack://zagram/./src/tl/server_DH_inner_data/dumpServerDHInnerData.js","webpack://zagram/./src/tl/client_DH_inner_data/loadClientDHInnerData.js","webpack://zagram/./src/tl/client_DH_inner_data/dumpClientDHInnerData.js","webpack://zagram/./src/tl/set_client_DH_params/loadSetClientDHParams.js","webpack://zagram/./src/tl/set_client_DH_params/dumpSetClientDHParams.js","webpack://zagram/./src/tl/dh_gen_ok/loadDHGenOk.js","webpack://zagram/./src/tl/dh_gen_ok/dumpDHGenOk.js","webpack://zagram/./src/tl/dh_gen_retry/loadDHGenRetry.js","webpack://zagram/./src/tl/dh_gen_retry/dumpDHGenRetry.js","webpack://zagram/./src/tl/dh_gen_fail/loadDHGenFail.js","webpack://zagram/./src/tl/dh_gen_fail/dumpDHGenFail.js","webpack://zagram/./src/tl/loadMessage.js","webpack://zagram/./src/tl/dumpMessage.js","webpack://zagram/./src/tl/schema/constructorFromSchema.js","webpack://zagram/./src/tl/schema/methodFromSchema.js","webpack://zagram/./node_modules/ramda/es/replace.js","webpack://zagram/./node_modules/ramda/es/defaultTo.js","webpack://zagram/./node_modules/ramda/es/pathOr.js","webpack://zagram/./src/asn1/integer/decodeInt.js","webpack://zagram/./src/asn1/integer/isIntHeader.js","webpack://zagram/./node_modules/ramda/es/addIndex.js","webpack://zagram/./node_modules/ramda/es/prepend.js","webpack://zagram/./node_modules/ramda/es/internal/_dropLast.js","webpack://zagram/./node_modules/ramda/es/internal/_xdropLast.js","webpack://zagram/./node_modules/ramda/es/dropLast.js","webpack://zagram/./node_modules/ramda/es/gte.js","webpack://zagram/./node_modules/ramda/es/internal/_xdrop.js","webpack://zagram/./node_modules/ramda/es/drop.js","webpack://zagram/./src/asn1/OID/decodeOID.js","webpack://zagram/./src/asn1/OID/isOIDHeader.js","webpack://zagram/./src/asn1/null/decodeNull.js","webpack://zagram/./src/asn1/null/isNullHeader.js","webpack://zagram/./src/asn1/boolean/decodeBoolean.js","webpack://zagram/./src/asn1/boolean/isBooleanHeader.js","webpack://zagram/./src/asn1/BitString/BitString.js","webpack://zagram/./src/asn1/BitString/decodeBitStringHeader.js","webpack://zagram/./src/asn1/BitString/isBitStringHeader.js","webpack://zagram/./node_modules/ramda/es/append.js","webpack://zagram/./src/asn1/sequence/decodeSequence.js","webpack://zagram/./src/asn1/sequence/isSequenceHeader.js","webpack://zagram/./src/asn1/asn1.js","webpack://zagram/./src/readPublicKey.js","webpack://zagram/./node_modules/@cryptography/sha1/dist/es/sha1.js","webpack://zagram/./node_modules/@cryptography/sha256/dist/es/sha256.js","webpack://zagram/./src/sha.js","webpack://zagram/./src/pems.js","webpack://zagram/./src/aes.js","webpack://zagram/./src/rsa.js","webpack://zagram/./src/createAuthorizationKey.js","webpack://zagram/./src/intermediate.js","webpack://zagram/./node_modules/ramda/es/pluck.js","webpack://zagram/./node_modules/ramda/es/anyPass.js","webpack://zagram/./src/obfuscation.js","webpack://zagram/./node_modules/ramda/es/allPass.js","webpack://zagram/./src/Connection.js","webpack://zagram/./node_modules/ramda/es/propOr.js","webpack://zagram/./node_modules/ramda/es/mergeLeft.js","webpack://zagram/./node_modules/ramda/es/last.js","webpack://zagram/./src/unwrapPlainMessage.js","webpack://zagram/./src/sendWsRequest.js","webpack://zagram/./src/wrapPlainMessage.js","webpack://zagram/./src/seqNoGenerator.js","webpack://zagram/./src/getMsgKey.js","webpack://zagram/./src/generateKeyIv.js","webpack://zagram/./src/encryptMessage.js","webpack://zagram/./src/padBytes.js","webpack://zagram/./src/addSessionInfo.js","webpack://zagram/./src/addExternalHeader.js","webpack://zagram/./src/decryptMessage.js","webpack://zagram/./src/parseExternalHeader.js","webpack://zagram/./src/parseSessionInfo.js","webpack://zagram/./src/downloadHelpers.js","webpack://zagram/./src/MTProto.js","webpack://zagram/./src/index.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","TYPED_OK","Uint8Array","Uint16Array","Int32Array","_has","obj","assign","sources","Array","slice","arguments","length","source","shift","TypeError","shrinkBuf","buf","size","subarray","fnTyped","arraySet","dest","src","src_offs","len","dest_offs","set","flattenChunks","chunks","pos","chunk","result","fnUntyped","concat","apply","setTyped","on","Buf8","Buf16","Buf32","checkInt","parseInt","checkInts","arrayish","coerceArray","arg","copy","buffer","isArray","Error","createArray","copyArray","sourceArray","targetArray","targetStart","sourceStart","sourceEnd","Hex","convertUtf8","toBytes","text","encodeURI","charCodeAt","push","substr","fromBytes","bytes","String","fromCharCode","join","convertHex","v","numberOfRounds","16","24","32","rcon","S","Si","T1","T2","T3","T4","T5","T6","T7","T8","U1","U2","U3","U4","convertToInt32","AES","this","_prepare","rounds","_Ke","_Kd","index","roundKeyCount","KC","tk","tt","rconpointer","encrypt","plaintext","a","decrypt","ciphertext","ModeOfOperationECB","description","_aes","block","ModeOfOperationCBC","iv","_lastCipherblock","j","ModeOfOperationCFB","segmentSize","_shiftRegister","xorSegment","encrypted","ModeOfOperationOFB","_lastPrecipher","_lastPrecipherIndex","Counter","initialValue","_counter","setValue","setBytes","Number","MAX_SAFE_INTEGER","increment","ModeOfOperationCTR","counter","_remainingCounter","_remainingCounterIndex","aesjs","ModeOfOperation","ecb","cbc","cfb","ofb","ctr","utils","hex","utf8","padding","pkcs7","pad","data","padder","strip","_arrayTest","2","1","0","adler","s1","s2","crcTable","table","k","makeTable","crc","end","STR_APPLY_OK","STR_APPLY_UIA_OK","__","_utf8len","q","buf2binstring","string2buf","str","c2","m_pos","str_len","buf_len","binstring2buf","buf2string","max","out","c_len","utf16buf","utf8border","input","next_in","avail_in","total_in","output","next_out","avail_out","total_out","msg","state","data_type","Z_NO_FLUSH","Z_PARTIAL_FLUSH","Z_SYNC_FLUSH","Z_FULL_FLUSH","Z_FINISH","Z_BLOCK","Z_TREES","Z_OK","Z_STREAM_END","Z_NEED_DICT","Z_ERRNO","Z_STREAM_ERROR","Z_DATA_ERROR","Z_BUF_ERROR","Z_NO_COMPRESSION","Z_BEST_SPEED","Z_BEST_COMPRESSION","Z_DEFAULT_COMPRESSION","Z_FILTERED","Z_HUFFMAN_ONLY","Z_RLE","Z_FIXED","Z_DEFAULT_STRATEGY","Z_BINARY","Z_TEXT","Z_UNKNOWN","Z_DEFLATED","pako","zlib_deflate","strings","ZStream","toString","Deflate","options","level","method","chunkSize","windowBits","memLevel","strategy","to","opt","raw","gzip","err","ended","strm","status","deflateInit2","header","deflateSetHeader","dictionary","dict","deflateSetDictionary","_dict_set","deflate","deflator","_mode","onEnd","onData","deflateEnd","deflateRaw","configuration_table","trees","adler32","crc32","errorCode","rank","f","zero","flush_pending","pending","pending_buf","pending_out","flush_block_only","last","_tr_flush_block","block_start","strstart","put_byte","b","putShortMSB","longest_match","cur_match","match","chain_length","max_chain_length","scan","best_len","prev_length","nice_match","limit","w_size","_win","wmask","w_mask","prev","strend","scan_end1","scan_end","good_match","lookahead","match_start","fill_window","more","start","_w_size","window_size","hash_size","head","wrap","insert","ins_h","hash_shift","hash_mask","deflate_fast","flush","hash_head","bflush","match_length","_tr_tally","max_lazy_match","MIN_MATCH","last_lit","deflate_slow","max_insert","prev_match","match_available","Config","good_length","max_lazy","nice_length","max_chain","func","DeflateState","pending_buf_size","gzhead","gzindex","last_flush","w_bits","hash_bits","dyn_ltree","HEAP_SIZE","dyn_dtree","bl_tree","l_desc","d_desc","bl_desc","bl_count","MAX_BITS","heap","heap_len","heap_max","depth","l_buf","lit_bufsize","d_buf","opt_len","static_len","matches","bi_buf","bi_valid","deflateResetKeep","_tr_init","deflateReset","ret","max_block_size","max_start","deflateInit","old_flush","beg","val","hcrc","extra","comment","time","os","bstate","deflate_huff","deflate_rle","_tr_align","_tr_stored_block","avail","next","tmpDict","dictLength","deflateInfo","extra_lbits","extra_dbits","extra_blbits","bl_order","static_ltree","static_dtree","D_CODES","_dist_code","_length_code","MAX_MATCH","base_length","static_l_desc","static_d_desc","static_bl_desc","base_dist","StaticTreeDesc","static_tree","extra_bits","extra_base","elems","max_length","has_stree","TreeDesc","dyn_tree","stat_desc","max_code","d_code","dist","put_short","w","send_bits","send_code","tree","bi_reverse","code","res","gen_codes","bits","next_code","init_block","LITERALS","END_BLOCK","bi_windup","smaller","_n2","_m2","pqdownheap","compress_block","ltree","dtree","lc","lx","build_tree","desc","node","stree","h","xbits","base","overflow","gen_bitlen","scan_tree","curlen","prevlen","nextlen","count","max_count","min_count","REP_3_6","REPZ_3_10","REPZ_11_138","send_tree","static_init_done","stored_len","copy_block","LENGTH_CODES","L_CODES","tr_static_init","opt_lenb","static_lenb","max_blindex","black_mask","detect_data_type","BL_CODES","build_bl_tree","lcodes","dcodes","blcodes","send_all_trees","STATIC_TREES","bi_flush","zlib_inflate","GZheader","Inflate","inflateInit2","inflateGetHeader","inflateSetDictionary","inflate","inflator","next_out_utf8","tail","utf8str","allowBufError","inflateEnd","inflateRaw","ungzip","inflate_fast","inflate_table","zswap32","InflateState","havedict","flags","dmax","check","total","wbits","wsize","whave","wnext","hold","offset","lencode","distcode","lenbits","distbits","ncode","nlen","ndist","have","lens","work","lendyn","distdyn","sane","back","was","inflateResetKeep","inflateReset","inflateReset2","lenfix","distfix","virgin","fixedtables","sym","updatewindow","inflateInit","put","left","_in","_out","from","from_source","here_bits","here_op","here_val","last_bits","last_op","last_val","opts","here","hbuf","order","inf_leave","done","xflags","extra_len","inflateInfo","s_window","lcode","dcode","lmask","dmask","op","top","dolen","dodist","lbase","lext","dbase","dext","type","lens_index","codes","table_index","incr","fill","low","mask","min","curr","drop","used","huff","base_index","MAXBITS","offs","extra_index","_concat","set1","set2","idx","len1","len2","_arity","fn","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","_isPlaceholder","_curry1","f1","_curry2","f2","_b","_a","_createPartialApplicator","args","Math","_pipe","g","_curry3","f3","_c","_isString","x","_isArray","nodeType","XWrap","acc","thisObj","_iterableReduce","xf","iter","step","_methodReduce","methodName","symIterator","iterator","_reduce","list","_xwrap","_arrayReduce","reduce","_checkForMethod","methodname","fromIndex","toIndex","Infinity","pipe","_curryN","received","combined","argsIdx","combinedIdx","charAt","_of","_isTransformer","_dispatchable","methodNames","pop","transducer","_map","functor","XMap","_xfBase","prop","hasEnumBug","propertyIsEnumerable","nonEnumerableProps","hasArgsEnumBug","contains","item","keys","nIdx","ks","checkArgsLength","applyF","applyX","ap","pairs","pair","isNaN","RangeError","_arrayFromIterator","_includesWith","pred","undefined","_uniqContentEquals","aIterator","bIterator","stackA","stackB","eq","_equals","aItem","typeA","equals","constructor","valueOf","message","global","ignoreCase","multiline","sticky","unicode","entries","values","keysA","extendedStackA","extendedStackB","XTake","xs","prefix","_identity","paths","toArray","byteToStrBase2","padStart","arrayBufferToUint8Array","uint8ArrayToHex","arr","uint8ToBigInt","littleEndian","reverse","BigInt","getRandomInt","floor","random","getRandomByte","getNRandomBytes","randomBigInt","copyBytes","fromArr","toArr","uint8ToString","uint8arr","TextDecoder","decode","absDec","gcd","tmp","powModulo","leastSignificantBit","hexToUint8Array","hexToArrayBuffer","hexStr","bytesArr","ArrayBuffer","uint8ToArrayBuffer","bigIntToUint8Array","bigint","getMessageId","inc","Date","now","copyBuffer","fromBuffer","toBuffer","dumpArrayBuffer","arrayBufferToHex","mergeArrayBuffer","bufferA","bufferB","byteLength","bufferAView","bufferBView","bufferPart1","bufferPart2","sliceBuffer","getEmptyArrayBuffer","mergeAllArrayBuffers","buildDumpFunc","isWithOffset","withConstantOffset","addWithOffsetArg","load","loadByPairs","attrName","loader","slicedBuffer","loadedValue","loadedOffset","updatedResult","buildLoadFunc","buildTypeLoader","buildConstructorLoader","buildMethodLoader","promiseChain","promiseFuncList","progressCb","resultArr","canceled","promise","innerCaller","Promise","reject","resolve","then","cancel","shiftRightNBit","getFirstByte","getNBit","maskNumber","y","binaryPipe","applyAll","NaN","rv","TYPE_KEY","CONSTRUCTOR_KEY","METHOD_KEY","RPC_ERROR_TYPE","getConstructor","Uint32Array","isMessageContainer","isPong","isPing","isPingDelayDisconnect","isNewSessionCreated","isBadMsgNotification","isBadServerSalt","isMsgsAck","isMsgsStateReq","isMsgsStateInfo","isMsgsAllInfo","isMsgDetailedInfo","isMsgNewDetailedInfo","isMsgResendReq","isMsgResendAnsReq","isRpcResult","isRpcError","isRpcDropAnswer","isRpcAnswerUnknown","isRpcAnswerDroppedRunning","isRpcAnswerDropped","isGetFutureSalts","isFutureSalt","isFutureSalts","isDestroySession","isDestroySessionOk","isDestroySessionNone","isHttpWait","isGzipped","isReqPQ","isResPQ","isPQInnerData","isPQInnerDataTemp","isReqDhParams","isServerDHParamsFail","isServerDHParamsOk","isServerDHInnerData","isClienDHInnerData","isSetClientDHParams","isDHGenOk","isDHGenRetry","isDHGenFail","isMessageOf","isMessageOfType","isMethodOf","toBigInt","base256","getBase","loadVector","loadItem","withOffset","items","itemBuffer","itemOffset","Ctor","_isObject","empty","_makeFlat","recursive","flatt","jlen","ilen","loadInt","dumpInt","loadBigInt","BigUint64Array","dumpBigInt","loadBool","dumpBool","_isFunction","_includes","inf","indexOf","_indexOf","_quote","replace","toISOString","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","toFixed","XFilter","filterable","_filter","_toString","seen","recur","mapPairs","sort","test","repr","isShortString","padEndBytes","toShortTlString","toLongTlString","toTlString","fromTlShortString","uint8ToInt","fromTlLongString","fromTlString","getPaddingCount","getStringFromArrayBuffer","arrayBuffer","stringMarker","stringLengthUint","stringLength","incomingString","stringToTlString","TextEncoder","encode","tlStringWithOffset","getString","dumpString","stringBytes","buildVectorPrefixBuffer","dumpVector","dumpFunc","getDumpFunc","Boolean","dumpNotEmptyArray","dumpArray","loadMsgId","loadSeqNo","loadBytes","loadMsg","messages","dumpMsgId","dumpSeqNo","buildDumpBodyFunc","dumpMessage","dumpCount","dumpMessageContainer","loadType","loadConstructor","dumpConstructor","dumpErrorCode","dumpBadMsgId","dumpBadSeqNo","dumpNewServerSalt","loadMsgIds","loadReqMsgId","loadMessage","buildDumpResultFunc","buildDumpFuncs","loadMethod","dumpMsgIds","incomingStringToArray","toWithOffset","dumpReqMsgId","dumpInfo","dumpBytes","dumpAnswerMsgId","dumpStatus","ps","dumpMethod","loadString","dumpErrorMessage","dumpNum","dumpValidSince","dumpValidUntil","dumpSalt","loadNow","loadSalts","loadFutureSalt","dumpNow","dumpSalts","dumpFutureSalt","dumpPingId","dumpDisconnectDelay","dumpSessionId","dumpFirstMsgId","dumpUniqueId","dumpServerSalt","dumpMaxDelay","dumpWaitAfter","dumpMaxWait","loadBigInt128","dumpBigInt128","view","dumpNonce","_path","Identity","map","setter","toFunctorFn","target","focus","nextKey","props","vals","rx","arity","split","memoize","memo","funcargs","parseId","number","updateSchemaWithUintId","buildMap","buildConstructorsMap","buildMethodsMap","buildSchemaIdMap","getParseSchemaById","isFromSchemaFactory","isMethodObject","isConstuctorObject","isObjectOf","buildMethodsSchemaMap","buildConstructorsSchemaMap","getAvailableTypes","Set","isDumpingTypeFactory","has","getSchemaForMethod","getSchemaForConstructor","matchVector","getVectorType","getMsgType","isMsgCouldBeDump","loadFlag","dumpFlag","hasConditionalField","flagOptionMatch","isFlagOption","getSchemaFromBufferArray","bareTypeLoaders","bool","Bool","int","long","string","isBareType","getBareTypeLoader","getTypePair","getObjectConstructorPair","loadBySchema","schema","getLoaderForType","getLoadPairs","buildSimpleLoader","objSchema","objBuffer","withObjOffset","currentBuffer","commonOffset","typeData","baseOffset","params","flagInt","currentOffset","flagId","currentType","param","getLoadFuncs","dumpBySchema","getDumpFunction","buildDumpAttrFunc","dumpId","buildDumpBySchemaFunc","buildPlainDump","buffers","dumpType","unzipMessage","parseMessage","zippedValue","loadServerNonce","loadPQ","loadFingerprints","dumpServerNonce","dumpPQ","dumpFingerprints","loadBigInt256","dumpBigInt256","dumpP","dumpQ","dumpNewNonce","dumpExpiresIn","dumpFingerprint","dumpEncryptedData","dumpNewNonceHash","dumpEncryptedAnswer","dumpG","dumpDHPrime","dumpGA","dumpServerTime","dumpRetryId","dumpGB","dumpNewNonceHash1","dumpNewNonceHash2","dumpNewNonceHash3","parseUnexpectedMessage","console","warn","loadHttpWait","loadPong","loadPing","loadPingDelayDisconnect","loadNewSessionCreated","loadBadMsgNotification","loadMsgsAck","loadBadServerSalt","loadMsgsStateReq","loadMsgsStateInfo","loadMsgsAllInfo","loadMsgDetailedInfo","loadMsgNewDetailedInfo","loadMsgResendReq","loadMsgResendAnsReq","loadRpcError","loadRpcDropAnswer","loadRpcAnswerUnknown","loadRpcAnswerDroppedRunning","loadRpcAnswerDropped","loadGetFutureSalts","loadFutureSalts","loadDestroySession","loadDestroySessionOk","loadDestroySessionNone","loadReqPQ","loadResPQ","loadPQInnerData","loadPQInnerDataTemp","loadReqDHParams","loadServerDHParamsFail","loadServerDHParamsOk","loadServerDHInnerData","loadClientDHInnerData","loadSetClientDHParams","loadDHGenOk","loadDHGenRetry","loadDHGenFail","dumpUnexpectedMessage","error","dump","dumpBadMsgNotification","dumpBadServerSalt","dumpDestroySession","dumpDestroySessionNone","dumpDestroySessionOk","dumpFutureSalts","dumpGetFutureSalts","dumpHttpWait","dumpMsgDetailedInfo","dumpMsgNewDetailedInfo","dumpMsgResendAnsReq","dumpMsgResendReq","dumpMsgsAck","dumpMsgsAllInfo","dumpMsgsStateInfo","dumpMsgsStateReq","dumpNewSessionCreated","dumpPing","dumpPingDelayDisconnect","dumpPong","dumpRpcAnswerDropped","dumpRpcAnswerDroppedRunning","dumpRpcAnswerUnknown","dumpRpcDropAnswer","dumpRpcError","dumpRpcResult","dumpReqPQ","dumpResPQ","dumpPQInnerData","dumpPQInnerDataTemp","dumpReqDHParams","dumpServerDHParamsFail","dumpServerDHParamsOk","dumpServerDHInnerData","dumpClientDHInnerData","dumpSetClientDHParams","dumpDHGenOk","dumpDHGenRetry","dumpDHGenFail","buildGetTypePairFunc","buildGetPredicatePairFunc","buildGetMethodPairFunc","regex","replacement","isNegative","getXValue","getYValue","getPositiveInt","getNegativeInt","origFn","el","dropLast","XDropLast","full","store","XDrop","getSplitIdx","getIntRange","buildSliceFuncList","range","readSIDNumber","readSID1and2Numbers","readSIDNumbers","splitToOIDBuffers","nth","l2hIdx","currentByte","currentBitId","uint8","getBitPadding","isEmptyBuffer","decodeSequence","decodeBuffer","getBlockClass","isMultiBlock","getSimpleBlockId","isComplexBlockId","getBlockId","uint8Arr","readBlockId","byte","currentValue","getBlockIdName","isSeveralByteLength","getSeveralByteLength","getBlockLength","getBlockLengthFromBufferWithHeader","getHeaderAndLengthBlockOffset","getTotalBlockLength","cutValueBuffer","decodeBlockHeader","blockId","blockClass","blockIdName","multiValue","notifyThatAsn1BufferCannotBeenDecoded","getValueDecoder","isBooleanHeader","decodeBoolean","isIntHeader","decodeInt","isBitStringHeader","decodeBitStringHeader","isNullHeader","decodeNull","isOIDHeader","decodeOID","isSequenceHeader","getArrayBufferFromPem","atob","isNeedToDecodeInnerValue","s2i","i2s","i2h","words","round","e","preprocess","process","finish","len64hi","len64lo","finalizestr","finalize","format","Stream","update","digest","clear","sha1","stream","blockLength","digestLength","_k","t1","t2","s0","maj","sha256","prepareData","pems","bigIntToTLString","buildFingerPrint","publicKeyMap","readPublicKey","getPublicKey","hashFromNonces","decryptIge","encodedMessage","cipherTextBuffer","keyBlock","iv1","iv2","aesECB","blocksCount","plainTextBuffer","cipherTextBlockBuffer","cipherTextBlock","blockIdx","cipherText","plainTextBlockBuffer","plainTextBlock","encryptIge","encryptedBuffer","aesEncryptedBuffer","encryptedTextBlock","getCipher","keyView","ivView","getRandomNonce","getInitialDHExchangeMessage","nonce","buildPQInnerData","responsePQ","pqValue","pq","pValue","qValue","ys","findPrimeFactors","newNonce","server_nonce","new_nonce","decryptDHParams","encryptedDHParams","pqInnerData","serverNonce","newNonceServerNonceHash","serverNonceNewNonceHash","newNonceNewNonceHash","generateKeyDataFromNonce","answerWithoutHash","encrypted_answer","buildAuthKeyId","buildAuthKeyAuxHash","createAuthorizationKey","sendRequest","initDHMessage","race","exchangeMessage","innerPQ","encryptedInnerPQ","fingerprint","fingerprints","encrypted_data","buildDHExchangeMessage","pqInnerBuffer","hash","randomBytesCount","randomBytes","pubKey","originBuffer","rsa","encryptPQInner","all","serverDHParams","dhParams","dhValues","ga","g_a","dhPrime","dh_prime","gb","gab","dhComputation","setClientDHParamsMessage","buildSetClientDhParamsMessage","dhInnerMessage","dhInnerMessageBuffer","innerHashBytes","dataWithHashLength","randomDataLength","dataWithHashBuffer","dhInnerMessageBytes","encryptInnerMessage","retry_id","g_b","buildDHInnerMessage","verifyResponse","errorMessage","checkDHVerifyResponse","serverSalt","serverNonceUint","newNonceUint","salt","buildSalt","authKey","authKeyHash","authKeyBuffer","buildAuthKeyHash","authKeyId","authKeyAuxHash","verifyNewNonce","setTimeout","tag","randomBuffer","tlen","tlenBuffer","encodedBuffer","preds","isValidInitPayload","getObfuscation","protocolTag","initBuffer","postfix","generateFirstInitPayload","reversedInitBuffer","initPayloadBuffer","firstView","secondView","buildSecondInitPayload","encryptCipher","decryptCipher","init","buildHeader","EventTarget","url","super","ws","WebSocket","binaryType","addEventListener","event","Event","originEvent","send","dispatchEvent","paddedBuffer","readyState","getPlainMessageId","sendWsRequest","loads","dumps","payload","handleSuccess","removeEventListener","handleError","plainMessageBuffer","wrappedMessageBuffer","messageId","payloadBuffer","messageBuffer","wrapPlainMessage","seqNoGenerator","seqNo","isContentRelated","getSha256","generateKeyIv","msgKey","fromServer","sha256a","sha256b","encryptMessage","sessionId","totalPad","padBytes","addSessionInfo","padded","messageKey","encryptedMessage","addExternalHeader","decryptMessage","serverMessage","serverMessageKey","serverResponse","messageWithHeaders","messageWithSessionInfo","messageLength","parseSessionInfo","getFileType","getFileName","getAuthKey","getAuthKeyId","getServerSalt","generateSessionId","getDownloadLimitOffset","serverUrl","authData","genSeqNo","rpcPromises","acknowledgements","buildAuthKey","isAuthKeyDataSet","emitAuthKeyCreated","read","catch","fireStatusChange","detail","messageData","loadFromDecrypted","handleResponse","sendRequestWithAcknowledgements","sendRequestOnly","getSeqNo","sendEncryptedRequest","ackMessage","buildAcknowledgementMessage","ackMsgId","ackSeqNo","containerMessage","msgId","body","containerMessageId","containerSeqNo","handleMsgsAck","handlePong","handleNewSessionCreated","handleBadServerSalt","handleRpcResult","handleUpdates","handleUnExpected","badMsgId","requestMessage","request","reqMsgId","handleAuthKeyError","msgIds","file","cancelChain","log","fileId","parts","ceil","filename","sliceBufferByPart","buildPartLoadObjects","bigFile","uploadMethod","uploadPromiseFuncs","methodFromSchema","inputFileConstructor","chainablePromise","cancelChainFunc","constructorFromSchema","id","md5_checksum","location","buildDownloadRequest","getPromiseFunc","conditionFunc","promiseChainUntil","File","construct","tlDumps","tlLoads"],"mappings":"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","file":"zagram.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"zagram\"] = factory();\n\telse\n\t\troot[\"zagram\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 19);\n","'use strict';\n\n\nvar TYPED_OK =  (typeof Uint8Array !== 'undefined') &&\n                (typeof Uint16Array !== 'undefined') &&\n                (typeof Int32Array !== 'undefined');\n\nfunction _has(obj, key) {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nexports.assign = function (obj /*from1, from2, from3, ...*/) {\n  var sources = Array.prototype.slice.call(arguments, 1);\n  while (sources.length) {\n    var source = sources.shift();\n    if (!source) { continue; }\n\n    if (typeof source !== 'object') {\n      throw new TypeError(source + 'must be non-object');\n    }\n\n    for (var p in source) {\n      if (_has(source, p)) {\n        obj[p] = source[p];\n      }\n    }\n  }\n\n  return obj;\n};\n\n\n// reduce buffer size, avoiding mem copy\nexports.shrinkBuf = function (buf, size) {\n  if (buf.length === size) { return buf; }\n  if (buf.subarray) { return buf.subarray(0, size); }\n  buf.length = size;\n  return buf;\n};\n\n\nvar fnTyped = {\n  arraySet: function (dest, src, src_offs, len, dest_offs) {\n    if (src.subarray && dest.subarray) {\n      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);\n      return;\n    }\n    // Fallback to ordinary array\n    for (var i = 0; i < len; i++) {\n      dest[dest_offs + i] = src[src_offs + i];\n    }\n  },\n  // Join array of chunks to single array.\n  flattenChunks: function (chunks) {\n    var i, l, len, pos, chunk, result;\n\n    // calculate data length\n    len = 0;\n    for (i = 0, l = chunks.length; i < l; i++) {\n      len += chunks[i].length;\n    }\n\n    // join chunks\n    result = new Uint8Array(len);\n    pos = 0;\n    for (i = 0, l = chunks.length; i < l; i++) {\n      chunk = chunks[i];\n      result.set(chunk, pos);\n      pos += chunk.length;\n    }\n\n    return result;\n  }\n};\n\nvar fnUntyped = {\n  arraySet: function (dest, src, src_offs, len, dest_offs) {\n    for (var i = 0; i < len; i++) {\n      dest[dest_offs + i] = src[src_offs + i];\n    }\n  },\n  // Join array of chunks to single array.\n  flattenChunks: function (chunks) {\n    return [].concat.apply([], chunks);\n  }\n};\n\n\n// Enable/Disable typed arrays use, for testing\n//\nexports.setTyped = function (on) {\n  if (on) {\n    exports.Buf8  = Uint8Array;\n    exports.Buf16 = Uint16Array;\n    exports.Buf32 = Int32Array;\n    exports.assign(exports, fnTyped);\n  } else {\n    exports.Buf8  = Array;\n    exports.Buf16 = Array;\n    exports.Buf32 = Array;\n    exports.assign(exports, fnUntyped);\n  }\n};\n\nexports.setTyped(TYPED_OK);\n","/*! MIT License. Copyright 2015-2018 Richard Moore <me@ricmoo.com>. See LICENSE.txt. */\n(function(root) {\n    \"use strict\";\n\n    function checkInt(value) {\n        return (parseInt(value) === value);\n    }\n\n    function checkInts(arrayish) {\n        if (!checkInt(arrayish.length)) { return false; }\n\n        for (var i = 0; i < arrayish.length; i++) {\n            if (!checkInt(arrayish[i]) || arrayish[i] < 0 || arrayish[i] > 255) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    function coerceArray(arg, copy) {\n\n        // ArrayBuffer view\n        if (arg.buffer && arg.name === 'Uint8Array') {\n\n            if (copy) {\n                if (arg.slice) {\n                    arg = arg.slice();\n                } else {\n                    arg = Array.prototype.slice.call(arg);\n                }\n            }\n\n            return arg;\n        }\n\n        // It's an array; check it is a valid representation of a byte\n        if (Array.isArray(arg)) {\n            if (!checkInts(arg)) {\n                throw new Error('Array contains invalid value: ' + arg);\n            }\n\n            return new Uint8Array(arg);\n        }\n\n        // Something else, but behaves like an array (maybe a Buffer? Arguments?)\n        if (checkInt(arg.length) && checkInts(arg)) {\n            return new Uint8Array(arg);\n        }\n\n        throw new Error('unsupported array-like object');\n    }\n\n    function createArray(length) {\n        return new Uint8Array(length);\n    }\n\n    function copyArray(sourceArray, targetArray, targetStart, sourceStart, sourceEnd) {\n        if (sourceStart != null || sourceEnd != null) {\n            if (sourceArray.slice) {\n                sourceArray = sourceArray.slice(sourceStart, sourceEnd);\n            } else {\n                sourceArray = Array.prototype.slice.call(sourceArray, sourceStart, sourceEnd);\n            }\n        }\n        targetArray.set(sourceArray, targetStart);\n    }\n\n\n\n    var convertUtf8 = (function() {\n        function toBytes(text) {\n            var result = [], i = 0;\n            text = encodeURI(text);\n            while (i < text.length) {\n                var c = text.charCodeAt(i++);\n\n                // if it is a % sign, encode the following 2 bytes as a hex value\n                if (c === 37) {\n                    result.push(parseInt(text.substr(i, 2), 16))\n                    i += 2;\n\n                // otherwise, just the actual byte\n                } else {\n                    result.push(c)\n                }\n            }\n\n            return coerceArray(result);\n        }\n\n        function fromBytes(bytes) {\n            var result = [], i = 0;\n\n            while (i < bytes.length) {\n                var c = bytes[i];\n\n                if (c < 128) {\n                    result.push(String.fromCharCode(c));\n                    i++;\n                } else if (c > 191 && c < 224) {\n                    result.push(String.fromCharCode(((c & 0x1f) << 6) | (bytes[i + 1] & 0x3f)));\n                    i += 2;\n                } else {\n                    result.push(String.fromCharCode(((c & 0x0f) << 12) | ((bytes[i + 1] & 0x3f) << 6) | (bytes[i + 2] & 0x3f)));\n                    i += 3;\n                }\n            }\n\n            return result.join('');\n        }\n\n        return {\n            toBytes: toBytes,\n            fromBytes: fromBytes,\n        }\n    })();\n\n    var convertHex = (function() {\n        function toBytes(text) {\n            var result = [];\n            for (var i = 0; i < text.length; i += 2) {\n                result.push(parseInt(text.substr(i, 2), 16));\n            }\n\n            return result;\n        }\n\n        // http://ixti.net/development/javascript/2011/11/11/base64-encodedecode-of-utf8-in-browser-with-js.html\n        var Hex = '0123456789abcdef';\n\n        function fromBytes(bytes) {\n                var result = [];\n                for (var i = 0; i < bytes.length; i++) {\n                    var v = bytes[i];\n                    result.push(Hex[(v & 0xf0) >> 4] + Hex[v & 0x0f]);\n                }\n                return result.join('');\n        }\n\n        return {\n            toBytes: toBytes,\n            fromBytes: fromBytes,\n        }\n    })();\n\n\n    // Number of rounds by keysize\n    var numberOfRounds = {16: 10, 24: 12, 32: 14}\n\n    // Round constant words\n    var rcon = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91];\n\n    // S-box and Inverse S-box (S is for Substitution)\n    var S = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16];\n    var Si =[0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d];\n\n    // Transformations for encryption\n    var T1 = [0xc66363a5, 0xf87c7c84, 0xee777799, 0xf67b7b8d, 0xfff2f20d, 0xd66b6bbd, 0xde6f6fb1, 0x91c5c554, 0x60303050, 0x02010103, 0xce6767a9, 0x562b2b7d, 0xe7fefe19, 0xb5d7d762, 0x4dababe6, 0xec76769a, 0x8fcaca45, 0x1f82829d, 0x89c9c940, 0xfa7d7d87, 0xeffafa15, 0xb25959eb, 0x8e4747c9, 0xfbf0f00b, 0x41adadec, 0xb3d4d467, 0x5fa2a2fd, 0x45afafea, 0x239c9cbf, 0x53a4a4f7, 0xe4727296, 0x9bc0c05b, 0x75b7b7c2, 0xe1fdfd1c, 0x3d9393ae, 0x4c26266a, 0x6c36365a, 0x7e3f3f41, 0xf5f7f702, 0x83cccc4f, 0x6834345c, 0x51a5a5f4, 0xd1e5e534, 0xf9f1f108, 0xe2717193, 0xabd8d873, 0x62313153, 0x2a15153f, 0x0804040c, 0x95c7c752, 0x46232365, 0x9dc3c35e, 0x30181828, 0x379696a1, 0x0a05050f, 0x2f9a9ab5, 0x0e070709, 0x24121236, 0x1b80809b, 0xdfe2e23d, 0xcdebeb26, 0x4e272769, 0x7fb2b2cd, 0xea75759f, 0x1209091b, 0x1d83839e, 0x582c2c74, 0x341a1a2e, 0x361b1b2d, 0xdc6e6eb2, 0xb45a5aee, 0x5ba0a0fb, 0xa45252f6, 0x763b3b4d, 0xb7d6d661, 0x7db3b3ce, 0x5229297b, 0xdde3e33e, 0x5e2f2f71, 0x13848497, 0xa65353f5, 0xb9d1d168, 0x00000000, 0xc1eded2c, 0x40202060, 0xe3fcfc1f, 0x79b1b1c8, 0xb65b5bed, 0xd46a6abe, 0x8dcbcb46, 0x67bebed9, 0x7239394b, 0x944a4ade, 0x984c4cd4, 0xb05858e8, 0x85cfcf4a, 0xbbd0d06b, 0xc5efef2a, 0x4faaaae5, 0xedfbfb16, 0x864343c5, 0x9a4d4dd7, 0x66333355, 0x11858594, 0x8a4545cf, 0xe9f9f910, 0x04020206, 0xfe7f7f81, 0xa05050f0, 0x783c3c44, 0x259f9fba, 0x4ba8a8e3, 0xa25151f3, 0x5da3a3fe, 0x804040c0, 0x058f8f8a, 0x3f9292ad, 0x219d9dbc, 0x70383848, 0xf1f5f504, 0x63bcbcdf, 0x77b6b6c1, 0xafdada75, 0x42212163, 0x20101030, 0xe5ffff1a, 0xfdf3f30e, 0xbfd2d26d, 0x81cdcd4c, 0x180c0c14, 0x26131335, 0xc3ecec2f, 0xbe5f5fe1, 0x359797a2, 0x884444cc, 0x2e171739, 0x93c4c457, 0x55a7a7f2, 0xfc7e7e82, 0x7a3d3d47, 0xc86464ac, 0xba5d5de7, 0x3219192b, 0xe6737395, 0xc06060a0, 0x19818198, 0x9e4f4fd1, 0xa3dcdc7f, 0x44222266, 0x542a2a7e, 0x3b9090ab, 0x0b888883, 0x8c4646ca, 0xc7eeee29, 0x6bb8b8d3, 0x2814143c, 0xa7dede79, 0xbc5e5ee2, 0x160b0b1d, 0xaddbdb76, 0xdbe0e03b, 0x64323256, 0x743a3a4e, 0x140a0a1e, 0x924949db, 0x0c06060a, 0x4824246c, 0xb85c5ce4, 0x9fc2c25d, 0xbdd3d36e, 0x43acacef, 0xc46262a6, 0x399191a8, 0x319595a4, 0xd3e4e437, 0xf279798b, 0xd5e7e732, 0x8bc8c843, 0x6e373759, 0xda6d6db7, 0x018d8d8c, 0xb1d5d564, 0x9c4e4ed2, 0x49a9a9e0, 0xd86c6cb4, 0xac5656fa, 0xf3f4f407, 0xcfeaea25, 0xca6565af, 0xf47a7a8e, 0x47aeaee9, 0x10080818, 0x6fbabad5, 0xf0787888, 0x4a25256f, 0x5c2e2e72, 0x381c1c24, 0x57a6a6f1, 0x73b4b4c7, 0x97c6c651, 0xcbe8e823, 0xa1dddd7c, 0xe874749c, 0x3e1f1f21, 0x964b4bdd, 0x61bdbddc, 0x0d8b8b86, 0x0f8a8a85, 0xe0707090, 0x7c3e3e42, 0x71b5b5c4, 0xcc6666aa, 0x904848d8, 0x06030305, 0xf7f6f601, 0x1c0e0e12, 0xc26161a3, 0x6a35355f, 0xae5757f9, 0x69b9b9d0, 0x17868691, 0x99c1c158, 0x3a1d1d27, 0x279e9eb9, 0xd9e1e138, 0xebf8f813, 0x2b9898b3, 0x22111133, 0xd26969bb, 0xa9d9d970, 0x078e8e89, 0x339494a7, 0x2d9b9bb6, 0x3c1e1e22, 0x15878792, 0xc9e9e920, 0x87cece49, 0xaa5555ff, 0x50282878, 0xa5dfdf7a, 0x038c8c8f, 0x59a1a1f8, 0x09898980, 0x1a0d0d17, 0x65bfbfda, 0xd7e6e631, 0x844242c6, 0xd06868b8, 0x824141c3, 0x299999b0, 0x5a2d2d77, 0x1e0f0f11, 0x7bb0b0cb, 0xa85454fc, 0x6dbbbbd6, 0x2c16163a];\n    var T2 = [0xa5c66363, 0x84f87c7c, 0x99ee7777, 0x8df67b7b, 0x0dfff2f2, 0xbdd66b6b, 0xb1de6f6f, 0x5491c5c5, 0x50603030, 0x03020101, 0xa9ce6767, 0x7d562b2b, 0x19e7fefe, 0x62b5d7d7, 0xe64dabab, 0x9aec7676, 0x458fcaca, 0x9d1f8282, 0x4089c9c9, 0x87fa7d7d, 0x15effafa, 0xebb25959, 0xc98e4747, 0x0bfbf0f0, 0xec41adad, 0x67b3d4d4, 0xfd5fa2a2, 0xea45afaf, 0xbf239c9c, 0xf753a4a4, 0x96e47272, 0x5b9bc0c0, 0xc275b7b7, 0x1ce1fdfd, 0xae3d9393, 0x6a4c2626, 0x5a6c3636, 0x417e3f3f, 0x02f5f7f7, 0x4f83cccc, 0x5c683434, 0xf451a5a5, 0x34d1e5e5, 0x08f9f1f1, 0x93e27171, 0x73abd8d8, 0x53623131, 0x3f2a1515, 0x0c080404, 0x5295c7c7, 0x65462323, 0x5e9dc3c3, 0x28301818, 0xa1379696, 0x0f0a0505, 0xb52f9a9a, 0x090e0707, 0x36241212, 0x9b1b8080, 0x3ddfe2e2, 0x26cdebeb, 0x694e2727, 0xcd7fb2b2, 0x9fea7575, 0x1b120909, 0x9e1d8383, 0x74582c2c, 0x2e341a1a, 0x2d361b1b, 0xb2dc6e6e, 0xeeb45a5a, 0xfb5ba0a0, 0xf6a45252, 0x4d763b3b, 0x61b7d6d6, 0xce7db3b3, 0x7b522929, 0x3edde3e3, 0x715e2f2f, 0x97138484, 0xf5a65353, 0x68b9d1d1, 0x00000000, 0x2cc1eded, 0x60402020, 0x1fe3fcfc, 0xc879b1b1, 0xedb65b5b, 0xbed46a6a, 0x468dcbcb, 0xd967bebe, 0x4b723939, 0xde944a4a, 0xd4984c4c, 0xe8b05858, 0x4a85cfcf, 0x6bbbd0d0, 0x2ac5efef, 0xe54faaaa, 0x16edfbfb, 0xc5864343, 0xd79a4d4d, 0x55663333, 0x94118585, 0xcf8a4545, 0x10e9f9f9, 0x06040202, 0x81fe7f7f, 0xf0a05050, 0x44783c3c, 0xba259f9f, 0xe34ba8a8, 0xf3a25151, 0xfe5da3a3, 0xc0804040, 0x8a058f8f, 0xad3f9292, 0xbc219d9d, 0x48703838, 0x04f1f5f5, 0xdf63bcbc, 0xc177b6b6, 0x75afdada, 0x63422121, 0x30201010, 0x1ae5ffff, 0x0efdf3f3, 0x6dbfd2d2, 0x4c81cdcd, 0x14180c0c, 0x35261313, 0x2fc3ecec, 0xe1be5f5f, 0xa2359797, 0xcc884444, 0x392e1717, 0x5793c4c4, 0xf255a7a7, 0x82fc7e7e, 0x477a3d3d, 0xacc86464, 0xe7ba5d5d, 0x2b321919, 0x95e67373, 0xa0c06060, 0x98198181, 0xd19e4f4f, 0x7fa3dcdc, 0x66442222, 0x7e542a2a, 0xab3b9090, 0x830b8888, 0xca8c4646, 0x29c7eeee, 0xd36bb8b8, 0x3c281414, 0x79a7dede, 0xe2bc5e5e, 0x1d160b0b, 0x76addbdb, 0x3bdbe0e0, 0x56643232, 0x4e743a3a, 0x1e140a0a, 0xdb924949, 0x0a0c0606, 0x6c482424, 0xe4b85c5c, 0x5d9fc2c2, 0x6ebdd3d3, 0xef43acac, 0xa6c46262, 0xa8399191, 0xa4319595, 0x37d3e4e4, 0x8bf27979, 0x32d5e7e7, 0x438bc8c8, 0x596e3737, 0xb7da6d6d, 0x8c018d8d, 0x64b1d5d5, 0xd29c4e4e, 0xe049a9a9, 0xb4d86c6c, 0xfaac5656, 0x07f3f4f4, 0x25cfeaea, 0xafca6565, 0x8ef47a7a, 0xe947aeae, 0x18100808, 0xd56fbaba, 0x88f07878, 0x6f4a2525, 0x725c2e2e, 0x24381c1c, 0xf157a6a6, 0xc773b4b4, 0x5197c6c6, 0x23cbe8e8, 0x7ca1dddd, 0x9ce87474, 0x213e1f1f, 0xdd964b4b, 0xdc61bdbd, 0x860d8b8b, 0x850f8a8a, 0x90e07070, 0x427c3e3e, 0xc471b5b5, 0xaacc6666, 0xd8904848, 0x05060303, 0x01f7f6f6, 0x121c0e0e, 0xa3c26161, 0x5f6a3535, 0xf9ae5757, 0xd069b9b9, 0x91178686, 0x5899c1c1, 0x273a1d1d, 0xb9279e9e, 0x38d9e1e1, 0x13ebf8f8, 0xb32b9898, 0x33221111, 0xbbd26969, 0x70a9d9d9, 0x89078e8e, 0xa7339494, 0xb62d9b9b, 0x223c1e1e, 0x92158787, 0x20c9e9e9, 0x4987cece, 0xffaa5555, 0x78502828, 0x7aa5dfdf, 0x8f038c8c, 0xf859a1a1, 0x80098989, 0x171a0d0d, 0xda65bfbf, 0x31d7e6e6, 0xc6844242, 0xb8d06868, 0xc3824141, 0xb0299999, 0x775a2d2d, 0x111e0f0f, 0xcb7bb0b0, 0xfca85454, 0xd66dbbbb, 0x3a2c1616];\n    var T3 = [0x63a5c663, 0x7c84f87c, 0x7799ee77, 0x7b8df67b, 0xf20dfff2, 0x6bbdd66b, 0x6fb1de6f, 0xc55491c5, 0x30506030, 0x01030201, 0x67a9ce67, 0x2b7d562b, 0xfe19e7fe, 0xd762b5d7, 0xabe64dab, 0x769aec76, 0xca458fca, 0x829d1f82, 0xc94089c9, 0x7d87fa7d, 0xfa15effa, 0x59ebb259, 0x47c98e47, 0xf00bfbf0, 0xadec41ad, 0xd467b3d4, 0xa2fd5fa2, 0xafea45af, 0x9cbf239c, 0xa4f753a4, 0x7296e472, 0xc05b9bc0, 0xb7c275b7, 0xfd1ce1fd, 0x93ae3d93, 0x266a4c26, 0x365a6c36, 0x3f417e3f, 0xf702f5f7, 0xcc4f83cc, 0x345c6834, 0xa5f451a5, 0xe534d1e5, 0xf108f9f1, 0x7193e271, 0xd873abd8, 0x31536231, 0x153f2a15, 0x040c0804, 0xc75295c7, 0x23654623, 0xc35e9dc3, 0x18283018, 0x96a13796, 0x050f0a05, 0x9ab52f9a, 0x07090e07, 0x12362412, 0x809b1b80, 0xe23ddfe2, 0xeb26cdeb, 0x27694e27, 0xb2cd7fb2, 0x759fea75, 0x091b1209, 0x839e1d83, 0x2c74582c, 0x1a2e341a, 0x1b2d361b, 0x6eb2dc6e, 0x5aeeb45a, 0xa0fb5ba0, 0x52f6a452, 0x3b4d763b, 0xd661b7d6, 0xb3ce7db3, 0x297b5229, 0xe33edde3, 0x2f715e2f, 0x84971384, 0x53f5a653, 0xd168b9d1, 0x00000000, 0xed2cc1ed, 0x20604020, 0xfc1fe3fc, 0xb1c879b1, 0x5bedb65b, 0x6abed46a, 0xcb468dcb, 0xbed967be, 0x394b7239, 0x4ade944a, 0x4cd4984c, 0x58e8b058, 0xcf4a85cf, 0xd06bbbd0, 0xef2ac5ef, 0xaae54faa, 0xfb16edfb, 0x43c58643, 0x4dd79a4d, 0x33556633, 0x85941185, 0x45cf8a45, 0xf910e9f9, 0x02060402, 0x7f81fe7f, 0x50f0a050, 0x3c44783c, 0x9fba259f, 0xa8e34ba8, 0x51f3a251, 0xa3fe5da3, 0x40c08040, 0x8f8a058f, 0x92ad3f92, 0x9dbc219d, 0x38487038, 0xf504f1f5, 0xbcdf63bc, 0xb6c177b6, 0xda75afda, 0x21634221, 0x10302010, 0xff1ae5ff, 0xf30efdf3, 0xd26dbfd2, 0xcd4c81cd, 0x0c14180c, 0x13352613, 0xec2fc3ec, 0x5fe1be5f, 0x97a23597, 0x44cc8844, 0x17392e17, 0xc45793c4, 0xa7f255a7, 0x7e82fc7e, 0x3d477a3d, 0x64acc864, 0x5de7ba5d, 0x192b3219, 0x7395e673, 0x60a0c060, 0x81981981, 0x4fd19e4f, 0xdc7fa3dc, 0x22664422, 0x2a7e542a, 0x90ab3b90, 0x88830b88, 0x46ca8c46, 0xee29c7ee, 0xb8d36bb8, 0x143c2814, 0xde79a7de, 0x5ee2bc5e, 0x0b1d160b, 0xdb76addb, 0xe03bdbe0, 0x32566432, 0x3a4e743a, 0x0a1e140a, 0x49db9249, 0x060a0c06, 0x246c4824, 0x5ce4b85c, 0xc25d9fc2, 0xd36ebdd3, 0xacef43ac, 0x62a6c462, 0x91a83991, 0x95a43195, 0xe437d3e4, 0x798bf279, 0xe732d5e7, 0xc8438bc8, 0x37596e37, 0x6db7da6d, 0x8d8c018d, 0xd564b1d5, 0x4ed29c4e, 0xa9e049a9, 0x6cb4d86c, 0x56faac56, 0xf407f3f4, 0xea25cfea, 0x65afca65, 0x7a8ef47a, 0xaee947ae, 0x08181008, 0xbad56fba, 0x7888f078, 0x256f4a25, 0x2e725c2e, 0x1c24381c, 0xa6f157a6, 0xb4c773b4, 0xc65197c6, 0xe823cbe8, 0xdd7ca1dd, 0x749ce874, 0x1f213e1f, 0x4bdd964b, 0xbddc61bd, 0x8b860d8b, 0x8a850f8a, 0x7090e070, 0x3e427c3e, 0xb5c471b5, 0x66aacc66, 0x48d89048, 0x03050603, 0xf601f7f6, 0x0e121c0e, 0x61a3c261, 0x355f6a35, 0x57f9ae57, 0xb9d069b9, 0x86911786, 0xc15899c1, 0x1d273a1d, 0x9eb9279e, 0xe138d9e1, 0xf813ebf8, 0x98b32b98, 0x11332211, 0x69bbd269, 0xd970a9d9, 0x8e89078e, 0x94a73394, 0x9bb62d9b, 0x1e223c1e, 0x87921587, 0xe920c9e9, 0xce4987ce, 0x55ffaa55, 0x28785028, 0xdf7aa5df, 0x8c8f038c, 0xa1f859a1, 0x89800989, 0x0d171a0d, 0xbfda65bf, 0xe631d7e6, 0x42c68442, 0x68b8d068, 0x41c38241, 0x99b02999, 0x2d775a2d, 0x0f111e0f, 0xb0cb7bb0, 0x54fca854, 0xbbd66dbb, 0x163a2c16];\n    var T4 = [0x6363a5c6, 0x7c7c84f8, 0x777799ee, 0x7b7b8df6, 0xf2f20dff, 0x6b6bbdd6, 0x6f6fb1de, 0xc5c55491, 0x30305060, 0x01010302, 0x6767a9ce, 0x2b2b7d56, 0xfefe19e7, 0xd7d762b5, 0xababe64d, 0x76769aec, 0xcaca458f, 0x82829d1f, 0xc9c94089, 0x7d7d87fa, 0xfafa15ef, 0x5959ebb2, 0x4747c98e, 0xf0f00bfb, 0xadadec41, 0xd4d467b3, 0xa2a2fd5f, 0xafafea45, 0x9c9cbf23, 0xa4a4f753, 0x727296e4, 0xc0c05b9b, 0xb7b7c275, 0xfdfd1ce1, 0x9393ae3d, 0x26266a4c, 0x36365a6c, 0x3f3f417e, 0xf7f702f5, 0xcccc4f83, 0x34345c68, 0xa5a5f451, 0xe5e534d1, 0xf1f108f9, 0x717193e2, 0xd8d873ab, 0x31315362, 0x15153f2a, 0x04040c08, 0xc7c75295, 0x23236546, 0xc3c35e9d, 0x18182830, 0x9696a137, 0x05050f0a, 0x9a9ab52f, 0x0707090e, 0x12123624, 0x80809b1b, 0xe2e23ddf, 0xebeb26cd, 0x2727694e, 0xb2b2cd7f, 0x75759fea, 0x09091b12, 0x83839e1d, 0x2c2c7458, 0x1a1a2e34, 0x1b1b2d36, 0x6e6eb2dc, 0x5a5aeeb4, 0xa0a0fb5b, 0x5252f6a4, 0x3b3b4d76, 0xd6d661b7, 0xb3b3ce7d, 0x29297b52, 0xe3e33edd, 0x2f2f715e, 0x84849713, 0x5353f5a6, 0xd1d168b9, 0x00000000, 0xeded2cc1, 0x20206040, 0xfcfc1fe3, 0xb1b1c879, 0x5b5bedb6, 0x6a6abed4, 0xcbcb468d, 0xbebed967, 0x39394b72, 0x4a4ade94, 0x4c4cd498, 0x5858e8b0, 0xcfcf4a85, 0xd0d06bbb, 0xefef2ac5, 0xaaaae54f, 0xfbfb16ed, 0x4343c586, 0x4d4dd79a, 0x33335566, 0x85859411, 0x4545cf8a, 0xf9f910e9, 0x02020604, 0x7f7f81fe, 0x5050f0a0, 0x3c3c4478, 0x9f9fba25, 0xa8a8e34b, 0x5151f3a2, 0xa3a3fe5d, 0x4040c080, 0x8f8f8a05, 0x9292ad3f, 0x9d9dbc21, 0x38384870, 0xf5f504f1, 0xbcbcdf63, 0xb6b6c177, 0xdada75af, 0x21216342, 0x10103020, 0xffff1ae5, 0xf3f30efd, 0xd2d26dbf, 0xcdcd4c81, 0x0c0c1418, 0x13133526, 0xecec2fc3, 0x5f5fe1be, 0x9797a235, 0x4444cc88, 0x1717392e, 0xc4c45793, 0xa7a7f255, 0x7e7e82fc, 0x3d3d477a, 0x6464acc8, 0x5d5de7ba, 0x19192b32, 0x737395e6, 0x6060a0c0, 0x81819819, 0x4f4fd19e, 0xdcdc7fa3, 0x22226644, 0x2a2a7e54, 0x9090ab3b, 0x8888830b, 0x4646ca8c, 0xeeee29c7, 0xb8b8d36b, 0x14143c28, 0xdede79a7, 0x5e5ee2bc, 0x0b0b1d16, 0xdbdb76ad, 0xe0e03bdb, 0x32325664, 0x3a3a4e74, 0x0a0a1e14, 0x4949db92, 0x06060a0c, 0x24246c48, 0x5c5ce4b8, 0xc2c25d9f, 0xd3d36ebd, 0xacacef43, 0x6262a6c4, 0x9191a839, 0x9595a431, 0xe4e437d3, 0x79798bf2, 0xe7e732d5, 0xc8c8438b, 0x3737596e, 0x6d6db7da, 0x8d8d8c01, 0xd5d564b1, 0x4e4ed29c, 0xa9a9e049, 0x6c6cb4d8, 0x5656faac, 0xf4f407f3, 0xeaea25cf, 0x6565afca, 0x7a7a8ef4, 0xaeaee947, 0x08081810, 0xbabad56f, 0x787888f0, 0x25256f4a, 0x2e2e725c, 0x1c1c2438, 0xa6a6f157, 0xb4b4c773, 0xc6c65197, 0xe8e823cb, 0xdddd7ca1, 0x74749ce8, 0x1f1f213e, 0x4b4bdd96, 0xbdbddc61, 0x8b8b860d, 0x8a8a850f, 0x707090e0, 0x3e3e427c, 0xb5b5c471, 0x6666aacc, 0x4848d890, 0x03030506, 0xf6f601f7, 0x0e0e121c, 0x6161a3c2, 0x35355f6a, 0x5757f9ae, 0xb9b9d069, 0x86869117, 0xc1c15899, 0x1d1d273a, 0x9e9eb927, 0xe1e138d9, 0xf8f813eb, 0x9898b32b, 0x11113322, 0x6969bbd2, 0xd9d970a9, 0x8e8e8907, 0x9494a733, 0x9b9bb62d, 0x1e1e223c, 0x87879215, 0xe9e920c9, 0xcece4987, 0x5555ffaa, 0x28287850, 0xdfdf7aa5, 0x8c8c8f03, 0xa1a1f859, 0x89898009, 0x0d0d171a, 0xbfbfda65, 0xe6e631d7, 0x4242c684, 0x6868b8d0, 0x4141c382, 0x9999b029, 0x2d2d775a, 0x0f0f111e, 0xb0b0cb7b, 0x5454fca8, 0xbbbbd66d, 0x16163a2c];\n\n    // Transformations for decryption\n    var T5 = [0x51f4a750, 0x7e416553, 0x1a17a4c3, 0x3a275e96, 0x3bab6bcb, 0x1f9d45f1, 0xacfa58ab, 0x4be30393, 0x2030fa55, 0xad766df6, 0x88cc7691, 0xf5024c25, 0x4fe5d7fc, 0xc52acbd7, 0x26354480, 0xb562a38f, 0xdeb15a49, 0x25ba1b67, 0x45ea0e98, 0x5dfec0e1, 0xc32f7502, 0x814cf012, 0x8d4697a3, 0x6bd3f9c6, 0x038f5fe7, 0x15929c95, 0xbf6d7aeb, 0x955259da, 0xd4be832d, 0x587421d3, 0x49e06929, 0x8ec9c844, 0x75c2896a, 0xf48e7978, 0x99583e6b, 0x27b971dd, 0xbee14fb6, 0xf088ad17, 0xc920ac66, 0x7dce3ab4, 0x63df4a18, 0xe51a3182, 0x97513360, 0x62537f45, 0xb16477e0, 0xbb6bae84, 0xfe81a01c, 0xf9082b94, 0x70486858, 0x8f45fd19, 0x94de6c87, 0x527bf8b7, 0xab73d323, 0x724b02e2, 0xe31f8f57, 0x6655ab2a, 0xb2eb2807, 0x2fb5c203, 0x86c57b9a, 0xd33708a5, 0x302887f2, 0x23bfa5b2, 0x02036aba, 0xed16825c, 0x8acf1c2b, 0xa779b492, 0xf307f2f0, 0x4e69e2a1, 0x65daf4cd, 0x0605bed5, 0xd134621f, 0xc4a6fe8a, 0x342e539d, 0xa2f355a0, 0x058ae132, 0xa4f6eb75, 0x0b83ec39, 0x4060efaa, 0x5e719f06, 0xbd6e1051, 0x3e218af9, 0x96dd063d, 0xdd3e05ae, 0x4de6bd46, 0x91548db5, 0x71c45d05, 0x0406d46f, 0x605015ff, 0x1998fb24, 0xd6bde997, 0x894043cc, 0x67d99e77, 0xb0e842bd, 0x07898b88, 0xe7195b38, 0x79c8eedb, 0xa17c0a47, 0x7c420fe9, 0xf8841ec9, 0x00000000, 0x09808683, 0x322bed48, 0x1e1170ac, 0x6c5a724e, 0xfd0efffb, 0x0f853856, 0x3daed51e, 0x362d3927, 0x0a0fd964, 0x685ca621, 0x9b5b54d1, 0x24362e3a, 0x0c0a67b1, 0x9357e70f, 0xb4ee96d2, 0x1b9b919e, 0x80c0c54f, 0x61dc20a2, 0x5a774b69, 0x1c121a16, 0xe293ba0a, 0xc0a02ae5, 0x3c22e043, 0x121b171d, 0x0e090d0b, 0xf28bc7ad, 0x2db6a8b9, 0x141ea9c8, 0x57f11985, 0xaf75074c, 0xee99ddbb, 0xa37f60fd, 0xf701269f, 0x5c72f5bc, 0x44663bc5, 0x5bfb7e34, 0x8b432976, 0xcb23c6dc, 0xb6edfc68, 0xb8e4f163, 0xd731dcca, 0x42638510, 0x13972240, 0x84c61120, 0x854a247d, 0xd2bb3df8, 0xaef93211, 0xc729a16d, 0x1d9e2f4b, 0xdcb230f3, 0x0d8652ec, 0x77c1e3d0, 0x2bb3166c, 0xa970b999, 0x119448fa, 0x47e96422, 0xa8fc8cc4, 0xa0f03f1a, 0x567d2cd8, 0x223390ef, 0x87494ec7, 0xd938d1c1, 0x8ccaa2fe, 0x98d40b36, 0xa6f581cf, 0xa57ade28, 0xdab78e26, 0x3fadbfa4, 0x2c3a9de4, 0x5078920d, 0x6a5fcc9b, 0x547e4662, 0xf68d13c2, 0x90d8b8e8, 0x2e39f75e, 0x82c3aff5, 0x9f5d80be, 0x69d0937c, 0x6fd52da9, 0xcf2512b3, 0xc8ac993b, 0x10187da7, 0xe89c636e, 0xdb3bbb7b, 0xcd267809, 0x6e5918f4, 0xec9ab701, 0x834f9aa8, 0xe6956e65, 0xaaffe67e, 0x21bccf08, 0xef15e8e6, 0xbae79bd9, 0x4a6f36ce, 0xea9f09d4, 0x29b07cd6, 0x31a4b2af, 0x2a3f2331, 0xc6a59430, 0x35a266c0, 0x744ebc37, 0xfc82caa6, 0xe090d0b0, 0x33a7d815, 0xf104984a, 0x41ecdaf7, 0x7fcd500e, 0x1791f62f, 0x764dd68d, 0x43efb04d, 0xccaa4d54, 0xe49604df, 0x9ed1b5e3, 0x4c6a881b, 0xc12c1fb8, 0x4665517f, 0x9d5eea04, 0x018c355d, 0xfa877473, 0xfb0b412e, 0xb3671d5a, 0x92dbd252, 0xe9105633, 0x6dd64713, 0x9ad7618c, 0x37a10c7a, 0x59f8148e, 0xeb133c89, 0xcea927ee, 0xb761c935, 0xe11ce5ed, 0x7a47b13c, 0x9cd2df59, 0x55f2733f, 0x1814ce79, 0x73c737bf, 0x53f7cdea, 0x5ffdaa5b, 0xdf3d6f14, 0x7844db86, 0xcaaff381, 0xb968c43e, 0x3824342c, 0xc2a3405f, 0x161dc372, 0xbce2250c, 0x283c498b, 0xff0d9541, 0x39a80171, 0x080cb3de, 0xd8b4e49c, 0x6456c190, 0x7bcb8461, 0xd532b670, 0x486c5c74, 0xd0b85742];\n    var T6 = [0x5051f4a7, 0x537e4165, 0xc31a17a4, 0x963a275e, 0xcb3bab6b, 0xf11f9d45, 0xabacfa58, 0x934be303, 0x552030fa, 0xf6ad766d, 0x9188cc76, 0x25f5024c, 0xfc4fe5d7, 0xd7c52acb, 0x80263544, 0x8fb562a3, 0x49deb15a, 0x6725ba1b, 0x9845ea0e, 0xe15dfec0, 0x02c32f75, 0x12814cf0, 0xa38d4697, 0xc66bd3f9, 0xe7038f5f, 0x9515929c, 0xebbf6d7a, 0xda955259, 0x2dd4be83, 0xd3587421, 0x2949e069, 0x448ec9c8, 0x6a75c289, 0x78f48e79, 0x6b99583e, 0xdd27b971, 0xb6bee14f, 0x17f088ad, 0x66c920ac, 0xb47dce3a, 0x1863df4a, 0x82e51a31, 0x60975133, 0x4562537f, 0xe0b16477, 0x84bb6bae, 0x1cfe81a0, 0x94f9082b, 0x58704868, 0x198f45fd, 0x8794de6c, 0xb7527bf8, 0x23ab73d3, 0xe2724b02, 0x57e31f8f, 0x2a6655ab, 0x07b2eb28, 0x032fb5c2, 0x9a86c57b, 0xa5d33708, 0xf2302887, 0xb223bfa5, 0xba02036a, 0x5ced1682, 0x2b8acf1c, 0x92a779b4, 0xf0f307f2, 0xa14e69e2, 0xcd65daf4, 0xd50605be, 0x1fd13462, 0x8ac4a6fe, 0x9d342e53, 0xa0a2f355, 0x32058ae1, 0x75a4f6eb, 0x390b83ec, 0xaa4060ef, 0x065e719f, 0x51bd6e10, 0xf93e218a, 0x3d96dd06, 0xaedd3e05, 0x464de6bd, 0xb591548d, 0x0571c45d, 0x6f0406d4, 0xff605015, 0x241998fb, 0x97d6bde9, 0xcc894043, 0x7767d99e, 0xbdb0e842, 0x8807898b, 0x38e7195b, 0xdb79c8ee, 0x47a17c0a, 0xe97c420f, 0xc9f8841e, 0x00000000, 0x83098086, 0x48322bed, 0xac1e1170, 0x4e6c5a72, 0xfbfd0eff, 0x560f8538, 0x1e3daed5, 0x27362d39, 0x640a0fd9, 0x21685ca6, 0xd19b5b54, 0x3a24362e, 0xb10c0a67, 0x0f9357e7, 0xd2b4ee96, 0x9e1b9b91, 0x4f80c0c5, 0xa261dc20, 0x695a774b, 0x161c121a, 0x0ae293ba, 0xe5c0a02a, 0x433c22e0, 0x1d121b17, 0x0b0e090d, 0xadf28bc7, 0xb92db6a8, 0xc8141ea9, 0x8557f119, 0x4caf7507, 0xbbee99dd, 0xfda37f60, 0x9ff70126, 0xbc5c72f5, 0xc544663b, 0x345bfb7e, 0x768b4329, 0xdccb23c6, 0x68b6edfc, 0x63b8e4f1, 0xcad731dc, 0x10426385, 0x40139722, 0x2084c611, 0x7d854a24, 0xf8d2bb3d, 0x11aef932, 0x6dc729a1, 0x4b1d9e2f, 0xf3dcb230, 0xec0d8652, 0xd077c1e3, 0x6c2bb316, 0x99a970b9, 0xfa119448, 0x2247e964, 0xc4a8fc8c, 0x1aa0f03f, 0xd8567d2c, 0xef223390, 0xc787494e, 0xc1d938d1, 0xfe8ccaa2, 0x3698d40b, 0xcfa6f581, 0x28a57ade, 0x26dab78e, 0xa43fadbf, 0xe42c3a9d, 0x0d507892, 0x9b6a5fcc, 0x62547e46, 0xc2f68d13, 0xe890d8b8, 0x5e2e39f7, 0xf582c3af, 0xbe9f5d80, 0x7c69d093, 0xa96fd52d, 0xb3cf2512, 0x3bc8ac99, 0xa710187d, 0x6ee89c63, 0x7bdb3bbb, 0x09cd2678, 0xf46e5918, 0x01ec9ab7, 0xa8834f9a, 0x65e6956e, 0x7eaaffe6, 0x0821bccf, 0xe6ef15e8, 0xd9bae79b, 0xce4a6f36, 0xd4ea9f09, 0xd629b07c, 0xaf31a4b2, 0x312a3f23, 0x30c6a594, 0xc035a266, 0x37744ebc, 0xa6fc82ca, 0xb0e090d0, 0x1533a7d8, 0x4af10498, 0xf741ecda, 0x0e7fcd50, 0x2f1791f6, 0x8d764dd6, 0x4d43efb0, 0x54ccaa4d, 0xdfe49604, 0xe39ed1b5, 0x1b4c6a88, 0xb8c12c1f, 0x7f466551, 0x049d5eea, 0x5d018c35, 0x73fa8774, 0x2efb0b41, 0x5ab3671d, 0x5292dbd2, 0x33e91056, 0x136dd647, 0x8c9ad761, 0x7a37a10c, 0x8e59f814, 0x89eb133c, 0xeecea927, 0x35b761c9, 0xede11ce5, 0x3c7a47b1, 0x599cd2df, 0x3f55f273, 0x791814ce, 0xbf73c737, 0xea53f7cd, 0x5b5ffdaa, 0x14df3d6f, 0x867844db, 0x81caaff3, 0x3eb968c4, 0x2c382434, 0x5fc2a340, 0x72161dc3, 0x0cbce225, 0x8b283c49, 0x41ff0d95, 0x7139a801, 0xde080cb3, 0x9cd8b4e4, 0x906456c1, 0x617bcb84, 0x70d532b6, 0x74486c5c, 0x42d0b857];\n    var T7 = [0xa75051f4, 0x65537e41, 0xa4c31a17, 0x5e963a27, 0x6bcb3bab, 0x45f11f9d, 0x58abacfa, 0x03934be3, 0xfa552030, 0x6df6ad76, 0x769188cc, 0x4c25f502, 0xd7fc4fe5, 0xcbd7c52a, 0x44802635, 0xa38fb562, 0x5a49deb1, 0x1b6725ba, 0x0e9845ea, 0xc0e15dfe, 0x7502c32f, 0xf012814c, 0x97a38d46, 0xf9c66bd3, 0x5fe7038f, 0x9c951592, 0x7aebbf6d, 0x59da9552, 0x832dd4be, 0x21d35874, 0x692949e0, 0xc8448ec9, 0x896a75c2, 0x7978f48e, 0x3e6b9958, 0x71dd27b9, 0x4fb6bee1, 0xad17f088, 0xac66c920, 0x3ab47dce, 0x4a1863df, 0x3182e51a, 0x33609751, 0x7f456253, 0x77e0b164, 0xae84bb6b, 0xa01cfe81, 0x2b94f908, 0x68587048, 0xfd198f45, 0x6c8794de, 0xf8b7527b, 0xd323ab73, 0x02e2724b, 0x8f57e31f, 0xab2a6655, 0x2807b2eb, 0xc2032fb5, 0x7b9a86c5, 0x08a5d337, 0x87f23028, 0xa5b223bf, 0x6aba0203, 0x825ced16, 0x1c2b8acf, 0xb492a779, 0xf2f0f307, 0xe2a14e69, 0xf4cd65da, 0xbed50605, 0x621fd134, 0xfe8ac4a6, 0x539d342e, 0x55a0a2f3, 0xe132058a, 0xeb75a4f6, 0xec390b83, 0xefaa4060, 0x9f065e71, 0x1051bd6e, 0x8af93e21, 0x063d96dd, 0x05aedd3e, 0xbd464de6, 0x8db59154, 0x5d0571c4, 0xd46f0406, 0x15ff6050, 0xfb241998, 0xe997d6bd, 0x43cc8940, 0x9e7767d9, 0x42bdb0e8, 0x8b880789, 0x5b38e719, 0xeedb79c8, 0x0a47a17c, 0x0fe97c42, 0x1ec9f884, 0x00000000, 0x86830980, 0xed48322b, 0x70ac1e11, 0x724e6c5a, 0xfffbfd0e, 0x38560f85, 0xd51e3dae, 0x3927362d, 0xd9640a0f, 0xa621685c, 0x54d19b5b, 0x2e3a2436, 0x67b10c0a, 0xe70f9357, 0x96d2b4ee, 0x919e1b9b, 0xc54f80c0, 0x20a261dc, 0x4b695a77, 0x1a161c12, 0xba0ae293, 0x2ae5c0a0, 0xe0433c22, 0x171d121b, 0x0d0b0e09, 0xc7adf28b, 0xa8b92db6, 0xa9c8141e, 0x198557f1, 0x074caf75, 0xddbbee99, 0x60fda37f, 0x269ff701, 0xf5bc5c72, 0x3bc54466, 0x7e345bfb, 0x29768b43, 0xc6dccb23, 0xfc68b6ed, 0xf163b8e4, 0xdccad731, 0x85104263, 0x22401397, 0x112084c6, 0x247d854a, 0x3df8d2bb, 0x3211aef9, 0xa16dc729, 0x2f4b1d9e, 0x30f3dcb2, 0x52ec0d86, 0xe3d077c1, 0x166c2bb3, 0xb999a970, 0x48fa1194, 0x642247e9, 0x8cc4a8fc, 0x3f1aa0f0, 0x2cd8567d, 0x90ef2233, 0x4ec78749, 0xd1c1d938, 0xa2fe8cca, 0x0b3698d4, 0x81cfa6f5, 0xde28a57a, 0x8e26dab7, 0xbfa43fad, 0x9de42c3a, 0x920d5078, 0xcc9b6a5f, 0x4662547e, 0x13c2f68d, 0xb8e890d8, 0xf75e2e39, 0xaff582c3, 0x80be9f5d, 0x937c69d0, 0x2da96fd5, 0x12b3cf25, 0x993bc8ac, 0x7da71018, 0x636ee89c, 0xbb7bdb3b, 0x7809cd26, 0x18f46e59, 0xb701ec9a, 0x9aa8834f, 0x6e65e695, 0xe67eaaff, 0xcf0821bc, 0xe8e6ef15, 0x9bd9bae7, 0x36ce4a6f, 0x09d4ea9f, 0x7cd629b0, 0xb2af31a4, 0x23312a3f, 0x9430c6a5, 0x66c035a2, 0xbc37744e, 0xcaa6fc82, 0xd0b0e090, 0xd81533a7, 0x984af104, 0xdaf741ec, 0x500e7fcd, 0xf62f1791, 0xd68d764d, 0xb04d43ef, 0x4d54ccaa, 0x04dfe496, 0xb5e39ed1, 0x881b4c6a, 0x1fb8c12c, 0x517f4665, 0xea049d5e, 0x355d018c, 0x7473fa87, 0x412efb0b, 0x1d5ab367, 0xd25292db, 0x5633e910, 0x47136dd6, 0x618c9ad7, 0x0c7a37a1, 0x148e59f8, 0x3c89eb13, 0x27eecea9, 0xc935b761, 0xe5ede11c, 0xb13c7a47, 0xdf599cd2, 0x733f55f2, 0xce791814, 0x37bf73c7, 0xcdea53f7, 0xaa5b5ffd, 0x6f14df3d, 0xdb867844, 0xf381caaf, 0xc43eb968, 0x342c3824, 0x405fc2a3, 0xc372161d, 0x250cbce2, 0x498b283c, 0x9541ff0d, 0x017139a8, 0xb3de080c, 0xe49cd8b4, 0xc1906456, 0x84617bcb, 0xb670d532, 0x5c74486c, 0x5742d0b8];\n    var T8 = [0xf4a75051, 0x4165537e, 0x17a4c31a, 0x275e963a, 0xab6bcb3b, 0x9d45f11f, 0xfa58abac, 0xe303934b, 0x30fa5520, 0x766df6ad, 0xcc769188, 0x024c25f5, 0xe5d7fc4f, 0x2acbd7c5, 0x35448026, 0x62a38fb5, 0xb15a49de, 0xba1b6725, 0xea0e9845, 0xfec0e15d, 0x2f7502c3, 0x4cf01281, 0x4697a38d, 0xd3f9c66b, 0x8f5fe703, 0x929c9515, 0x6d7aebbf, 0x5259da95, 0xbe832dd4, 0x7421d358, 0xe0692949, 0xc9c8448e, 0xc2896a75, 0x8e7978f4, 0x583e6b99, 0xb971dd27, 0xe14fb6be, 0x88ad17f0, 0x20ac66c9, 0xce3ab47d, 0xdf4a1863, 0x1a3182e5, 0x51336097, 0x537f4562, 0x6477e0b1, 0x6bae84bb, 0x81a01cfe, 0x082b94f9, 0x48685870, 0x45fd198f, 0xde6c8794, 0x7bf8b752, 0x73d323ab, 0x4b02e272, 0x1f8f57e3, 0x55ab2a66, 0xeb2807b2, 0xb5c2032f, 0xc57b9a86, 0x3708a5d3, 0x2887f230, 0xbfa5b223, 0x036aba02, 0x16825ced, 0xcf1c2b8a, 0x79b492a7, 0x07f2f0f3, 0x69e2a14e, 0xdaf4cd65, 0x05bed506, 0x34621fd1, 0xa6fe8ac4, 0x2e539d34, 0xf355a0a2, 0x8ae13205, 0xf6eb75a4, 0x83ec390b, 0x60efaa40, 0x719f065e, 0x6e1051bd, 0x218af93e, 0xdd063d96, 0x3e05aedd, 0xe6bd464d, 0x548db591, 0xc45d0571, 0x06d46f04, 0x5015ff60, 0x98fb2419, 0xbde997d6, 0x4043cc89, 0xd99e7767, 0xe842bdb0, 0x898b8807, 0x195b38e7, 0xc8eedb79, 0x7c0a47a1, 0x420fe97c, 0x841ec9f8, 0x00000000, 0x80868309, 0x2bed4832, 0x1170ac1e, 0x5a724e6c, 0x0efffbfd, 0x8538560f, 0xaed51e3d, 0x2d392736, 0x0fd9640a, 0x5ca62168, 0x5b54d19b, 0x362e3a24, 0x0a67b10c, 0x57e70f93, 0xee96d2b4, 0x9b919e1b, 0xc0c54f80, 0xdc20a261, 0x774b695a, 0x121a161c, 0x93ba0ae2, 0xa02ae5c0, 0x22e0433c, 0x1b171d12, 0x090d0b0e, 0x8bc7adf2, 0xb6a8b92d, 0x1ea9c814, 0xf1198557, 0x75074caf, 0x99ddbbee, 0x7f60fda3, 0x01269ff7, 0x72f5bc5c, 0x663bc544, 0xfb7e345b, 0x4329768b, 0x23c6dccb, 0xedfc68b6, 0xe4f163b8, 0x31dccad7, 0x63851042, 0x97224013, 0xc6112084, 0x4a247d85, 0xbb3df8d2, 0xf93211ae, 0x29a16dc7, 0x9e2f4b1d, 0xb230f3dc, 0x8652ec0d, 0xc1e3d077, 0xb3166c2b, 0x70b999a9, 0x9448fa11, 0xe9642247, 0xfc8cc4a8, 0xf03f1aa0, 0x7d2cd856, 0x3390ef22, 0x494ec787, 0x38d1c1d9, 0xcaa2fe8c, 0xd40b3698, 0xf581cfa6, 0x7ade28a5, 0xb78e26da, 0xadbfa43f, 0x3a9de42c, 0x78920d50, 0x5fcc9b6a, 0x7e466254, 0x8d13c2f6, 0xd8b8e890, 0x39f75e2e, 0xc3aff582, 0x5d80be9f, 0xd0937c69, 0xd52da96f, 0x2512b3cf, 0xac993bc8, 0x187da710, 0x9c636ee8, 0x3bbb7bdb, 0x267809cd, 0x5918f46e, 0x9ab701ec, 0x4f9aa883, 0x956e65e6, 0xffe67eaa, 0xbccf0821, 0x15e8e6ef, 0xe79bd9ba, 0x6f36ce4a, 0x9f09d4ea, 0xb07cd629, 0xa4b2af31, 0x3f23312a, 0xa59430c6, 0xa266c035, 0x4ebc3774, 0x82caa6fc, 0x90d0b0e0, 0xa7d81533, 0x04984af1, 0xecdaf741, 0xcd500e7f, 0x91f62f17, 0x4dd68d76, 0xefb04d43, 0xaa4d54cc, 0x9604dfe4, 0xd1b5e39e, 0x6a881b4c, 0x2c1fb8c1, 0x65517f46, 0x5eea049d, 0x8c355d01, 0x877473fa, 0x0b412efb, 0x671d5ab3, 0xdbd25292, 0x105633e9, 0xd647136d, 0xd7618c9a, 0xa10c7a37, 0xf8148e59, 0x133c89eb, 0xa927eece, 0x61c935b7, 0x1ce5ede1, 0x47b13c7a, 0xd2df599c, 0xf2733f55, 0x14ce7918, 0xc737bf73, 0xf7cdea53, 0xfdaa5b5f, 0x3d6f14df, 0x44db8678, 0xaff381ca, 0x68c43eb9, 0x24342c38, 0xa3405fc2, 0x1dc37216, 0xe2250cbc, 0x3c498b28, 0x0d9541ff, 0xa8017139, 0x0cb3de08, 0xb4e49cd8, 0x56c19064, 0xcb84617b, 0x32b670d5, 0x6c5c7448, 0xb85742d0];\n\n    // Transformations for decryption key expansion\n    var U1 = [0x00000000, 0x0e090d0b, 0x1c121a16, 0x121b171d, 0x3824342c, 0x362d3927, 0x24362e3a, 0x2a3f2331, 0x70486858, 0x7e416553, 0x6c5a724e, 0x62537f45, 0x486c5c74, 0x4665517f, 0x547e4662, 0x5a774b69, 0xe090d0b0, 0xee99ddbb, 0xfc82caa6, 0xf28bc7ad, 0xd8b4e49c, 0xd6bde997, 0xc4a6fe8a, 0xcaaff381, 0x90d8b8e8, 0x9ed1b5e3, 0x8ccaa2fe, 0x82c3aff5, 0xa8fc8cc4, 0xa6f581cf, 0xb4ee96d2, 0xbae79bd9, 0xdb3bbb7b, 0xd532b670, 0xc729a16d, 0xc920ac66, 0xe31f8f57, 0xed16825c, 0xff0d9541, 0xf104984a, 0xab73d323, 0xa57ade28, 0xb761c935, 0xb968c43e, 0x9357e70f, 0x9d5eea04, 0x8f45fd19, 0x814cf012, 0x3bab6bcb, 0x35a266c0, 0x27b971dd, 0x29b07cd6, 0x038f5fe7, 0x0d8652ec, 0x1f9d45f1, 0x119448fa, 0x4be30393, 0x45ea0e98, 0x57f11985, 0x59f8148e, 0x73c737bf, 0x7dce3ab4, 0x6fd52da9, 0x61dc20a2, 0xad766df6, 0xa37f60fd, 0xb16477e0, 0xbf6d7aeb, 0x955259da, 0x9b5b54d1, 0x894043cc, 0x87494ec7, 0xdd3e05ae, 0xd33708a5, 0xc12c1fb8, 0xcf2512b3, 0xe51a3182, 0xeb133c89, 0xf9082b94, 0xf701269f, 0x4de6bd46, 0x43efb04d, 0x51f4a750, 0x5ffdaa5b, 0x75c2896a, 0x7bcb8461, 0x69d0937c, 0x67d99e77, 0x3daed51e, 0x33a7d815, 0x21bccf08, 0x2fb5c203, 0x058ae132, 0x0b83ec39, 0x1998fb24, 0x1791f62f, 0x764dd68d, 0x7844db86, 0x6a5fcc9b, 0x6456c190, 0x4e69e2a1, 0x4060efaa, 0x527bf8b7, 0x5c72f5bc, 0x0605bed5, 0x080cb3de, 0x1a17a4c3, 0x141ea9c8, 0x3e218af9, 0x302887f2, 0x223390ef, 0x2c3a9de4, 0x96dd063d, 0x98d40b36, 0x8acf1c2b, 0x84c61120, 0xaef93211, 0xa0f03f1a, 0xb2eb2807, 0xbce2250c, 0xe6956e65, 0xe89c636e, 0xfa877473, 0xf48e7978, 0xdeb15a49, 0xd0b85742, 0xc2a3405f, 0xccaa4d54, 0x41ecdaf7, 0x4fe5d7fc, 0x5dfec0e1, 0x53f7cdea, 0x79c8eedb, 0x77c1e3d0, 0x65daf4cd, 0x6bd3f9c6, 0x31a4b2af, 0x3fadbfa4, 0x2db6a8b9, 0x23bfa5b2, 0x09808683, 0x07898b88, 0x15929c95, 0x1b9b919e, 0xa17c0a47, 0xaf75074c, 0xbd6e1051, 0xb3671d5a, 0x99583e6b, 0x97513360, 0x854a247d, 0x8b432976, 0xd134621f, 0xdf3d6f14, 0xcd267809, 0xc32f7502, 0xe9105633, 0xe7195b38, 0xf5024c25, 0xfb0b412e, 0x9ad7618c, 0x94de6c87, 0x86c57b9a, 0x88cc7691, 0xa2f355a0, 0xacfa58ab, 0xbee14fb6, 0xb0e842bd, 0xea9f09d4, 0xe49604df, 0xf68d13c2, 0xf8841ec9, 0xd2bb3df8, 0xdcb230f3, 0xcea927ee, 0xc0a02ae5, 0x7a47b13c, 0x744ebc37, 0x6655ab2a, 0x685ca621, 0x42638510, 0x4c6a881b, 0x5e719f06, 0x5078920d, 0x0a0fd964, 0x0406d46f, 0x161dc372, 0x1814ce79, 0x322bed48, 0x3c22e043, 0x2e39f75e, 0x2030fa55, 0xec9ab701, 0xe293ba0a, 0xf088ad17, 0xfe81a01c, 0xd4be832d, 0xdab78e26, 0xc8ac993b, 0xc6a59430, 0x9cd2df59, 0x92dbd252, 0x80c0c54f, 0x8ec9c844, 0xa4f6eb75, 0xaaffe67e, 0xb8e4f163, 0xb6edfc68, 0x0c0a67b1, 0x02036aba, 0x10187da7, 0x1e1170ac, 0x342e539d, 0x3a275e96, 0x283c498b, 0x26354480, 0x7c420fe9, 0x724b02e2, 0x605015ff, 0x6e5918f4, 0x44663bc5, 0x4a6f36ce, 0x587421d3, 0x567d2cd8, 0x37a10c7a, 0x39a80171, 0x2bb3166c, 0x25ba1b67, 0x0f853856, 0x018c355d, 0x13972240, 0x1d9e2f4b, 0x47e96422, 0x49e06929, 0x5bfb7e34, 0x55f2733f, 0x7fcd500e, 0x71c45d05, 0x63df4a18, 0x6dd64713, 0xd731dcca, 0xd938d1c1, 0xcb23c6dc, 0xc52acbd7, 0xef15e8e6, 0xe11ce5ed, 0xf307f2f0, 0xfd0efffb, 0xa779b492, 0xa970b999, 0xbb6bae84, 0xb562a38f, 0x9f5d80be, 0x91548db5, 0x834f9aa8, 0x8d4697a3];\n    var U2 = [0x00000000, 0x0b0e090d, 0x161c121a, 0x1d121b17, 0x2c382434, 0x27362d39, 0x3a24362e, 0x312a3f23, 0x58704868, 0x537e4165, 0x4e6c5a72, 0x4562537f, 0x74486c5c, 0x7f466551, 0x62547e46, 0x695a774b, 0xb0e090d0, 0xbbee99dd, 0xa6fc82ca, 0xadf28bc7, 0x9cd8b4e4, 0x97d6bde9, 0x8ac4a6fe, 0x81caaff3, 0xe890d8b8, 0xe39ed1b5, 0xfe8ccaa2, 0xf582c3af, 0xc4a8fc8c, 0xcfa6f581, 0xd2b4ee96, 0xd9bae79b, 0x7bdb3bbb, 0x70d532b6, 0x6dc729a1, 0x66c920ac, 0x57e31f8f, 0x5ced1682, 0x41ff0d95, 0x4af10498, 0x23ab73d3, 0x28a57ade, 0x35b761c9, 0x3eb968c4, 0x0f9357e7, 0x049d5eea, 0x198f45fd, 0x12814cf0, 0xcb3bab6b, 0xc035a266, 0xdd27b971, 0xd629b07c, 0xe7038f5f, 0xec0d8652, 0xf11f9d45, 0xfa119448, 0x934be303, 0x9845ea0e, 0x8557f119, 0x8e59f814, 0xbf73c737, 0xb47dce3a, 0xa96fd52d, 0xa261dc20, 0xf6ad766d, 0xfda37f60, 0xe0b16477, 0xebbf6d7a, 0xda955259, 0xd19b5b54, 0xcc894043, 0xc787494e, 0xaedd3e05, 0xa5d33708, 0xb8c12c1f, 0xb3cf2512, 0x82e51a31, 0x89eb133c, 0x94f9082b, 0x9ff70126, 0x464de6bd, 0x4d43efb0, 0x5051f4a7, 0x5b5ffdaa, 0x6a75c289, 0x617bcb84, 0x7c69d093, 0x7767d99e, 0x1e3daed5, 0x1533a7d8, 0x0821bccf, 0x032fb5c2, 0x32058ae1, 0x390b83ec, 0x241998fb, 0x2f1791f6, 0x8d764dd6, 0x867844db, 0x9b6a5fcc, 0x906456c1, 0xa14e69e2, 0xaa4060ef, 0xb7527bf8, 0xbc5c72f5, 0xd50605be, 0xde080cb3, 0xc31a17a4, 0xc8141ea9, 0xf93e218a, 0xf2302887, 0xef223390, 0xe42c3a9d, 0x3d96dd06, 0x3698d40b, 0x2b8acf1c, 0x2084c611, 0x11aef932, 0x1aa0f03f, 0x07b2eb28, 0x0cbce225, 0x65e6956e, 0x6ee89c63, 0x73fa8774, 0x78f48e79, 0x49deb15a, 0x42d0b857, 0x5fc2a340, 0x54ccaa4d, 0xf741ecda, 0xfc4fe5d7, 0xe15dfec0, 0xea53f7cd, 0xdb79c8ee, 0xd077c1e3, 0xcd65daf4, 0xc66bd3f9, 0xaf31a4b2, 0xa43fadbf, 0xb92db6a8, 0xb223bfa5, 0x83098086, 0x8807898b, 0x9515929c, 0x9e1b9b91, 0x47a17c0a, 0x4caf7507, 0x51bd6e10, 0x5ab3671d, 0x6b99583e, 0x60975133, 0x7d854a24, 0x768b4329, 0x1fd13462, 0x14df3d6f, 0x09cd2678, 0x02c32f75, 0x33e91056, 0x38e7195b, 0x25f5024c, 0x2efb0b41, 0x8c9ad761, 0x8794de6c, 0x9a86c57b, 0x9188cc76, 0xa0a2f355, 0xabacfa58, 0xb6bee14f, 0xbdb0e842, 0xd4ea9f09, 0xdfe49604, 0xc2f68d13, 0xc9f8841e, 0xf8d2bb3d, 0xf3dcb230, 0xeecea927, 0xe5c0a02a, 0x3c7a47b1, 0x37744ebc, 0x2a6655ab, 0x21685ca6, 0x10426385, 0x1b4c6a88, 0x065e719f, 0x0d507892, 0x640a0fd9, 0x6f0406d4, 0x72161dc3, 0x791814ce, 0x48322bed, 0x433c22e0, 0x5e2e39f7, 0x552030fa, 0x01ec9ab7, 0x0ae293ba, 0x17f088ad, 0x1cfe81a0, 0x2dd4be83, 0x26dab78e, 0x3bc8ac99, 0x30c6a594, 0x599cd2df, 0x5292dbd2, 0x4f80c0c5, 0x448ec9c8, 0x75a4f6eb, 0x7eaaffe6, 0x63b8e4f1, 0x68b6edfc, 0xb10c0a67, 0xba02036a, 0xa710187d, 0xac1e1170, 0x9d342e53, 0x963a275e, 0x8b283c49, 0x80263544, 0xe97c420f, 0xe2724b02, 0xff605015, 0xf46e5918, 0xc544663b, 0xce4a6f36, 0xd3587421, 0xd8567d2c, 0x7a37a10c, 0x7139a801, 0x6c2bb316, 0x6725ba1b, 0x560f8538, 0x5d018c35, 0x40139722, 0x4b1d9e2f, 0x2247e964, 0x2949e069, 0x345bfb7e, 0x3f55f273, 0x0e7fcd50, 0x0571c45d, 0x1863df4a, 0x136dd647, 0xcad731dc, 0xc1d938d1, 0xdccb23c6, 0xd7c52acb, 0xe6ef15e8, 0xede11ce5, 0xf0f307f2, 0xfbfd0eff, 0x92a779b4, 0x99a970b9, 0x84bb6bae, 0x8fb562a3, 0xbe9f5d80, 0xb591548d, 0xa8834f9a, 0xa38d4697];\n    var U3 = [0x00000000, 0x0d0b0e09, 0x1a161c12, 0x171d121b, 0x342c3824, 0x3927362d, 0x2e3a2436, 0x23312a3f, 0x68587048, 0x65537e41, 0x724e6c5a, 0x7f456253, 0x5c74486c, 0x517f4665, 0x4662547e, 0x4b695a77, 0xd0b0e090, 0xddbbee99, 0xcaa6fc82, 0xc7adf28b, 0xe49cd8b4, 0xe997d6bd, 0xfe8ac4a6, 0xf381caaf, 0xb8e890d8, 0xb5e39ed1, 0xa2fe8cca, 0xaff582c3, 0x8cc4a8fc, 0x81cfa6f5, 0x96d2b4ee, 0x9bd9bae7, 0xbb7bdb3b, 0xb670d532, 0xa16dc729, 0xac66c920, 0x8f57e31f, 0x825ced16, 0x9541ff0d, 0x984af104, 0xd323ab73, 0xde28a57a, 0xc935b761, 0xc43eb968, 0xe70f9357, 0xea049d5e, 0xfd198f45, 0xf012814c, 0x6bcb3bab, 0x66c035a2, 0x71dd27b9, 0x7cd629b0, 0x5fe7038f, 0x52ec0d86, 0x45f11f9d, 0x48fa1194, 0x03934be3, 0x0e9845ea, 0x198557f1, 0x148e59f8, 0x37bf73c7, 0x3ab47dce, 0x2da96fd5, 0x20a261dc, 0x6df6ad76, 0x60fda37f, 0x77e0b164, 0x7aebbf6d, 0x59da9552, 0x54d19b5b, 0x43cc8940, 0x4ec78749, 0x05aedd3e, 0x08a5d337, 0x1fb8c12c, 0x12b3cf25, 0x3182e51a, 0x3c89eb13, 0x2b94f908, 0x269ff701, 0xbd464de6, 0xb04d43ef, 0xa75051f4, 0xaa5b5ffd, 0x896a75c2, 0x84617bcb, 0x937c69d0, 0x9e7767d9, 0xd51e3dae, 0xd81533a7, 0xcf0821bc, 0xc2032fb5, 0xe132058a, 0xec390b83, 0xfb241998, 0xf62f1791, 0xd68d764d, 0xdb867844, 0xcc9b6a5f, 0xc1906456, 0xe2a14e69, 0xefaa4060, 0xf8b7527b, 0xf5bc5c72, 0xbed50605, 0xb3de080c, 0xa4c31a17, 0xa9c8141e, 0x8af93e21, 0x87f23028, 0x90ef2233, 0x9de42c3a, 0x063d96dd, 0x0b3698d4, 0x1c2b8acf, 0x112084c6, 0x3211aef9, 0x3f1aa0f0, 0x2807b2eb, 0x250cbce2, 0x6e65e695, 0x636ee89c, 0x7473fa87, 0x7978f48e, 0x5a49deb1, 0x5742d0b8, 0x405fc2a3, 0x4d54ccaa, 0xdaf741ec, 0xd7fc4fe5, 0xc0e15dfe, 0xcdea53f7, 0xeedb79c8, 0xe3d077c1, 0xf4cd65da, 0xf9c66bd3, 0xb2af31a4, 0xbfa43fad, 0xa8b92db6, 0xa5b223bf, 0x86830980, 0x8b880789, 0x9c951592, 0x919e1b9b, 0x0a47a17c, 0x074caf75, 0x1051bd6e, 0x1d5ab367, 0x3e6b9958, 0x33609751, 0x247d854a, 0x29768b43, 0x621fd134, 0x6f14df3d, 0x7809cd26, 0x7502c32f, 0x5633e910, 0x5b38e719, 0x4c25f502, 0x412efb0b, 0x618c9ad7, 0x6c8794de, 0x7b9a86c5, 0x769188cc, 0x55a0a2f3, 0x58abacfa, 0x4fb6bee1, 0x42bdb0e8, 0x09d4ea9f, 0x04dfe496, 0x13c2f68d, 0x1ec9f884, 0x3df8d2bb, 0x30f3dcb2, 0x27eecea9, 0x2ae5c0a0, 0xb13c7a47, 0xbc37744e, 0xab2a6655, 0xa621685c, 0x85104263, 0x881b4c6a, 0x9f065e71, 0x920d5078, 0xd9640a0f, 0xd46f0406, 0xc372161d, 0xce791814, 0xed48322b, 0xe0433c22, 0xf75e2e39, 0xfa552030, 0xb701ec9a, 0xba0ae293, 0xad17f088, 0xa01cfe81, 0x832dd4be, 0x8e26dab7, 0x993bc8ac, 0x9430c6a5, 0xdf599cd2, 0xd25292db, 0xc54f80c0, 0xc8448ec9, 0xeb75a4f6, 0xe67eaaff, 0xf163b8e4, 0xfc68b6ed, 0x67b10c0a, 0x6aba0203, 0x7da71018, 0x70ac1e11, 0x539d342e, 0x5e963a27, 0x498b283c, 0x44802635, 0x0fe97c42, 0x02e2724b, 0x15ff6050, 0x18f46e59, 0x3bc54466, 0x36ce4a6f, 0x21d35874, 0x2cd8567d, 0x0c7a37a1, 0x017139a8, 0x166c2bb3, 0x1b6725ba, 0x38560f85, 0x355d018c, 0x22401397, 0x2f4b1d9e, 0x642247e9, 0x692949e0, 0x7e345bfb, 0x733f55f2, 0x500e7fcd, 0x5d0571c4, 0x4a1863df, 0x47136dd6, 0xdccad731, 0xd1c1d938, 0xc6dccb23, 0xcbd7c52a, 0xe8e6ef15, 0xe5ede11c, 0xf2f0f307, 0xfffbfd0e, 0xb492a779, 0xb999a970, 0xae84bb6b, 0xa38fb562, 0x80be9f5d, 0x8db59154, 0x9aa8834f, 0x97a38d46];\n    var U4 = [0x00000000, 0x090d0b0e, 0x121a161c, 0x1b171d12, 0x24342c38, 0x2d392736, 0x362e3a24, 0x3f23312a, 0x48685870, 0x4165537e, 0x5a724e6c, 0x537f4562, 0x6c5c7448, 0x65517f46, 0x7e466254, 0x774b695a, 0x90d0b0e0, 0x99ddbbee, 0x82caa6fc, 0x8bc7adf2, 0xb4e49cd8, 0xbde997d6, 0xa6fe8ac4, 0xaff381ca, 0xd8b8e890, 0xd1b5e39e, 0xcaa2fe8c, 0xc3aff582, 0xfc8cc4a8, 0xf581cfa6, 0xee96d2b4, 0xe79bd9ba, 0x3bbb7bdb, 0x32b670d5, 0x29a16dc7, 0x20ac66c9, 0x1f8f57e3, 0x16825ced, 0x0d9541ff, 0x04984af1, 0x73d323ab, 0x7ade28a5, 0x61c935b7, 0x68c43eb9, 0x57e70f93, 0x5eea049d, 0x45fd198f, 0x4cf01281, 0xab6bcb3b, 0xa266c035, 0xb971dd27, 0xb07cd629, 0x8f5fe703, 0x8652ec0d, 0x9d45f11f, 0x9448fa11, 0xe303934b, 0xea0e9845, 0xf1198557, 0xf8148e59, 0xc737bf73, 0xce3ab47d, 0xd52da96f, 0xdc20a261, 0x766df6ad, 0x7f60fda3, 0x6477e0b1, 0x6d7aebbf, 0x5259da95, 0x5b54d19b, 0x4043cc89, 0x494ec787, 0x3e05aedd, 0x3708a5d3, 0x2c1fb8c1, 0x2512b3cf, 0x1a3182e5, 0x133c89eb, 0x082b94f9, 0x01269ff7, 0xe6bd464d, 0xefb04d43, 0xf4a75051, 0xfdaa5b5f, 0xc2896a75, 0xcb84617b, 0xd0937c69, 0xd99e7767, 0xaed51e3d, 0xa7d81533, 0xbccf0821, 0xb5c2032f, 0x8ae13205, 0x83ec390b, 0x98fb2419, 0x91f62f17, 0x4dd68d76, 0x44db8678, 0x5fcc9b6a, 0x56c19064, 0x69e2a14e, 0x60efaa40, 0x7bf8b752, 0x72f5bc5c, 0x05bed506, 0x0cb3de08, 0x17a4c31a, 0x1ea9c814, 0x218af93e, 0x2887f230, 0x3390ef22, 0x3a9de42c, 0xdd063d96, 0xd40b3698, 0xcf1c2b8a, 0xc6112084, 0xf93211ae, 0xf03f1aa0, 0xeb2807b2, 0xe2250cbc, 0x956e65e6, 0x9c636ee8, 0x877473fa, 0x8e7978f4, 0xb15a49de, 0xb85742d0, 0xa3405fc2, 0xaa4d54cc, 0xecdaf741, 0xe5d7fc4f, 0xfec0e15d, 0xf7cdea53, 0xc8eedb79, 0xc1e3d077, 0xdaf4cd65, 0xd3f9c66b, 0xa4b2af31, 0xadbfa43f, 0xb6a8b92d, 0xbfa5b223, 0x80868309, 0x898b8807, 0x929c9515, 0x9b919e1b, 0x7c0a47a1, 0x75074caf, 0x6e1051bd, 0x671d5ab3, 0x583e6b99, 0x51336097, 0x4a247d85, 0x4329768b, 0x34621fd1, 0x3d6f14df, 0x267809cd, 0x2f7502c3, 0x105633e9, 0x195b38e7, 0x024c25f5, 0x0b412efb, 0xd7618c9a, 0xde6c8794, 0xc57b9a86, 0xcc769188, 0xf355a0a2, 0xfa58abac, 0xe14fb6be, 0xe842bdb0, 0x9f09d4ea, 0x9604dfe4, 0x8d13c2f6, 0x841ec9f8, 0xbb3df8d2, 0xb230f3dc, 0xa927eece, 0xa02ae5c0, 0x47b13c7a, 0x4ebc3774, 0x55ab2a66, 0x5ca62168, 0x63851042, 0x6a881b4c, 0x719f065e, 0x78920d50, 0x0fd9640a, 0x06d46f04, 0x1dc37216, 0x14ce7918, 0x2bed4832, 0x22e0433c, 0x39f75e2e, 0x30fa5520, 0x9ab701ec, 0x93ba0ae2, 0x88ad17f0, 0x81a01cfe, 0xbe832dd4, 0xb78e26da, 0xac993bc8, 0xa59430c6, 0xd2df599c, 0xdbd25292, 0xc0c54f80, 0xc9c8448e, 0xf6eb75a4, 0xffe67eaa, 0xe4f163b8, 0xedfc68b6, 0x0a67b10c, 0x036aba02, 0x187da710, 0x1170ac1e, 0x2e539d34, 0x275e963a, 0x3c498b28, 0x35448026, 0x420fe97c, 0x4b02e272, 0x5015ff60, 0x5918f46e, 0x663bc544, 0x6f36ce4a, 0x7421d358, 0x7d2cd856, 0xa10c7a37, 0xa8017139, 0xb3166c2b, 0xba1b6725, 0x8538560f, 0x8c355d01, 0x97224013, 0x9e2f4b1d, 0xe9642247, 0xe0692949, 0xfb7e345b, 0xf2733f55, 0xcd500e7f, 0xc45d0571, 0xdf4a1863, 0xd647136d, 0x31dccad7, 0x38d1c1d9, 0x23c6dccb, 0x2acbd7c5, 0x15e8e6ef, 0x1ce5ede1, 0x07f2f0f3, 0x0efffbfd, 0x79b492a7, 0x70b999a9, 0x6bae84bb, 0x62a38fb5, 0x5d80be9f, 0x548db591, 0x4f9aa883, 0x4697a38d];\n\n    function convertToInt32(bytes) {\n        var result = [];\n        for (var i = 0; i < bytes.length; i += 4) {\n            result.push(\n                (bytes[i    ] << 24) |\n                (bytes[i + 1] << 16) |\n                (bytes[i + 2] <<  8) |\n                 bytes[i + 3]\n            );\n        }\n        return result;\n    }\n\n    var AES = function(key) {\n        if (!(this instanceof AES)) {\n            throw Error('AES must be instanitated with `new`');\n        }\n\n        Object.defineProperty(this, 'key', {\n            value: coerceArray(key, true)\n        });\n\n        this._prepare();\n    }\n\n\n    AES.prototype._prepare = function() {\n\n        var rounds = numberOfRounds[this.key.length];\n        if (rounds == null) {\n            throw new Error('invalid key size (must be 16, 24 or 32 bytes)');\n        }\n\n        // encryption round keys\n        this._Ke = [];\n\n        // decryption round keys\n        this._Kd = [];\n\n        for (var i = 0; i <= rounds; i++) {\n            this._Ke.push([0, 0, 0, 0]);\n            this._Kd.push([0, 0, 0, 0]);\n        }\n\n        var roundKeyCount = (rounds + 1) * 4;\n        var KC = this.key.length / 4;\n\n        // convert the key into ints\n        var tk = convertToInt32(this.key);\n\n        // copy values into round key arrays\n        var index;\n        for (var i = 0; i < KC; i++) {\n            index = i >> 2;\n            this._Ke[index][i % 4] = tk[i];\n            this._Kd[rounds - index][i % 4] = tk[i];\n        }\n\n        // key expansion (fips-197 section 5.2)\n        var rconpointer = 0;\n        var t = KC, tt;\n        while (t < roundKeyCount) {\n            tt = tk[KC - 1];\n            tk[0] ^= ((S[(tt >> 16) & 0xFF] << 24) ^\n                      (S[(tt >>  8) & 0xFF] << 16) ^\n                      (S[ tt        & 0xFF] <<  8) ^\n                       S[(tt >> 24) & 0xFF]        ^\n                      (rcon[rconpointer] << 24));\n            rconpointer += 1;\n\n            // key expansion (for non-256 bit)\n            if (KC != 8) {\n                for (var i = 1; i < KC; i++) {\n                    tk[i] ^= tk[i - 1];\n                }\n\n            // key expansion for 256-bit keys is \"slightly different\" (fips-197)\n            } else {\n                for (var i = 1; i < (KC / 2); i++) {\n                    tk[i] ^= tk[i - 1];\n                }\n                tt = tk[(KC / 2) - 1];\n\n                tk[KC / 2] ^= (S[ tt        & 0xFF]        ^\n                              (S[(tt >>  8) & 0xFF] <<  8) ^\n                              (S[(tt >> 16) & 0xFF] << 16) ^\n                              (S[(tt >> 24) & 0xFF] << 24));\n\n                for (var i = (KC / 2) + 1; i < KC; i++) {\n                    tk[i] ^= tk[i - 1];\n                }\n            }\n\n            // copy values into round key arrays\n            var i = 0, r, c;\n            while (i < KC && t < roundKeyCount) {\n                r = t >> 2;\n                c = t % 4;\n                this._Ke[r][c] = tk[i];\n                this._Kd[rounds - r][c] = tk[i++];\n                t++;\n            }\n        }\n\n        // inverse-cipher-ify the decryption round key (fips-197 section 5.3)\n        for (var r = 1; r < rounds; r++) {\n            for (var c = 0; c < 4; c++) {\n                tt = this._Kd[r][c];\n                this._Kd[r][c] = (U1[(tt >> 24) & 0xFF] ^\n                                  U2[(tt >> 16) & 0xFF] ^\n                                  U3[(tt >>  8) & 0xFF] ^\n                                  U4[ tt        & 0xFF]);\n            }\n        }\n    }\n\n    AES.prototype.encrypt = function(plaintext) {\n        if (plaintext.length != 16) {\n            throw new Error('invalid plaintext size (must be 16 bytes)');\n        }\n\n        var rounds = this._Ke.length - 1;\n        var a = [0, 0, 0, 0];\n\n        // convert plaintext to (ints ^ key)\n        var t = convertToInt32(plaintext);\n        for (var i = 0; i < 4; i++) {\n            t[i] ^= this._Ke[0][i];\n        }\n\n        // apply round transforms\n        for (var r = 1; r < rounds; r++) {\n            for (var i = 0; i < 4; i++) {\n                a[i] = (T1[(t[ i         ] >> 24) & 0xff] ^\n                        T2[(t[(i + 1) % 4] >> 16) & 0xff] ^\n                        T3[(t[(i + 2) % 4] >>  8) & 0xff] ^\n                        T4[ t[(i + 3) % 4]        & 0xff] ^\n                        this._Ke[r][i]);\n            }\n            t = a.slice();\n        }\n\n        // the last round is special\n        var result = createArray(16), tt;\n        for (var i = 0; i < 4; i++) {\n            tt = this._Ke[rounds][i];\n            result[4 * i    ] = (S[(t[ i         ] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;\n            result[4 * i + 1] = (S[(t[(i + 1) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;\n            result[4 * i + 2] = (S[(t[(i + 2) % 4] >>  8) & 0xff] ^ (tt >>  8)) & 0xff;\n            result[4 * i + 3] = (S[ t[(i + 3) % 4]        & 0xff] ^  tt       ) & 0xff;\n        }\n\n        return result;\n    }\n\n    AES.prototype.decrypt = function(ciphertext) {\n        if (ciphertext.length != 16) {\n            throw new Error('invalid ciphertext size (must be 16 bytes)');\n        }\n\n        var rounds = this._Kd.length - 1;\n        var a = [0, 0, 0, 0];\n\n        // convert plaintext to (ints ^ key)\n        var t = convertToInt32(ciphertext);\n        for (var i = 0; i < 4; i++) {\n            t[i] ^= this._Kd[0][i];\n        }\n\n        // apply round transforms\n        for (var r = 1; r < rounds; r++) {\n            for (var i = 0; i < 4; i++) {\n                a[i] = (T5[(t[ i          ] >> 24) & 0xff] ^\n                        T6[(t[(i + 3) % 4] >> 16) & 0xff] ^\n                        T7[(t[(i + 2) % 4] >>  8) & 0xff] ^\n                        T8[ t[(i + 1) % 4]        & 0xff] ^\n                        this._Kd[r][i]);\n            }\n            t = a.slice();\n        }\n\n        // the last round is special\n        var result = createArray(16), tt;\n        for (var i = 0; i < 4; i++) {\n            tt = this._Kd[rounds][i];\n            result[4 * i    ] = (Si[(t[ i         ] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;\n            result[4 * i + 1] = (Si[(t[(i + 3) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;\n            result[4 * i + 2] = (Si[(t[(i + 2) % 4] >>  8) & 0xff] ^ (tt >>  8)) & 0xff;\n            result[4 * i + 3] = (Si[ t[(i + 1) % 4]        & 0xff] ^  tt       ) & 0xff;\n        }\n\n        return result;\n    }\n\n\n    /**\n     *  Mode Of Operation - Electonic Codebook (ECB)\n     */\n    var ModeOfOperationECB = function(key) {\n        if (!(this instanceof ModeOfOperationECB)) {\n            throw Error('AES must be instanitated with `new`');\n        }\n\n        this.description = \"Electronic Code Block\";\n        this.name = \"ecb\";\n\n        this._aes = new AES(key);\n    }\n\n    ModeOfOperationECB.prototype.encrypt = function(plaintext) {\n        plaintext = coerceArray(plaintext);\n\n        if ((plaintext.length % 16) !== 0) {\n            throw new Error('invalid plaintext size (must be multiple of 16 bytes)');\n        }\n\n        var ciphertext = createArray(plaintext.length);\n        var block = createArray(16);\n\n        for (var i = 0; i < plaintext.length; i += 16) {\n            copyArray(plaintext, block, 0, i, i + 16);\n            block = this._aes.encrypt(block);\n            copyArray(block, ciphertext, i);\n        }\n\n        return ciphertext;\n    }\n\n    ModeOfOperationECB.prototype.decrypt = function(ciphertext) {\n        ciphertext = coerceArray(ciphertext);\n\n        if ((ciphertext.length % 16) !== 0) {\n            throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');\n        }\n\n        var plaintext = createArray(ciphertext.length);\n        var block = createArray(16);\n\n        for (var i = 0; i < ciphertext.length; i += 16) {\n            copyArray(ciphertext, block, 0, i, i + 16);\n            block = this._aes.decrypt(block);\n            copyArray(block, plaintext, i);\n        }\n\n        return plaintext;\n    }\n\n\n    /**\n     *  Mode Of Operation - Cipher Block Chaining (CBC)\n     */\n    var ModeOfOperationCBC = function(key, iv) {\n        if (!(this instanceof ModeOfOperationCBC)) {\n            throw Error('AES must be instanitated with `new`');\n        }\n\n        this.description = \"Cipher Block Chaining\";\n        this.name = \"cbc\";\n\n        if (!iv) {\n            iv = createArray(16);\n\n        } else if (iv.length != 16) {\n            throw new Error('invalid initialation vector size (must be 16 bytes)');\n        }\n\n        this._lastCipherblock = coerceArray(iv, true);\n\n        this._aes = new AES(key);\n    }\n\n    ModeOfOperationCBC.prototype.encrypt = function(plaintext) {\n        plaintext = coerceArray(plaintext);\n\n        if ((plaintext.length % 16) !== 0) {\n            throw new Error('invalid plaintext size (must be multiple of 16 bytes)');\n        }\n\n        var ciphertext = createArray(plaintext.length);\n        var block = createArray(16);\n\n        for (var i = 0; i < plaintext.length; i += 16) {\n            copyArray(plaintext, block, 0, i, i + 16);\n\n            for (var j = 0; j < 16; j++) {\n                block[j] ^= this._lastCipherblock[j];\n            }\n\n            this._lastCipherblock = this._aes.encrypt(block);\n            copyArray(this._lastCipherblock, ciphertext, i);\n        }\n\n        return ciphertext;\n    }\n\n    ModeOfOperationCBC.prototype.decrypt = function(ciphertext) {\n        ciphertext = coerceArray(ciphertext);\n\n        if ((ciphertext.length % 16) !== 0) {\n            throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');\n        }\n\n        var plaintext = createArray(ciphertext.length);\n        var block = createArray(16);\n\n        for (var i = 0; i < ciphertext.length; i += 16) {\n            copyArray(ciphertext, block, 0, i, i + 16);\n            block = this._aes.decrypt(block);\n\n            for (var j = 0; j < 16; j++) {\n                plaintext[i + j] = block[j] ^ this._lastCipherblock[j];\n            }\n\n            copyArray(ciphertext, this._lastCipherblock, 0, i, i + 16);\n        }\n\n        return plaintext;\n    }\n\n\n    /**\n     *  Mode Of Operation - Cipher Feedback (CFB)\n     */\n    var ModeOfOperationCFB = function(key, iv, segmentSize) {\n        if (!(this instanceof ModeOfOperationCFB)) {\n            throw Error('AES must be instanitated with `new`');\n        }\n\n        this.description = \"Cipher Feedback\";\n        this.name = \"cfb\";\n\n        if (!iv) {\n            iv = createArray(16);\n\n        } else if (iv.length != 16) {\n            throw new Error('invalid initialation vector size (must be 16 size)');\n        }\n\n        if (!segmentSize) { segmentSize = 1; }\n\n        this.segmentSize = segmentSize;\n\n        this._shiftRegister = coerceArray(iv, true);\n\n        this._aes = new AES(key);\n    }\n\n    ModeOfOperationCFB.prototype.encrypt = function(plaintext) {\n        if ((plaintext.length % this.segmentSize) != 0) {\n            throw new Error('invalid plaintext size (must be segmentSize bytes)');\n        }\n\n        var encrypted = coerceArray(plaintext, true);\n\n        var xorSegment;\n        for (var i = 0; i < encrypted.length; i += this.segmentSize) {\n            xorSegment = this._aes.encrypt(this._shiftRegister);\n            for (var j = 0; j < this.segmentSize; j++) {\n                encrypted[i + j] ^= xorSegment[j];\n            }\n\n            // Shift the register\n            copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);\n            copyArray(encrypted, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);\n        }\n\n        return encrypted;\n    }\n\n    ModeOfOperationCFB.prototype.decrypt = function(ciphertext) {\n        if ((ciphertext.length % this.segmentSize) != 0) {\n            throw new Error('invalid ciphertext size (must be segmentSize bytes)');\n        }\n\n        var plaintext = coerceArray(ciphertext, true);\n\n        var xorSegment;\n        for (var i = 0; i < plaintext.length; i += this.segmentSize) {\n            xorSegment = this._aes.encrypt(this._shiftRegister);\n\n            for (var j = 0; j < this.segmentSize; j++) {\n                plaintext[i + j] ^= xorSegment[j];\n            }\n\n            // Shift the register\n            copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);\n            copyArray(ciphertext, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);\n        }\n\n        return plaintext;\n    }\n\n    /**\n     *  Mode Of Operation - Output Feedback (OFB)\n     */\n    var ModeOfOperationOFB = function(key, iv) {\n        if (!(this instanceof ModeOfOperationOFB)) {\n            throw Error('AES must be instanitated with `new`');\n        }\n\n        this.description = \"Output Feedback\";\n        this.name = \"ofb\";\n\n        if (!iv) {\n            iv = createArray(16);\n\n        } else if (iv.length != 16) {\n            throw new Error('invalid initialation vector size (must be 16 bytes)');\n        }\n\n        this._lastPrecipher = coerceArray(iv, true);\n        this._lastPrecipherIndex = 16;\n\n        this._aes = new AES(key);\n    }\n\n    ModeOfOperationOFB.prototype.encrypt = function(plaintext) {\n        var encrypted = coerceArray(plaintext, true);\n\n        for (var i = 0; i < encrypted.length; i++) {\n            if (this._lastPrecipherIndex === 16) {\n                this._lastPrecipher = this._aes.encrypt(this._lastPrecipher);\n                this._lastPrecipherIndex = 0;\n            }\n            encrypted[i] ^= this._lastPrecipher[this._lastPrecipherIndex++];\n        }\n\n        return encrypted;\n    }\n\n    // Decryption is symetric\n    ModeOfOperationOFB.prototype.decrypt = ModeOfOperationOFB.prototype.encrypt;\n\n\n    /**\n     *  Counter object for CTR common mode of operation\n     */\n    var Counter = function(initialValue) {\n        if (!(this instanceof Counter)) {\n            throw Error('Counter must be instanitated with `new`');\n        }\n\n        // We allow 0, but anything false-ish uses the default 1\n        if (initialValue !== 0 && !initialValue) { initialValue = 1; }\n\n        if (typeof(initialValue) === 'number') {\n            this._counter = createArray(16);\n            this.setValue(initialValue);\n\n        } else {\n            this.setBytes(initialValue);\n        }\n    }\n\n    Counter.prototype.setValue = function(value) {\n        if (typeof(value) !== 'number' || parseInt(value) != value) {\n            throw new Error('invalid counter value (must be an integer)');\n        }\n\n        // We cannot safely handle numbers beyond the safe range for integers\n        if (value > Number.MAX_SAFE_INTEGER) {\n            throw new Error('integer value out of safe range');\n        }\n\n        for (var index = 15; index >= 0; --index) {\n            this._counter[index] = value % 256;\n            value = parseInt(value / 256);\n        }\n    }\n\n    Counter.prototype.setBytes = function(bytes) {\n        bytes = coerceArray(bytes, true);\n\n        if (bytes.length != 16) {\n            throw new Error('invalid counter bytes size (must be 16 bytes)');\n        }\n\n        this._counter = bytes;\n    };\n\n    Counter.prototype.increment = function() {\n        for (var i = 15; i >= 0; i--) {\n            if (this._counter[i] === 255) {\n                this._counter[i] = 0;\n            } else {\n                this._counter[i]++;\n                break;\n            }\n        }\n    }\n\n\n    /**\n     *  Mode Of Operation - Counter (CTR)\n     */\n    var ModeOfOperationCTR = function(key, counter) {\n        if (!(this instanceof ModeOfOperationCTR)) {\n            throw Error('AES must be instanitated with `new`');\n        }\n\n        this.description = \"Counter\";\n        this.name = \"ctr\";\n\n        if (!(counter instanceof Counter)) {\n            counter = new Counter(counter)\n        }\n\n        this._counter = counter;\n\n        this._remainingCounter = null;\n        this._remainingCounterIndex = 16;\n\n        this._aes = new AES(key);\n    }\n\n    ModeOfOperationCTR.prototype.encrypt = function(plaintext) {\n        var encrypted = coerceArray(plaintext, true);\n\n        for (var i = 0; i < encrypted.length; i++) {\n            if (this._remainingCounterIndex === 16) {\n                this._remainingCounter = this._aes.encrypt(this._counter._counter);\n                this._remainingCounterIndex = 0;\n                this._counter.increment();\n            }\n            encrypted[i] ^= this._remainingCounter[this._remainingCounterIndex++];\n        }\n\n        return encrypted;\n    }\n\n    // Decryption is symetric\n    ModeOfOperationCTR.prototype.decrypt = ModeOfOperationCTR.prototype.encrypt;\n\n\n    ///////////////////////\n    // Padding\n\n    // See:https://tools.ietf.org/html/rfc2315\n    function pkcs7pad(data) {\n        data = coerceArray(data, true);\n        var padder = 16 - (data.length % 16);\n        var result = createArray(data.length + padder);\n        copyArray(data, result);\n        for (var i = data.length; i < result.length; i++) {\n            result[i] = padder;\n        }\n        return result;\n    }\n\n    function pkcs7strip(data) {\n        data = coerceArray(data, true);\n        if (data.length < 16) { throw new Error('PKCS#7 invalid length'); }\n\n        var padder = data[data.length - 1];\n        if (padder > 16) { throw new Error('PKCS#7 padding byte out of range'); }\n\n        var length = data.length - padder;\n        for (var i = 0; i < padder; i++) {\n            if (data[length + i] !== padder) {\n                throw new Error('PKCS#7 invalid padding byte');\n            }\n        }\n\n        var result = createArray(length);\n        copyArray(data, result, 0, 0, length);\n        return result;\n    }\n\n    ///////////////////////\n    // Exporting\n\n\n    // The block cipher\n    var aesjs = {\n        AES: AES,\n        Counter: Counter,\n\n        ModeOfOperation: {\n            ecb: ModeOfOperationECB,\n            cbc: ModeOfOperationCBC,\n            cfb: ModeOfOperationCFB,\n            ofb: ModeOfOperationOFB,\n            ctr: ModeOfOperationCTR\n        },\n\n        utils: {\n            hex: convertHex,\n            utf8: convertUtf8\n        },\n\n        padding: {\n            pkcs7: {\n                pad: pkcs7pad,\n                strip: pkcs7strip\n            }\n        },\n\n        _arrayTest: {\n            coerceArray: coerceArray,\n            createArray: createArray,\n            copyArray: copyArray,\n        }\n    };\n\n\n    // node.js\n    if (typeof exports !== 'undefined') {\n        module.exports = aesjs\n\n    // RequireJS/AMD\n    // http://www.requirejs.org/docs/api.html\n    // https://github.com/amdjs/amdjs-api/wiki/AMD\n    } else if (typeof(define) === 'function' && define.amd) {\n        define([], function() { return aesjs; });\n\n    // Web Browsers\n    } else {\n\n        // If there was an existing library at \"aesjs\" make sure it's still available\n        if (root.aesjs) {\n            aesjs._aesjs = root.aesjs;\n        }\n\n        root.aesjs = aesjs;\n    }\n\n\n})(this);\n","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nmodule.exports = {\n  2:      'need dictionary',     /* Z_NEED_DICT       2  */\n  1:      'stream end',          /* Z_STREAM_END      1  */\n  0:      '',                    /* Z_OK              0  */\n  '-1':   'file error',          /* Z_ERRNO         (-1) */\n  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */\n  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */\n  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */\n  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */\n  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */\n};\n","'use strict';\n\n// Note: adler32 takes 12% for level 0 and 2% for level 6.\n// It isn't worth it to make additional optimizations as in original.\n// Small size is preferable.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction adler32(adler, buf, len, pos) {\n  var s1 = (adler & 0xffff) |0,\n      s2 = ((adler >>> 16) & 0xffff) |0,\n      n = 0;\n\n  while (len !== 0) {\n    // Set limit ~ twice less than 5552, to keep\n    // s2 in 31-bits, because we force signed ints.\n    // in other case %= will fail.\n    n = len > 2000 ? 2000 : len;\n    len -= n;\n\n    do {\n      s1 = (s1 + buf[pos++]) |0;\n      s2 = (s2 + s1) |0;\n    } while (--n);\n\n    s1 %= 65521;\n    s2 %= 65521;\n  }\n\n  return (s1 | (s2 << 16)) |0;\n}\n\n\nmodule.exports = adler32;\n","'use strict';\n\n// Note: we can't get significant speed boost here.\n// So write code to minimize size - no pregenerated tables\n// and array tools dependencies.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// Use ordinary array, since untyped makes no boost here\nfunction makeTable() {\n  var c, table = [];\n\n  for (var n = 0; n < 256; n++) {\n    c = n;\n    for (var k = 0; k < 8; k++) {\n      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));\n    }\n    table[n] = c;\n  }\n\n  return table;\n}\n\n// Create table on load. Just 255 signed longs. Not a problem.\nvar crcTable = makeTable();\n\n\nfunction crc32(crc, buf, len, pos) {\n  var t = crcTable,\n      end = pos + len;\n\n  crc ^= -1;\n\n  for (var i = pos; i < end; i++) {\n    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];\n  }\n\n  return (crc ^ (-1)); // >>> 0;\n}\n\n\nmodule.exports = crc32;\n","// String encode/decode helpers\n'use strict';\n\n\nvar utils = require('./common');\n\n\n// Quick check if we can use fast array to bin string conversion\n//\n// - apply(Array) can fail on Android 2.2\n// - apply(Uint8Array) can fail on iOS 5.1 Safari\n//\nvar STR_APPLY_OK = true;\nvar STR_APPLY_UIA_OK = true;\n\ntry { String.fromCharCode.apply(null, [ 0 ]); } catch (__) { STR_APPLY_OK = false; }\ntry { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }\n\n\n// Table with utf8 lengths (calculated by first byte of sequence)\n// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,\n// because max possible codepoint is 0x10ffff\nvar _utf8len = new utils.Buf8(256);\nfor (var q = 0; q < 256; q++) {\n  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);\n}\n_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start\n\n\n// convert string to array (typed, when possible)\nexports.string2buf = function (str) {\n  var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;\n\n  // count binary size\n  for (m_pos = 0; m_pos < str_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;\n  }\n\n  // allocate buffer\n  buf = new utils.Buf8(buf_len);\n\n  // convert\n  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    if (c < 0x80) {\n      /* one byte */\n      buf[i++] = c;\n    } else if (c < 0x800) {\n      /* two bytes */\n      buf[i++] = 0xC0 | (c >>> 6);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else if (c < 0x10000) {\n      /* three bytes */\n      buf[i++] = 0xE0 | (c >>> 12);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else {\n      /* four bytes */\n      buf[i++] = 0xf0 | (c >>> 18);\n      buf[i++] = 0x80 | (c >>> 12 & 0x3f);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    }\n  }\n\n  return buf;\n};\n\n// Helper (used in 2 places)\nfunction buf2binstring(buf, len) {\n  // On Chrome, the arguments in a function call that are allowed is `65534`.\n  // If the length of the buffer is smaller than that, we can use this optimization,\n  // otherwise we will take a slower path.\n  if (len < 65534) {\n    if ((buf.subarray && STR_APPLY_UIA_OK) || (!buf.subarray && STR_APPLY_OK)) {\n      return String.fromCharCode.apply(null, utils.shrinkBuf(buf, len));\n    }\n  }\n\n  var result = '';\n  for (var i = 0; i < len; i++) {\n    result += String.fromCharCode(buf[i]);\n  }\n  return result;\n}\n\n\n// Convert byte array to binary string\nexports.buf2binstring = function (buf) {\n  return buf2binstring(buf, buf.length);\n};\n\n\n// Convert binary string (typed, when possible)\nexports.binstring2buf = function (str) {\n  var buf = new utils.Buf8(str.length);\n  for (var i = 0, len = buf.length; i < len; i++) {\n    buf[i] = str.charCodeAt(i);\n  }\n  return buf;\n};\n\n\n// convert array to string\nexports.buf2string = function (buf, max) {\n  var i, out, c, c_len;\n  var len = max || buf.length;\n\n  // Reserve max possible length (2 words per char)\n  // NB: by unknown reasons, Array is significantly faster for\n  //     String.fromCharCode.apply than Uint16Array.\n  var utf16buf = new Array(len * 2);\n\n  for (out = 0, i = 0; i < len;) {\n    c = buf[i++];\n    // quick process ascii\n    if (c < 0x80) { utf16buf[out++] = c; continue; }\n\n    c_len = _utf8len[c];\n    // skip 5 & 6 byte codes\n    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }\n\n    // apply mask on first byte\n    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;\n    // join the rest\n    while (c_len > 1 && i < len) {\n      c = (c << 6) | (buf[i++] & 0x3f);\n      c_len--;\n    }\n\n    // terminated by end of string?\n    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }\n\n    if (c < 0x10000) {\n      utf16buf[out++] = c;\n    } else {\n      c -= 0x10000;\n      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);\n      utf16buf[out++] = 0xdc00 | (c & 0x3ff);\n    }\n  }\n\n  return buf2binstring(utf16buf, out);\n};\n\n\n// Calculate max possible position in utf8 buffer,\n// that will not break sequence. If that's not possible\n// - (very small limits) return max size as is.\n//\n// buf[] - utf8 bytes array\n// max   - length limit (mandatory);\nexports.utf8border = function (buf, max) {\n  var pos;\n\n  max = max || buf.length;\n  if (max > buf.length) { max = buf.length; }\n\n  // go back from last position, until start of sequence found\n  pos = max - 1;\n  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }\n\n  // Very small and broken sequence,\n  // return max, because we should return something anyway.\n  if (pos < 0) { return max; }\n\n  // If we came to start of buffer - that means buffer is too small,\n  // return max too.\n  if (pos === 0) { return max; }\n\n  return (pos + _utf8len[buf[pos]] > max) ? pos : max;\n};\n","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction ZStream() {\n  /* next input byte */\n  this.input = null; // JS specific, because we have no pointers\n  this.next_in = 0;\n  /* number of bytes available at input */\n  this.avail_in = 0;\n  /* total number of input bytes read so far */\n  this.total_in = 0;\n  /* next output byte should be put there */\n  this.output = null; // JS specific, because we have no pointers\n  this.next_out = 0;\n  /* remaining free space at output */\n  this.avail_out = 0;\n  /* total number of bytes output so far */\n  this.total_out = 0;\n  /* last error message, NULL if no error */\n  this.msg = ''/*Z_NULL*/;\n  /* not visible by applications */\n  this.state = null;\n  /* best guess about the data type: binary or text */\n  this.data_type = 2/*Z_UNKNOWN*/;\n  /* adler32 value of the uncompressed data */\n  this.adler = 0;\n}\n\nmodule.exports = ZStream;\n","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nmodule.exports = {\n\n  /* Allowed flush values; see deflate() and inflate() below for details */\n  Z_NO_FLUSH:         0,\n  Z_PARTIAL_FLUSH:    1,\n  Z_SYNC_FLUSH:       2,\n  Z_FULL_FLUSH:       3,\n  Z_FINISH:           4,\n  Z_BLOCK:            5,\n  Z_TREES:            6,\n\n  /* Return codes for the compression/decompression functions. Negative values\n  * are errors, positive values are used for special but normal events.\n  */\n  Z_OK:               0,\n  Z_STREAM_END:       1,\n  Z_NEED_DICT:        2,\n  Z_ERRNO:           -1,\n  Z_STREAM_ERROR:    -2,\n  Z_DATA_ERROR:      -3,\n  //Z_MEM_ERROR:     -4,\n  Z_BUF_ERROR:       -5,\n  //Z_VERSION_ERROR: -6,\n\n  /* compression levels */\n  Z_NO_COMPRESSION:         0,\n  Z_BEST_SPEED:             1,\n  Z_BEST_COMPRESSION:       9,\n  Z_DEFAULT_COMPRESSION:   -1,\n\n\n  Z_FILTERED:               1,\n  Z_HUFFMAN_ONLY:           2,\n  Z_RLE:                    3,\n  Z_FIXED:                  4,\n  Z_DEFAULT_STRATEGY:       0,\n\n  /* Possible values of the data_type field (though see inflate()) */\n  Z_BINARY:                 0,\n  Z_TEXT:                   1,\n  //Z_ASCII:                1, // = Z_TEXT (deprecated)\n  Z_UNKNOWN:                2,\n\n  /* The deflate compression method */\n  Z_DEFLATED:               8\n  //Z_NULL:                 null // Use -1 or null inline, depending on var type\n};\n","// Top level file is just a mixin of submodules & constants\n'use strict';\n\nvar assign    = require('./lib/utils/common').assign;\n\nvar deflate   = require('./lib/deflate');\nvar inflate   = require('./lib/inflate');\nvar constants = require('./lib/zlib/constants');\n\nvar pako = {};\n\nassign(pako, deflate, inflate, constants);\n\nmodule.exports = pako;\n","'use strict';\n\n\nvar zlib_deflate = require('./zlib/deflate');\nvar utils        = require('./utils/common');\nvar strings      = require('./utils/strings');\nvar msg          = require('./zlib/messages');\nvar ZStream      = require('./zlib/zstream');\n\nvar toString = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nvar Z_NO_FLUSH      = 0;\nvar Z_FINISH        = 4;\n\nvar Z_OK            = 0;\nvar Z_STREAM_END    = 1;\nvar Z_SYNC_FLUSH    = 2;\n\nvar Z_DEFAULT_COMPRESSION = -1;\n\nvar Z_DEFAULT_STRATEGY    = 0;\n\nvar Z_DEFLATED  = 8;\n\n/* ===========================================================================*/\n\n\n/**\n * class Deflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[deflate]],\n * [[deflateRaw]] and [[gzip]].\n **/\n\n/* internal\n * Deflate.chunks -> Array\n *\n * Chunks of output data, if [[Deflate#onData]] not overridden.\n **/\n\n/**\n * Deflate.result -> Uint8Array|Array\n *\n * Compressed result, generated by default [[Deflate#onData]]\n * and [[Deflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Deflate#push]] with `Z_FINISH` / `true` param)  or if you\n * push a chunk with explicit flush (call [[Deflate#push]] with\n * `Z_SYNC_FLUSH` param).\n **/\n\n/**\n * Deflate.err -> Number\n *\n * Error code after deflate finished. 0 (Z_OK) on success.\n * You will not need it in real life, because deflate errors\n * are possible only on wrong options or bad `onData` / `onEnd`\n * custom handlers.\n **/\n\n/**\n * Deflate.msg -> String\n *\n * Error message, if [[Deflate.err]] != 0\n **/\n\n\n/**\n * new Deflate(options)\n * - options (Object): zlib deflate options.\n *\n * Creates new deflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `level`\n * - `windowBits`\n * - `memLevel`\n * - `strategy`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw deflate\n * - `gzip` (Boolean) - create gzip wrapper\n * - `to` (String) - if equal to 'string', then result will be \"binary string\"\n *    (each char code [0..255])\n * - `header` (Object) - custom header for gzip\n *   - `text` (Boolean) - true if compressed data believed to be text\n *   - `time` (Number) - modification time, unix timestamp\n *   - `os` (Number) - operation system code\n *   - `extra` (Array) - array of bytes with extra data (max 65536)\n *   - `name` (String) - file name (binary string)\n *   - `comment` (String) - comment (binary string)\n *   - `hcrc` (Boolean) - true if header crc should be added\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * var deflate = new pako.Deflate({ level: 3});\n *\n * deflate.push(chunk1, false);\n * deflate.push(chunk2, true);  // true -> last chunk\n *\n * if (deflate.err) { throw new Error(deflate.err); }\n *\n * console.log(deflate.result);\n * ```\n **/\nfunction Deflate(options) {\n  if (!(this instanceof Deflate)) return new Deflate(options);\n\n  this.options = utils.assign({\n    level: Z_DEFAULT_COMPRESSION,\n    method: Z_DEFLATED,\n    chunkSize: 16384,\n    windowBits: 15,\n    memLevel: 8,\n    strategy: Z_DEFAULT_STRATEGY,\n    to: ''\n  }, options || {});\n\n  var opt = this.options;\n\n  if (opt.raw && (opt.windowBits > 0)) {\n    opt.windowBits = -opt.windowBits;\n  }\n\n  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {\n    opt.windowBits += 16;\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm = new ZStream();\n  this.strm.avail_out = 0;\n\n  var status = zlib_deflate.deflateInit2(\n    this.strm,\n    opt.level,\n    opt.method,\n    opt.windowBits,\n    opt.memLevel,\n    opt.strategy\n  );\n\n  if (status !== Z_OK) {\n    throw new Error(msg[status]);\n  }\n\n  if (opt.header) {\n    zlib_deflate.deflateSetHeader(this.strm, opt.header);\n  }\n\n  if (opt.dictionary) {\n    var dict;\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      // If we need to compress text, change encoding to utf8.\n      dict = strings.string2buf(opt.dictionary);\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n      dict = new Uint8Array(opt.dictionary);\n    } else {\n      dict = opt.dictionary;\n    }\n\n    status = zlib_deflate.deflateSetDictionary(this.strm, dict);\n\n    if (status !== Z_OK) {\n      throw new Error(msg[status]);\n    }\n\n    this._dict_set = true;\n  }\n}\n\n/**\n * Deflate#push(data[, mode]) -> Boolean\n * - data (Uint8Array|Array|ArrayBuffer|String): input data. Strings will be\n *   converted to utf8 byte sequence.\n * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.\n *\n * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with\n * new compressed chunks. Returns `true` on success. The last data block must have\n * mode Z_FINISH (or `true`). That will flush internal pending buffers and call\n * [[Deflate#onEnd]]. For interim explicit flushes (without ending the stream) you\n * can use mode Z_SYNC_FLUSH, keeping the compression context.\n *\n * On fail call [[Deflate#onEnd]] with error code and return false.\n *\n * We strongly recommend to use `Uint8Array` on input for best speed (output\n * array format is detected automatically). Also, don't skip last param and always\n * use the same type in your code (boolean or number). That will improve JS speed.\n *\n * For regular `Array`-s make sure all elements are [0..255].\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nDeflate.prototype.push = function (data, mode) {\n  var strm = this.strm;\n  var chunkSize = this.options.chunkSize;\n  var status, _mode;\n\n  if (this.ended) { return false; }\n\n  _mode = (mode === ~~mode) ? mode : ((mode === true) ? Z_FINISH : Z_NO_FLUSH);\n\n  // Convert data if needed\n  if (typeof data === 'string') {\n    // If we need to compress text, change encoding to utf8.\n    strm.input = strings.string2buf(data);\n  } else if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  do {\n    if (strm.avail_out === 0) {\n      strm.output = new utils.Buf8(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n    status = zlib_deflate.deflate(strm, _mode);    /* no bad return value */\n\n    if (status !== Z_STREAM_END && status !== Z_OK) {\n      this.onEnd(status);\n      this.ended = true;\n      return false;\n    }\n    if (strm.avail_out === 0 || (strm.avail_in === 0 && (_mode === Z_FINISH || _mode === Z_SYNC_FLUSH))) {\n      if (this.options.to === 'string') {\n        this.onData(strings.buf2binstring(utils.shrinkBuf(strm.output, strm.next_out)));\n      } else {\n        this.onData(utils.shrinkBuf(strm.output, strm.next_out));\n      }\n    }\n  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== Z_STREAM_END);\n\n  // Finalize on the last chunk.\n  if (_mode === Z_FINISH) {\n    status = zlib_deflate.deflateEnd(this.strm);\n    this.onEnd(status);\n    this.ended = true;\n    return status === Z_OK;\n  }\n\n  // callback interim results if Z_SYNC_FLUSH.\n  if (_mode === Z_SYNC_FLUSH) {\n    this.onEnd(Z_OK);\n    strm.avail_out = 0;\n    return true;\n  }\n\n  return true;\n};\n\n\n/**\n * Deflate#onData(chunk) -> Void\n * - chunk (Uint8Array|Array|String): output data. Type of array depends\n *   on js engine support. When string output requested, each chunk\n *   will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nDeflate.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Deflate#onEnd(status) -> Void\n * - status (Number): deflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called once after you tell deflate that the input stream is\n * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)\n * or if an error happened. By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nDeflate.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK) {\n    if (this.options.to === 'string') {\n      this.result = this.chunks.join('');\n    } else {\n      this.result = utils.flattenChunks(this.chunks);\n    }\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * deflate(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * Compress `data` with deflate algorithm and `options`.\n *\n * Supported options are:\n *\n * - level\n * - windowBits\n * - memLevel\n * - strategy\n * - dictionary\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be \"binary string\"\n *    (each char code [0..255])\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , data = Uint8Array([1,2,3,4,5,6,7,8,9]);\n *\n * console.log(pako.deflate(data));\n * ```\n **/\nfunction deflate(input, options) {\n  var deflator = new Deflate(options);\n\n  deflator.push(input, true);\n\n  // That will never happens, if you don't cheat with options :)\n  if (deflator.err) { throw deflator.msg || msg[deflator.err]; }\n\n  return deflator.result;\n}\n\n\n/**\n * deflateRaw(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction deflateRaw(input, options) {\n  options = options || {};\n  options.raw = true;\n  return deflate(input, options);\n}\n\n\n/**\n * gzip(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but create gzip wrapper instead of\n * deflate one.\n **/\nfunction gzip(input, options) {\n  options = options || {};\n  options.gzip = true;\n  return deflate(input, options);\n}\n\n\nexports.Deflate = Deflate;\nexports.deflate = deflate;\nexports.deflateRaw = deflateRaw;\nexports.gzip = gzip;\n","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar utils   = require('../utils/common');\nvar trees   = require('./trees');\nvar adler32 = require('./adler32');\nvar crc32   = require('./crc32');\nvar msg     = require('./messages');\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n/* Allowed flush values; see deflate() and inflate() below for details */\nvar Z_NO_FLUSH      = 0;\nvar Z_PARTIAL_FLUSH = 1;\n//var Z_SYNC_FLUSH    = 2;\nvar Z_FULL_FLUSH    = 3;\nvar Z_FINISH        = 4;\nvar Z_BLOCK         = 5;\n//var Z_TREES         = 6;\n\n\n/* Return codes for the compression/decompression functions. Negative values\n * are errors, positive values are used for special but normal events.\n */\nvar Z_OK            = 0;\nvar Z_STREAM_END    = 1;\n//var Z_NEED_DICT     = 2;\n//var Z_ERRNO         = -1;\nvar Z_STREAM_ERROR  = -2;\nvar Z_DATA_ERROR    = -3;\n//var Z_MEM_ERROR     = -4;\nvar Z_BUF_ERROR     = -5;\n//var Z_VERSION_ERROR = -6;\n\n\n/* compression levels */\n//var Z_NO_COMPRESSION      = 0;\n//var Z_BEST_SPEED          = 1;\n//var Z_BEST_COMPRESSION    = 9;\nvar Z_DEFAULT_COMPRESSION = -1;\n\n\nvar Z_FILTERED            = 1;\nvar Z_HUFFMAN_ONLY        = 2;\nvar Z_RLE                 = 3;\nvar Z_FIXED               = 4;\nvar Z_DEFAULT_STRATEGY    = 0;\n\n/* Possible values of the data_type field (though see inflate()) */\n//var Z_BINARY              = 0;\n//var Z_TEXT                = 1;\n//var Z_ASCII               = 1; // = Z_TEXT\nvar Z_UNKNOWN             = 2;\n\n\n/* The deflate compression method */\nvar Z_DEFLATED  = 8;\n\n/*============================================================================*/\n\n\nvar MAX_MEM_LEVEL = 9;\n/* Maximum value for memLevel in deflateInit2 */\nvar MAX_WBITS = 15;\n/* 32K LZ77 window */\nvar DEF_MEM_LEVEL = 8;\n\n\nvar LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\nvar LITERALS      = 256;\n/* number of literal bytes 0..255 */\nvar L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\nvar D_CODES       = 30;\n/* number of distance codes */\nvar BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\nvar HEAP_SIZE     = 2 * L_CODES + 1;\n/* maximum heap size */\nvar MAX_BITS  = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nvar MIN_MATCH = 3;\nvar MAX_MATCH = 258;\nvar MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);\n\nvar PRESET_DICT = 0x20;\n\nvar INIT_STATE = 42;\nvar EXTRA_STATE = 69;\nvar NAME_STATE = 73;\nvar COMMENT_STATE = 91;\nvar HCRC_STATE = 103;\nvar BUSY_STATE = 113;\nvar FINISH_STATE = 666;\n\nvar BS_NEED_MORE      = 1; /* block not completed, need more input or more output */\nvar BS_BLOCK_DONE     = 2; /* block flush performed */\nvar BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */\nvar BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */\n\nvar OS_CODE = 0x03; // Unix :) . Don't detect, use this default.\n\nfunction err(strm, errorCode) {\n  strm.msg = msg[errorCode];\n  return errorCode;\n}\n\nfunction rank(f) {\n  return ((f) << 1) - ((f) > 4 ? 9 : 0);\n}\n\nfunction zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n\n/* =========================================================================\n * Flush as much pending output as possible. All deflate() output goes\n * through this function so some applications may wish to modify it\n * to avoid allocating a large strm->output buffer and copying into it.\n * (See also read_buf()).\n */\nfunction flush_pending(strm) {\n  var s = strm.state;\n\n  //_tr_flush_bits(s);\n  var len = s.pending;\n  if (len > strm.avail_out) {\n    len = strm.avail_out;\n  }\n  if (len === 0) { return; }\n\n  utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);\n  strm.next_out += len;\n  s.pending_out += len;\n  strm.total_out += len;\n  strm.avail_out -= len;\n  s.pending -= len;\n  if (s.pending === 0) {\n    s.pending_out = 0;\n  }\n}\n\n\nfunction flush_block_only(s, last) {\n  trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);\n  s.block_start = s.strstart;\n  flush_pending(s.strm);\n}\n\n\nfunction put_byte(s, b) {\n  s.pending_buf[s.pending++] = b;\n}\n\n\n/* =========================================================================\n * Put a short in the pending buffer. The 16-bit value is put in MSB order.\n * IN assertion: the stream state is correct and there is enough room in\n * pending_buf.\n */\nfunction putShortMSB(s, b) {\n//  put_byte(s, (Byte)(b >> 8));\n//  put_byte(s, (Byte)(b & 0xff));\n  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;\n  s.pending_buf[s.pending++] = b & 0xff;\n}\n\n\n/* ===========================================================================\n * Read a new buffer from the current input stream, update the adler32\n * and total number of bytes read.  All deflate() input goes through\n * this function so some applications may wish to modify it to avoid\n * allocating a large strm->input buffer and copying from it.\n * (See also flush_pending()).\n */\nfunction read_buf(strm, buf, start, size) {\n  var len = strm.avail_in;\n\n  if (len > size) { len = size; }\n  if (len === 0) { return 0; }\n\n  strm.avail_in -= len;\n\n  // zmemcpy(buf, strm->next_in, len);\n  utils.arraySet(buf, strm.input, strm.next_in, len, start);\n  if (strm.state.wrap === 1) {\n    strm.adler = adler32(strm.adler, buf, len, start);\n  }\n\n  else if (strm.state.wrap === 2) {\n    strm.adler = crc32(strm.adler, buf, len, start);\n  }\n\n  strm.next_in += len;\n  strm.total_in += len;\n\n  return len;\n}\n\n\n/* ===========================================================================\n * Set match_start to the longest match starting at the given string and\n * return its length. Matches shorter or equal to prev_length are discarded,\n * in which case the result is equal to prev_length and match_start is\n * garbage.\n * IN assertions: cur_match is the head of the hash chain for the current\n *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1\n * OUT assertion: the match length is not greater than s->lookahead.\n */\nfunction longest_match(s, cur_match) {\n  var chain_length = s.max_chain_length;      /* max hash chain length */\n  var scan = s.strstart; /* current string */\n  var match;                       /* matched string */\n  var len;                           /* length of current match */\n  var best_len = s.prev_length;              /* best match length so far */\n  var nice_match = s.nice_match;             /* stop if match long enough */\n  var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?\n      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;\n\n  var _win = s.window; // shortcut\n\n  var wmask = s.w_mask;\n  var prev  = s.prev;\n\n  /* Stop when cur_match becomes <= limit. To simplify the code,\n   * we prevent matches with the string of window index 0.\n   */\n\n  var strend = s.strstart + MAX_MATCH;\n  var scan_end1  = _win[scan + best_len - 1];\n  var scan_end   = _win[scan + best_len];\n\n  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.\n   * It is easy to get rid of this optimization if necessary.\n   */\n  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, \"Code too clever\");\n\n  /* Do not waste too much time if we already have a good match: */\n  if (s.prev_length >= s.good_match) {\n    chain_length >>= 2;\n  }\n  /* Do not look for matches beyond the end of the input. This is necessary\n   * to make deflate deterministic.\n   */\n  if (nice_match > s.lookahead) { nice_match = s.lookahead; }\n\n  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, \"need lookahead\");\n\n  do {\n    // Assert(cur_match < s->strstart, \"no future\");\n    match = cur_match;\n\n    /* Skip to next match if the match length cannot increase\n     * or if the match length is less than 2.  Note that the checks below\n     * for insufficient lookahead only occur occasionally for performance\n     * reasons.  Therefore uninitialized memory will be accessed, and\n     * conditional jumps will be made that depend on those values.\n     * However the length of the match is limited to the lookahead, so\n     * the output of deflate is not affected by the uninitialized values.\n     */\n\n    if (_win[match + best_len]     !== scan_end  ||\n        _win[match + best_len - 1] !== scan_end1 ||\n        _win[match]                !== _win[scan] ||\n        _win[++match]              !== _win[scan + 1]) {\n      continue;\n    }\n\n    /* The check at best_len-1 can be removed because it will be made\n     * again later. (This heuristic is not always a win.)\n     * It is not necessary to compare scan[2] and match[2] since they\n     * are always equal when the other bytes match, given that\n     * the hash keys are equal and that HASH_BITS >= 8.\n     */\n    scan += 2;\n    match++;\n    // Assert(*scan == *match, \"match[2]?\");\n\n    /* We check for insufficient lookahead only every 8th comparison;\n     * the 256th check will be made at strstart+258.\n     */\n    do {\n      /*jshint noempty:false*/\n    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             scan < strend);\n\n    // Assert(scan <= s->window+(unsigned)(s->window_size-1), \"wild scan\");\n\n    len = MAX_MATCH - (strend - scan);\n    scan = strend - MAX_MATCH;\n\n    if (len > best_len) {\n      s.match_start = cur_match;\n      best_len = len;\n      if (len >= nice_match) {\n        break;\n      }\n      scan_end1  = _win[scan + best_len - 1];\n      scan_end   = _win[scan + best_len];\n    }\n  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);\n\n  if (best_len <= s.lookahead) {\n    return best_len;\n  }\n  return s.lookahead;\n}\n\n\n/* ===========================================================================\n * Fill the window when the lookahead becomes insufficient.\n * Updates strstart and lookahead.\n *\n * IN assertion: lookahead < MIN_LOOKAHEAD\n * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD\n *    At least one byte has been read, or avail_in == 0; reads are\n *    performed for at least two bytes (required for the zip translate_eol\n *    option -- not supported here).\n */\nfunction fill_window(s) {\n  var _w_size = s.w_size;\n  var p, n, m, more, str;\n\n  //Assert(s->lookahead < MIN_LOOKAHEAD, \"already enough lookahead\");\n\n  do {\n    more = s.window_size - s.lookahead - s.strstart;\n\n    // JS ints have 32 bit, block below not needed\n    /* Deal with !@#$% 64K limit: */\n    //if (sizeof(int) <= 2) {\n    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {\n    //        more = wsize;\n    //\n    //  } else if (more == (unsigned)(-1)) {\n    //        /* Very unlikely, but possible on 16 bit machine if\n    //         * strstart == 0 && lookahead == 1 (input done a byte at time)\n    //         */\n    //        more--;\n    //    }\n    //}\n\n\n    /* If the window is almost full and there is insufficient lookahead,\n     * move the upper half to the lower one to make room in the upper half.\n     */\n    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {\n\n      utils.arraySet(s.window, s.window, _w_size, _w_size, 0);\n      s.match_start -= _w_size;\n      s.strstart -= _w_size;\n      /* we now have strstart >= MAX_DIST */\n      s.block_start -= _w_size;\n\n      /* Slide the hash table (could be avoided with 32 bit values\n       at the expense of memory usage). We slide even when level == 0\n       to keep the hash table consistent if we switch back to level > 0\n       later. (Using level 0 permanently is not an optimal usage of\n       zlib, so we don't care about this pathological case.)\n       */\n\n      n = s.hash_size;\n      p = n;\n      do {\n        m = s.head[--p];\n        s.head[p] = (m >= _w_size ? m - _w_size : 0);\n      } while (--n);\n\n      n = _w_size;\n      p = n;\n      do {\n        m = s.prev[--p];\n        s.prev[p] = (m >= _w_size ? m - _w_size : 0);\n        /* If n is not on any hash chain, prev[n] is garbage but\n         * its value will never be used.\n         */\n      } while (--n);\n\n      more += _w_size;\n    }\n    if (s.strm.avail_in === 0) {\n      break;\n    }\n\n    /* If there was no sliding:\n     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&\n     *    more == window_size - lookahead - strstart\n     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)\n     * => more >= window_size - 2*WSIZE + 2\n     * In the BIG_MEM or MMAP case (not yet supported),\n     *   window_size == input_size + MIN_LOOKAHEAD  &&\n     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.\n     * Otherwise, window_size == 2*WSIZE so more >= 2.\n     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.\n     */\n    //Assert(more >= 2, \"more < 2\");\n    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);\n    s.lookahead += n;\n\n    /* Initialize the hash value now that we have some input: */\n    if (s.lookahead + s.insert >= MIN_MATCH) {\n      str = s.strstart - s.insert;\n      s.ins_h = s.window[str];\n\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;\n//#if MIN_MATCH != 3\n//        Call update_hash() MIN_MATCH-3 more times\n//#endif\n      while (s.insert) {\n        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;\n\n        s.prev[str & s.w_mask] = s.head[s.ins_h];\n        s.head[s.ins_h] = str;\n        str++;\n        s.insert--;\n        if (s.lookahead + s.insert < MIN_MATCH) {\n          break;\n        }\n      }\n    }\n    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,\n     * but this is not important since only literal bytes will be emitted.\n     */\n\n  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);\n\n  /* If the WIN_INIT bytes after the end of the current data have never been\n   * written, then zero those bytes in order to avoid memory check reports of\n   * the use of uninitialized (or uninitialised as Julian writes) bytes by\n   * the longest match routines.  Update the high water mark for the next\n   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match\n   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.\n   */\n//  if (s.high_water < s.window_size) {\n//    var curr = s.strstart + s.lookahead;\n//    var init = 0;\n//\n//    if (s.high_water < curr) {\n//      /* Previous high water mark below current data -- zero WIN_INIT\n//       * bytes or up to end of window, whichever is less.\n//       */\n//      init = s.window_size - curr;\n//      if (init > WIN_INIT)\n//        init = WIN_INIT;\n//      zmemzero(s->window + curr, (unsigned)init);\n//      s->high_water = curr + init;\n//    }\n//    else if (s->high_water < (ulg)curr + WIN_INIT) {\n//      /* High water mark at or above current data, but below current data\n//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up\n//       * to end of window, whichever is less.\n//       */\n//      init = (ulg)curr + WIN_INIT - s->high_water;\n//      if (init > s->window_size - s->high_water)\n//        init = s->window_size - s->high_water;\n//      zmemzero(s->window + s->high_water, (unsigned)init);\n//      s->high_water += init;\n//    }\n//  }\n//\n//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,\n//    \"not enough room for search\");\n}\n\n/* ===========================================================================\n * Copy without compression as much as possible from the input stream, return\n * the current block state.\n * This function does not insert new strings in the dictionary since\n * uncompressible data is probably not useful. This function is used\n * only for the level=0 compression option.\n * NOTE: this function should be optimized to avoid extra copying from\n * window to pending_buf.\n */\nfunction deflate_stored(s, flush) {\n  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited\n   * to pending_buf_size, and each stored block has a 5 byte header:\n   */\n  var max_block_size = 0xffff;\n\n  if (max_block_size > s.pending_buf_size - 5) {\n    max_block_size = s.pending_buf_size - 5;\n  }\n\n  /* Copy as much as possible from input to output: */\n  for (;;) {\n    /* Fill the window as much as possible: */\n    if (s.lookahead <= 1) {\n\n      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||\n      //  s->block_start >= (long)s->w_size, \"slide too late\");\n//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||\n//        s.block_start >= s.w_size)) {\n//        throw  new Error(\"slide too late\");\n//      }\n\n      fill_window(s);\n      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n\n      if (s.lookahead === 0) {\n        break;\n      }\n      /* flush the current block */\n    }\n    //Assert(s->block_start >= 0L, \"block gone\");\n//    if (s.block_start < 0) throw new Error(\"block gone\");\n\n    s.strstart += s.lookahead;\n    s.lookahead = 0;\n\n    /* Emit a stored block if pending_buf will be full: */\n    var max_start = s.block_start + max_block_size;\n\n    if (s.strstart === 0 || s.strstart >= max_start) {\n      /* strstart == 0 is possible when wraparound on 16-bit machine */\n      s.lookahead = s.strstart - max_start;\n      s.strstart = max_start;\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n\n\n    }\n    /* Flush if we may have to slide, otherwise block_start may become\n     * negative and the data will be gone:\n     */\n    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n\n  s.insert = 0;\n\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n\n  if (s.strstart > s.block_start) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_NEED_MORE;\n}\n\n/* ===========================================================================\n * Compress as much as possible from the input stream, return the current\n * block state.\n * This function does not perform lazy evaluation of matches and inserts\n * new strings in the dictionary only for unmatched strings or for short\n * matches. It is used only for the fast compression options.\n */\nfunction deflate_fast(s, flush) {\n  var hash_head;        /* head of the hash chain */\n  var bflush;           /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) {\n        break; /* flush the current block */\n      }\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     * At this point we have always match_length < MIN_MATCH\n     */\n    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n    }\n    if (s.match_length >= MIN_MATCH) {\n      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only\n\n      /*** _tr_tally_dist(s, s.strstart - s.match_start,\n                     s.match_length - MIN_MATCH, bflush); ***/\n      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n\n      /* Insert new strings in the hash table only if the match length\n       * is not too large. This saves time but degrades compression.\n       */\n      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {\n        s.match_length--; /* string at strstart already in table */\n        do {\n          s.strstart++;\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n          /* strstart never exceeds WSIZE-MAX_MATCH, so there are\n           * always MIN_MATCH bytes ahead.\n           */\n        } while (--s.match_length !== 0);\n        s.strstart++;\n      } else\n      {\n        s.strstart += s.match_length;\n        s.match_length = 0;\n        s.ins_h = s.window[s.strstart];\n        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */\n        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;\n\n//#if MIN_MATCH != 3\n//                Call UPDATE_HASH() MIN_MATCH-3 more times\n//#endif\n        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not\n         * matter since it will be recomputed at next deflate call.\n         */\n      }\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s.window[s.strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* ===========================================================================\n * Same as above, but achieves better compression. We use a lazy\n * evaluation for matches: a match is finally adopted only if there is\n * no better match at the next window position.\n */\nfunction deflate_slow(s, flush) {\n  var hash_head;          /* head of hash chain */\n  var bflush;              /* set if current block must be flushed */\n\n  var max_insert;\n\n  /* Process the input block. */\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     */\n    s.prev_length = s.match_length;\n    s.prev_match = s.match_start;\n    s.match_length = MIN_MATCH - 1;\n\n    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&\n        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n\n      if (s.match_length <= 5 &&\n         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {\n\n        /* If prev_match is also MIN_MATCH, match_start is garbage\n         * but we will ignore the current match anyway.\n         */\n        s.match_length = MIN_MATCH - 1;\n      }\n    }\n    /* If there was a match at the previous step and the current\n     * match is not better, output the previous match:\n     */\n    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {\n      max_insert = s.strstart + s.lookahead - MIN_MATCH;\n      /* Do not insert strings in hash table beyond this. */\n\n      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);\n\n      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,\n                     s.prev_length - MIN_MATCH, bflush);***/\n      bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);\n      /* Insert in hash table all strings up to the end of the match.\n       * strstart-1 and strstart are already inserted. If there is not\n       * enough lookahead, the last two strings are not inserted in\n       * the hash table.\n       */\n      s.lookahead -= s.prev_length - 1;\n      s.prev_length -= 2;\n      do {\n        if (++s.strstart <= max_insert) {\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n        }\n      } while (--s.prev_length !== 0);\n      s.match_available = 0;\n      s.match_length = MIN_MATCH - 1;\n      s.strstart++;\n\n      if (bflush) {\n        /*** FLUSH_BLOCK(s, 0); ***/\n        flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n          return BS_NEED_MORE;\n        }\n        /***/\n      }\n\n    } else if (s.match_available) {\n      /* If there was no match at the previous position, output a\n       * single literal. If there was a match but the current match\n       * is longer, truncate the previous match to a single literal.\n       */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);\n\n      if (bflush) {\n        /*** FLUSH_BLOCK_ONLY(s, 0) ***/\n        flush_block_only(s, false);\n        /***/\n      }\n      s.strstart++;\n      s.lookahead--;\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n    } else {\n      /* There is no previous match to compare with, wait for\n       * the next step to decide.\n       */\n      s.match_available = 1;\n      s.strstart++;\n      s.lookahead--;\n    }\n  }\n  //Assert (flush != Z_NO_FLUSH, \"no flush?\");\n  if (s.match_available) {\n    //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n    bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);\n\n    s.match_available = 0;\n  }\n  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_BLOCK_DONE;\n}\n\n\n/* ===========================================================================\n * For Z_RLE, simply look for runs of bytes, generate matches only of distance\n * one.  Do not maintain a hash table.  (It will be regenerated if this run of\n * deflate switches away from Z_RLE.)\n */\nfunction deflate_rle(s, flush) {\n  var bflush;            /* set if current block must be flushed */\n  var prev;              /* byte at distance one to match */\n  var scan, strend;      /* scan goes up to strend for length of run */\n\n  var _win = s.window;\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the longest run, plus one for the unrolled loop.\n     */\n    if (s.lookahead <= MAX_MATCH) {\n      fill_window(s);\n      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* See how many times the previous byte repeats */\n    s.match_length = 0;\n    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {\n      scan = s.strstart - 1;\n      prev = _win[scan];\n      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {\n        strend = s.strstart + MAX_MATCH;\n        do {\n          /*jshint noempty:false*/\n        } while (prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 scan < strend);\n        s.match_length = MAX_MATCH - (strend - scan);\n        if (s.match_length > s.lookahead) {\n          s.match_length = s.lookahead;\n        }\n      }\n      //Assert(scan <= s->window+(uInt)(s->window_size-1), \"wild scan\");\n    }\n\n    /* Emit match if have run of MIN_MATCH or longer, else emit literal */\n    if (s.match_length >= MIN_MATCH) {\n      //check_match(s, s.strstart, s.strstart - 1, s.match_length);\n\n      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/\n      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n      s.strstart += s.match_length;\n      s.match_length = 0;\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* ===========================================================================\n * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.\n * (It will be regenerated if this run of deflate switches away from Huffman.)\n */\nfunction deflate_huff(s, flush) {\n  var bflush;             /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we have a literal to write. */\n    if (s.lookahead === 0) {\n      fill_window(s);\n      if (s.lookahead === 0) {\n        if (flush === Z_NO_FLUSH) {\n          return BS_NEED_MORE;\n        }\n        break;      /* flush the current block */\n      }\n    }\n\n    /* Output a literal byte */\n    s.match_length = 0;\n    //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n    s.lookahead--;\n    s.strstart++;\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* Values for max_lazy_match, good_match and max_chain_length, depending on\n * the desired pack level (0..9). The values given below have been tuned to\n * exclude worst case performance for pathological files. Better values may be\n * found for specific files.\n */\nfunction Config(good_length, max_lazy, nice_length, max_chain, func) {\n  this.good_length = good_length;\n  this.max_lazy = max_lazy;\n  this.nice_length = nice_length;\n  this.max_chain = max_chain;\n  this.func = func;\n}\n\nvar configuration_table;\n\nconfiguration_table = [\n  /*      good lazy nice chain */\n  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */\n  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */\n  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */\n  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */\n\n  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */\n  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */\n  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */\n  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */\n  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */\n  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */\n];\n\n\n/* ===========================================================================\n * Initialize the \"longest match\" routines for a new zlib stream\n */\nfunction lm_init(s) {\n  s.window_size = 2 * s.w_size;\n\n  /*** CLEAR_HASH(s); ***/\n  zero(s.head); // Fill with NIL (= 0);\n\n  /* Set the default configuration parameters:\n   */\n  s.max_lazy_match = configuration_table[s.level].max_lazy;\n  s.good_match = configuration_table[s.level].good_length;\n  s.nice_match = configuration_table[s.level].nice_length;\n  s.max_chain_length = configuration_table[s.level].max_chain;\n\n  s.strstart = 0;\n  s.block_start = 0;\n  s.lookahead = 0;\n  s.insert = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  s.ins_h = 0;\n}\n\n\nfunction DeflateState() {\n  this.strm = null;            /* pointer back to this zlib stream */\n  this.status = 0;            /* as the name implies */\n  this.pending_buf = null;      /* output still pending */\n  this.pending_buf_size = 0;  /* size of pending_buf */\n  this.pending_out = 0;       /* next pending byte to output to the stream */\n  this.pending = 0;           /* nb of bytes in the pending buffer */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.gzhead = null;         /* gzip header information to write */\n  this.gzindex = 0;           /* where in extra, name, or comment */\n  this.method = Z_DEFLATED; /* can only be DEFLATED */\n  this.last_flush = -1;   /* value of flush param for previous deflate call */\n\n  this.w_size = 0;  /* LZ77 window size (32K by default) */\n  this.w_bits = 0;  /* log2(w_size)  (8..16) */\n  this.w_mask = 0;  /* w_size - 1 */\n\n  this.window = null;\n  /* Sliding window. Input bytes are read into the second half of the window,\n   * and move to the first half later to keep a dictionary of at least wSize\n   * bytes. With this organization, matches are limited to a distance of\n   * wSize-MAX_MATCH bytes, but this ensures that IO is always\n   * performed with a length multiple of the block size.\n   */\n\n  this.window_size = 0;\n  /* Actual size of window: 2*wSize, except when the user input buffer\n   * is directly used as sliding window.\n   */\n\n  this.prev = null;\n  /* Link to older string with same hash index. To limit the size of this\n   * array to 64K, this link is maintained only for the last 32K strings.\n   * An index in this array is thus a window index modulo 32K.\n   */\n\n  this.head = null;   /* Heads of the hash chains or NIL. */\n\n  this.ins_h = 0;       /* hash index of string to be inserted */\n  this.hash_size = 0;   /* number of elements in hash table */\n  this.hash_bits = 0;   /* log2(hash_size) */\n  this.hash_mask = 0;   /* hash_size-1 */\n\n  this.hash_shift = 0;\n  /* Number of bits by which ins_h must be shifted at each input\n   * step. It must be such that after MIN_MATCH steps, the oldest\n   * byte no longer takes part in the hash key, that is:\n   *   hash_shift * MIN_MATCH >= hash_bits\n   */\n\n  this.block_start = 0;\n  /* Window position at the beginning of the current output block. Gets\n   * negative when the window is moved backwards.\n   */\n\n  this.match_length = 0;      /* length of best match */\n  this.prev_match = 0;        /* previous match */\n  this.match_available = 0;   /* set if previous match exists */\n  this.strstart = 0;          /* start of string to insert */\n  this.match_start = 0;       /* start of matching string */\n  this.lookahead = 0;         /* number of valid bytes ahead in window */\n\n  this.prev_length = 0;\n  /* Length of the best match at previous step. Matches not greater than this\n   * are discarded. This is used in the lazy match evaluation.\n   */\n\n  this.max_chain_length = 0;\n  /* To speed up deflation, hash chains are never searched beyond this\n   * length.  A higher limit improves compression ratio but degrades the\n   * speed.\n   */\n\n  this.max_lazy_match = 0;\n  /* Attempt to find a better match only when the current match is strictly\n   * smaller than this value. This mechanism is used only for compression\n   * levels >= 4.\n   */\n  // That's alias to max_lazy_match, don't use directly\n  //this.max_insert_length = 0;\n  /* Insert new strings in the hash table only if the match length is not\n   * greater than this length. This saves time but degrades compression.\n   * max_insert_length is used only for compression levels <= 3.\n   */\n\n  this.level = 0;     /* compression level (1..9) */\n  this.strategy = 0;  /* favor or force Huffman coding*/\n\n  this.good_match = 0;\n  /* Use a faster search when the previous match is longer than this */\n\n  this.nice_match = 0; /* Stop searching when current match exceeds this */\n\n              /* used by trees.c: */\n\n  /* Didn't use ct_data typedef below to suppress compiler warning */\n\n  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */\n  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */\n  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */\n\n  // Use flat array of DOUBLE size, with interleaved fata,\n  // because JS does not support effective\n  this.dyn_ltree  = new utils.Buf16(HEAP_SIZE * 2);\n  this.dyn_dtree  = new utils.Buf16((2 * D_CODES + 1) * 2);\n  this.bl_tree    = new utils.Buf16((2 * BL_CODES + 1) * 2);\n  zero(this.dyn_ltree);\n  zero(this.dyn_dtree);\n  zero(this.bl_tree);\n\n  this.l_desc   = null;         /* desc. for literal tree */\n  this.d_desc   = null;         /* desc. for distance tree */\n  this.bl_desc  = null;         /* desc. for bit length tree */\n\n  //ush bl_count[MAX_BITS+1];\n  this.bl_count = new utils.Buf16(MAX_BITS + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */\n  this.heap = new utils.Buf16(2 * L_CODES + 1);  /* heap used to build the Huffman trees */\n  zero(this.heap);\n\n  this.heap_len = 0;               /* number of elements in the heap */\n  this.heap_max = 0;               /* element of largest frequency */\n  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.\n   * The same heap array is used to build all trees.\n   */\n\n  this.depth = new utils.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];\n  zero(this.depth);\n  /* Depth of each subtree used as tie breaker for trees of equal frequency\n   */\n\n  this.l_buf = 0;          /* buffer index for literals or lengths */\n\n  this.lit_bufsize = 0;\n  /* Size of match buffer for literals/lengths.  There are 4 reasons for\n   * limiting lit_bufsize to 64K:\n   *   - frequencies can be kept in 16 bit counters\n   *   - if compression is not successful for the first block, all input\n   *     data is still in the window so we can still emit a stored block even\n   *     when input comes from standard input.  (This can also be done for\n   *     all blocks if lit_bufsize is not greater than 32K.)\n   *   - if compression is not successful for a file smaller than 64K, we can\n   *     even emit a stored file instead of a stored block (saving 5 bytes).\n   *     This is applicable only for zip (not gzip or zlib).\n   *   - creating new Huffman trees less frequently may not provide fast\n   *     adaptation to changes in the input data statistics. (Take for\n   *     example a binary file with poorly compressible code followed by\n   *     a highly compressible string table.) Smaller buffer sizes give\n   *     fast adaptation but have of course the overhead of transmitting\n   *     trees more frequently.\n   *   - I can't count above 4\n   */\n\n  this.last_lit = 0;      /* running index in l_buf */\n\n  this.d_buf = 0;\n  /* Buffer index for distances. To simplify the code, d_buf and l_buf have\n   * the same number of elements. To use different lengths, an extra flag\n   * array would be necessary.\n   */\n\n  this.opt_len = 0;       /* bit length of current block with optimal trees */\n  this.static_len = 0;    /* bit length of current block with static trees */\n  this.matches = 0;       /* number of string matches in current block */\n  this.insert = 0;        /* bytes at end of window left to insert */\n\n\n  this.bi_buf = 0;\n  /* Output buffer. bits are inserted starting at the bottom (least\n   * significant bits).\n   */\n  this.bi_valid = 0;\n  /* Number of valid bits in bi_buf.  All bits above the last valid bit\n   * are always zero.\n   */\n\n  // Used for window memory init. We safely ignore it for JS. That makes\n  // sense only for pointers and memory check tools.\n  //this.high_water = 0;\n  /* High water mark offset in window for initialized bytes -- bytes above\n   * this are set to zero in order to avoid memory check warnings when\n   * longest match routines access bytes past the input.  This is then\n   * updated to the new high water mark.\n   */\n}\n\n\nfunction deflateResetKeep(strm) {\n  var s;\n\n  if (!strm || !strm.state) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n  strm.total_in = strm.total_out = 0;\n  strm.data_type = Z_UNKNOWN;\n\n  s = strm.state;\n  s.pending = 0;\n  s.pending_out = 0;\n\n  if (s.wrap < 0) {\n    s.wrap = -s.wrap;\n    /* was made negative by deflate(..., Z_FINISH); */\n  }\n  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);\n  strm.adler = (s.wrap === 2) ?\n    0  // crc32(0, Z_NULL, 0)\n  :\n    1; // adler32(0, Z_NULL, 0)\n  s.last_flush = Z_NO_FLUSH;\n  trees._tr_init(s);\n  return Z_OK;\n}\n\n\nfunction deflateReset(strm) {\n  var ret = deflateResetKeep(strm);\n  if (ret === Z_OK) {\n    lm_init(strm.state);\n  }\n  return ret;\n}\n\n\nfunction deflateSetHeader(strm, head) {\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }\n  strm.state.gzhead = head;\n  return Z_OK;\n}\n\n\nfunction deflateInit2(strm, level, method, windowBits, memLevel, strategy) {\n  if (!strm) { // === Z_NULL\n    return Z_STREAM_ERROR;\n  }\n  var wrap = 1;\n\n  if (level === Z_DEFAULT_COMPRESSION) {\n    level = 6;\n  }\n\n  if (windowBits < 0) { /* suppress zlib wrapper */\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n\n  else if (windowBits > 15) {\n    wrap = 2;           /* write gzip wrapper instead */\n    windowBits -= 16;\n  }\n\n\n  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||\n    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||\n    strategy < 0 || strategy > Z_FIXED) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n\n  if (windowBits === 8) {\n    windowBits = 9;\n  }\n  /* until 256-byte window bug fixed */\n\n  var s = new DeflateState();\n\n  strm.state = s;\n  s.strm = strm;\n\n  s.wrap = wrap;\n  s.gzhead = null;\n  s.w_bits = windowBits;\n  s.w_size = 1 << s.w_bits;\n  s.w_mask = s.w_size - 1;\n\n  s.hash_bits = memLevel + 7;\n  s.hash_size = 1 << s.hash_bits;\n  s.hash_mask = s.hash_size - 1;\n  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);\n\n  s.window = new utils.Buf8(s.w_size * 2);\n  s.head = new utils.Buf16(s.hash_size);\n  s.prev = new utils.Buf16(s.w_size);\n\n  // Don't need mem init magic for JS.\n  //s.high_water = 0;  /* nothing written to s->window yet */\n\n  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */\n\n  s.pending_buf_size = s.lit_bufsize * 4;\n\n  //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);\n  //s->pending_buf = (uchf *) overlay;\n  s.pending_buf = new utils.Buf8(s.pending_buf_size);\n\n  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)\n  //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);\n  s.d_buf = 1 * s.lit_bufsize;\n\n  //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;\n  s.l_buf = (1 + 2) * s.lit_bufsize;\n\n  s.level = level;\n  s.strategy = strategy;\n  s.method = method;\n\n  return deflateReset(strm);\n}\n\nfunction deflateInit(strm, level) {\n  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);\n}\n\n\nfunction deflate(strm, flush) {\n  var old_flush, s;\n  var beg, val; // for gzip header write only\n\n  if (!strm || !strm.state ||\n    flush > Z_BLOCK || flush < 0) {\n    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;\n  }\n\n  s = strm.state;\n\n  if (!strm.output ||\n      (!strm.input && strm.avail_in !== 0) ||\n      (s.status === FINISH_STATE && flush !== Z_FINISH)) {\n    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);\n  }\n\n  s.strm = strm; /* just in case */\n  old_flush = s.last_flush;\n  s.last_flush = flush;\n\n  /* Write the header */\n  if (s.status === INIT_STATE) {\n\n    if (s.wrap === 2) { // GZIP header\n      strm.adler = 0;  //crc32(0L, Z_NULL, 0);\n      put_byte(s, 31);\n      put_byte(s, 139);\n      put_byte(s, 8);\n      if (!s.gzhead) { // s->gzhead == Z_NULL\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, s.level === 9 ? 2 :\n                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                     4 : 0));\n        put_byte(s, OS_CODE);\n        s.status = BUSY_STATE;\n      }\n      else {\n        put_byte(s, (s.gzhead.text ? 1 : 0) +\n                    (s.gzhead.hcrc ? 2 : 0) +\n                    (!s.gzhead.extra ? 0 : 4) +\n                    (!s.gzhead.name ? 0 : 8) +\n                    (!s.gzhead.comment ? 0 : 16)\n        );\n        put_byte(s, s.gzhead.time & 0xff);\n        put_byte(s, (s.gzhead.time >> 8) & 0xff);\n        put_byte(s, (s.gzhead.time >> 16) & 0xff);\n        put_byte(s, (s.gzhead.time >> 24) & 0xff);\n        put_byte(s, s.level === 9 ? 2 :\n                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                     4 : 0));\n        put_byte(s, s.gzhead.os & 0xff);\n        if (s.gzhead.extra && s.gzhead.extra.length) {\n          put_byte(s, s.gzhead.extra.length & 0xff);\n          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);\n        }\n        if (s.gzhead.hcrc) {\n          strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);\n        }\n        s.gzindex = 0;\n        s.status = EXTRA_STATE;\n      }\n    }\n    else // DEFLATE header\n    {\n      var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;\n      var level_flags = -1;\n\n      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {\n        level_flags = 0;\n      } else if (s.level < 6) {\n        level_flags = 1;\n      } else if (s.level === 6) {\n        level_flags = 2;\n      } else {\n        level_flags = 3;\n      }\n      header |= (level_flags << 6);\n      if (s.strstart !== 0) { header |= PRESET_DICT; }\n      header += 31 - (header % 31);\n\n      s.status = BUSY_STATE;\n      putShortMSB(s, header);\n\n      /* Save the adler32 of the preset dictionary: */\n      if (s.strstart !== 0) {\n        putShortMSB(s, strm.adler >>> 16);\n        putShortMSB(s, strm.adler & 0xffff);\n      }\n      strm.adler = 1; // adler32(0L, Z_NULL, 0);\n    }\n  }\n\n//#ifdef GZIP\n  if (s.status === EXTRA_STATE) {\n    if (s.gzhead.extra/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n\n      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            break;\n          }\n        }\n        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);\n        s.gzindex++;\n      }\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (s.gzindex === s.gzhead.extra.length) {\n        s.gzindex = 0;\n        s.status = NAME_STATE;\n      }\n    }\n    else {\n      s.status = NAME_STATE;\n    }\n  }\n  if (s.status === NAME_STATE) {\n    if (s.gzhead.name/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n      //int val;\n\n      do {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            val = 1;\n            break;\n          }\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.name.length) {\n          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (val === 0) {\n        s.gzindex = 0;\n        s.status = COMMENT_STATE;\n      }\n    }\n    else {\n      s.status = COMMENT_STATE;\n    }\n  }\n  if (s.status === COMMENT_STATE) {\n    if (s.gzhead.comment/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n      //int val;\n\n      do {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            val = 1;\n            break;\n          }\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.comment.length) {\n          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (val === 0) {\n        s.status = HCRC_STATE;\n      }\n    }\n    else {\n      s.status = HCRC_STATE;\n    }\n  }\n  if (s.status === HCRC_STATE) {\n    if (s.gzhead.hcrc) {\n      if (s.pending + 2 > s.pending_buf_size) {\n        flush_pending(strm);\n      }\n      if (s.pending + 2 <= s.pending_buf_size) {\n        put_byte(s, strm.adler & 0xff);\n        put_byte(s, (strm.adler >> 8) & 0xff);\n        strm.adler = 0; //crc32(0L, Z_NULL, 0);\n        s.status = BUSY_STATE;\n      }\n    }\n    else {\n      s.status = BUSY_STATE;\n    }\n  }\n//#endif\n\n  /* Flush as much pending output as possible */\n  if (s.pending !== 0) {\n    flush_pending(strm);\n    if (strm.avail_out === 0) {\n      /* Since avail_out is 0, deflate will be called again with\n       * more output space, but possibly with both pending and\n       * avail_in equal to zero. There won't be anything to do,\n       * but this is not an error situation so make sure we\n       * return OK instead of BUF_ERROR at next call of deflate:\n       */\n      s.last_flush = -1;\n      return Z_OK;\n    }\n\n    /* Make sure there is something to do and avoid duplicate consecutive\n     * flushes. For repeated and useless calls with Z_FINISH, we keep\n     * returning Z_STREAM_END instead of Z_BUF_ERROR.\n     */\n  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&\n    flush !== Z_FINISH) {\n    return err(strm, Z_BUF_ERROR);\n  }\n\n  /* User must not provide more input after the first FINISH: */\n  if (s.status === FINISH_STATE && strm.avail_in !== 0) {\n    return err(strm, Z_BUF_ERROR);\n  }\n\n  /* Start a new block or continue the current one.\n   */\n  if (strm.avail_in !== 0 || s.lookahead !== 0 ||\n    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {\n    var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :\n      (s.strategy === Z_RLE ? deflate_rle(s, flush) :\n        configuration_table[s.level].func(s, flush));\n\n    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {\n      s.status = FINISH_STATE;\n    }\n    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {\n      if (strm.avail_out === 0) {\n        s.last_flush = -1;\n        /* avoid BUF_ERROR next call, see above */\n      }\n      return Z_OK;\n      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call\n       * of deflate should use the same flush parameter to make sure\n       * that the flush is complete. So we don't have to output an\n       * empty block here, this will be done at next call. This also\n       * ensures that for a very small output buffer, we emit at most\n       * one empty block.\n       */\n    }\n    if (bstate === BS_BLOCK_DONE) {\n      if (flush === Z_PARTIAL_FLUSH) {\n        trees._tr_align(s);\n      }\n      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */\n\n        trees._tr_stored_block(s, 0, 0, false);\n        /* For a full flush, this empty block will be recognized\n         * as a special marker by inflate_sync().\n         */\n        if (flush === Z_FULL_FLUSH) {\n          /*** CLEAR_HASH(s); ***/             /* forget history */\n          zero(s.head); // Fill with NIL (= 0);\n\n          if (s.lookahead === 0) {\n            s.strstart = 0;\n            s.block_start = 0;\n            s.insert = 0;\n          }\n        }\n      }\n      flush_pending(strm);\n      if (strm.avail_out === 0) {\n        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */\n        return Z_OK;\n      }\n    }\n  }\n  //Assert(strm->avail_out > 0, \"bug2\");\n  //if (strm.avail_out <= 0) { throw new Error(\"bug2\");}\n\n  if (flush !== Z_FINISH) { return Z_OK; }\n  if (s.wrap <= 0) { return Z_STREAM_END; }\n\n  /* Write the trailer */\n  if (s.wrap === 2) {\n    put_byte(s, strm.adler & 0xff);\n    put_byte(s, (strm.adler >> 8) & 0xff);\n    put_byte(s, (strm.adler >> 16) & 0xff);\n    put_byte(s, (strm.adler >> 24) & 0xff);\n    put_byte(s, strm.total_in & 0xff);\n    put_byte(s, (strm.total_in >> 8) & 0xff);\n    put_byte(s, (strm.total_in >> 16) & 0xff);\n    put_byte(s, (strm.total_in >> 24) & 0xff);\n  }\n  else\n  {\n    putShortMSB(s, strm.adler >>> 16);\n    putShortMSB(s, strm.adler & 0xffff);\n  }\n\n  flush_pending(strm);\n  /* If avail_out is zero, the application will call deflate again\n   * to flush the rest.\n   */\n  if (s.wrap > 0) { s.wrap = -s.wrap; }\n  /* write the trailer only once! */\n  return s.pending !== 0 ? Z_OK : Z_STREAM_END;\n}\n\nfunction deflateEnd(strm) {\n  var status;\n\n  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  status = strm.state.status;\n  if (status !== INIT_STATE &&\n    status !== EXTRA_STATE &&\n    status !== NAME_STATE &&\n    status !== COMMENT_STATE &&\n    status !== HCRC_STATE &&\n    status !== BUSY_STATE &&\n    status !== FINISH_STATE\n  ) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n  strm.state = null;\n\n  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;\n}\n\n\n/* =========================================================================\n * Initializes the compression dictionary from the given byte\n * sequence without producing any compressed output.\n */\nfunction deflateSetDictionary(strm, dictionary) {\n  var dictLength = dictionary.length;\n\n  var s;\n  var str, n;\n  var wrap;\n  var avail;\n  var next;\n  var input;\n  var tmpDict;\n\n  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  s = strm.state;\n  wrap = s.wrap;\n\n  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {\n    return Z_STREAM_ERROR;\n  }\n\n  /* when using zlib wrappers, compute Adler-32 for provided dictionary */\n  if (wrap === 1) {\n    /* adler32(strm->adler, dictionary, dictLength); */\n    strm.adler = adler32(strm.adler, dictionary, dictLength, 0);\n  }\n\n  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */\n\n  /* if dictionary would fill window, just replace the history */\n  if (dictLength >= s.w_size) {\n    if (wrap === 0) {            /* already empty otherwise */\n      /*** CLEAR_HASH(s); ***/\n      zero(s.head); // Fill with NIL (= 0);\n      s.strstart = 0;\n      s.block_start = 0;\n      s.insert = 0;\n    }\n    /* use the tail */\n    // dictionary = dictionary.slice(dictLength - s.w_size);\n    tmpDict = new utils.Buf8(s.w_size);\n    utils.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);\n    dictionary = tmpDict;\n    dictLength = s.w_size;\n  }\n  /* insert dictionary into window and hash */\n  avail = strm.avail_in;\n  next = strm.next_in;\n  input = strm.input;\n  strm.avail_in = dictLength;\n  strm.next_in = 0;\n  strm.input = dictionary;\n  fill_window(s);\n  while (s.lookahead >= MIN_MATCH) {\n    str = s.strstart;\n    n = s.lookahead - (MIN_MATCH - 1);\n    do {\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;\n\n      s.prev[str & s.w_mask] = s.head[s.ins_h];\n\n      s.head[s.ins_h] = str;\n      str++;\n    } while (--n);\n    s.strstart = str;\n    s.lookahead = MIN_MATCH - 1;\n    fill_window(s);\n  }\n  s.strstart += s.lookahead;\n  s.block_start = s.strstart;\n  s.insert = s.lookahead;\n  s.lookahead = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  strm.next_in = next;\n  strm.input = input;\n  strm.avail_in = avail;\n  s.wrap = wrap;\n  return Z_OK;\n}\n\n\nexports.deflateInit = deflateInit;\nexports.deflateInit2 = deflateInit2;\nexports.deflateReset = deflateReset;\nexports.deflateResetKeep = deflateResetKeep;\nexports.deflateSetHeader = deflateSetHeader;\nexports.deflate = deflate;\nexports.deflateEnd = deflateEnd;\nexports.deflateSetDictionary = deflateSetDictionary;\nexports.deflateInfo = 'pako deflate (from Nodeca project)';\n\n/* Not implemented\nexports.deflateBound = deflateBound;\nexports.deflateCopy = deflateCopy;\nexports.deflateParams = deflateParams;\nexports.deflatePending = deflatePending;\nexports.deflatePrime = deflatePrime;\nexports.deflateTune = deflateTune;\n*/\n","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n/* eslint-disable space-unary-ops */\n\nvar utils = require('../utils/common');\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n//var Z_FILTERED          = 1;\n//var Z_HUFFMAN_ONLY      = 2;\n//var Z_RLE               = 3;\nvar Z_FIXED               = 4;\n//var Z_DEFAULT_STRATEGY  = 0;\n\n/* Possible values of the data_type field (though see inflate()) */\nvar Z_BINARY              = 0;\nvar Z_TEXT                = 1;\n//var Z_ASCII             = 1; // = Z_TEXT\nvar Z_UNKNOWN             = 2;\n\n/*============================================================================*/\n\n\nfunction zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n// From zutil.h\n\nvar STORED_BLOCK = 0;\nvar STATIC_TREES = 1;\nvar DYN_TREES    = 2;\n/* The three kinds of block type */\n\nvar MIN_MATCH    = 3;\nvar MAX_MATCH    = 258;\n/* The minimum and maximum match lengths */\n\n// From deflate.h\n/* ===========================================================================\n * Internal compression state.\n */\n\nvar LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\n\nvar LITERALS      = 256;\n/* number of literal bytes 0..255 */\n\nvar L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\n\nvar D_CODES       = 30;\n/* number of distance codes */\n\nvar BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\n\nvar HEAP_SIZE     = 2 * L_CODES + 1;\n/* maximum heap size */\n\nvar MAX_BITS      = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nvar Buf_size      = 16;\n/* size of bit buffer in bi_buf */\n\n\n/* ===========================================================================\n * Constants\n */\n\nvar MAX_BL_BITS = 7;\n/* Bit length codes must not exceed MAX_BL_BITS bits */\n\nvar END_BLOCK   = 256;\n/* end of block literal code */\n\nvar REP_3_6     = 16;\n/* repeat previous bit length 3-6 times (2 bits of repeat count) */\n\nvar REPZ_3_10   = 17;\n/* repeat a zero length 3-10 times  (3 bits of repeat count) */\n\nvar REPZ_11_138 = 18;\n/* repeat a zero length 11-138 times  (7 bits of repeat count) */\n\n/* eslint-disable comma-spacing,array-bracket-spacing */\nvar extra_lbits =   /* extra bits for each length code */\n  [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];\n\nvar extra_dbits =   /* extra bits for each distance code */\n  [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];\n\nvar extra_blbits =  /* extra bits for each bit length code */\n  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];\n\nvar bl_order =\n  [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];\n/* eslint-enable comma-spacing,array-bracket-spacing */\n\n/* The lengths of the bit length codes are sent in order of decreasing\n * probability, to avoid transmitting the lengths for unused bit length codes.\n */\n\n/* ===========================================================================\n * Local data. These are initialized only once.\n */\n\n// We pre-fill arrays with 0 to avoid uninitialized gaps\n\nvar DIST_CODE_LEN = 512; /* see definition of array dist_code below */\n\n// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1\nvar static_ltree  = new Array((L_CODES + 2) * 2);\nzero(static_ltree);\n/* The static literal tree. Since the bit lengths are imposed, there is no\n * need for the L_CODES extra codes used during heap construction. However\n * The codes 286 and 287 are needed to build a canonical tree (see _tr_init\n * below).\n */\n\nvar static_dtree  = new Array(D_CODES * 2);\nzero(static_dtree);\n/* The static distance tree. (Actually a trivial tree since all codes use\n * 5 bits.)\n */\n\nvar _dist_code    = new Array(DIST_CODE_LEN);\nzero(_dist_code);\n/* Distance codes. The first 256 values correspond to the distances\n * 3 .. 258, the last 256 values correspond to the top 8 bits of\n * the 15 bit distances.\n */\n\nvar _length_code  = new Array(MAX_MATCH - MIN_MATCH + 1);\nzero(_length_code);\n/* length code for each normalized match length (0 == MIN_MATCH) */\n\nvar base_length   = new Array(LENGTH_CODES);\nzero(base_length);\n/* First normalized length for each code (0 = MIN_MATCH) */\n\nvar base_dist     = new Array(D_CODES);\nzero(base_dist);\n/* First normalized distance for each code (0 = distance of 1) */\n\n\nfunction StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {\n\n  this.static_tree  = static_tree;  /* static tree or NULL */\n  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */\n  this.extra_base   = extra_base;   /* base index for extra_bits */\n  this.elems        = elems;        /* max number of elements in the tree */\n  this.max_length   = max_length;   /* max bit length for the codes */\n\n  // show if `static_tree` has data or dummy - needed for monomorphic objects\n  this.has_stree    = static_tree && static_tree.length;\n}\n\n\nvar static_l_desc;\nvar static_d_desc;\nvar static_bl_desc;\n\n\nfunction TreeDesc(dyn_tree, stat_desc) {\n  this.dyn_tree = dyn_tree;     /* the dynamic tree */\n  this.max_code = 0;            /* largest code with non zero frequency */\n  this.stat_desc = stat_desc;   /* the corresponding static tree */\n}\n\n\n\nfunction d_code(dist) {\n  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];\n}\n\n\n/* ===========================================================================\n * Output a short LSB first on the stream.\n * IN assertion: there is enough room in pendingBuf.\n */\nfunction put_short(s, w) {\n//    put_byte(s, (uch)((w) & 0xff));\n//    put_byte(s, (uch)((ush)(w) >> 8));\n  s.pending_buf[s.pending++] = (w) & 0xff;\n  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;\n}\n\n\n/* ===========================================================================\n * Send a value on a given number of bits.\n * IN assertion: length <= 16 and value fits in length bits.\n */\nfunction send_bits(s, value, length) {\n  if (s.bi_valid > (Buf_size - length)) {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    put_short(s, s.bi_buf);\n    s.bi_buf = value >> (Buf_size - s.bi_valid);\n    s.bi_valid += length - Buf_size;\n  } else {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    s.bi_valid += length;\n  }\n}\n\n\nfunction send_code(s, c, tree) {\n  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);\n}\n\n\n/* ===========================================================================\n * Reverse the first len bits of a code, using straightforward code (a faster\n * method would use a table)\n * IN assertion: 1 <= len <= 15\n */\nfunction bi_reverse(code, len) {\n  var res = 0;\n  do {\n    res |= code & 1;\n    code >>>= 1;\n    res <<= 1;\n  } while (--len > 0);\n  return res >>> 1;\n}\n\n\n/* ===========================================================================\n * Flush the bit buffer, keeping at most 7 bits in it.\n */\nfunction bi_flush(s) {\n  if (s.bi_valid === 16) {\n    put_short(s, s.bi_buf);\n    s.bi_buf = 0;\n    s.bi_valid = 0;\n\n  } else if (s.bi_valid >= 8) {\n    s.pending_buf[s.pending++] = s.bi_buf & 0xff;\n    s.bi_buf >>= 8;\n    s.bi_valid -= 8;\n  }\n}\n\n\n/* ===========================================================================\n * Compute the optimal bit lengths for a tree and update the total bit length\n * for the current block.\n * IN assertion: the fields freq and dad are set, heap[heap_max] and\n *    above are the tree nodes sorted by increasing frequency.\n * OUT assertions: the field len is set to the optimal bit length, the\n *     array bl_count contains the frequencies for each bit length.\n *     The length opt_len is updated; static_len is also updated if stree is\n *     not null.\n */\nfunction gen_bitlen(s, desc)\n//    deflate_state *s;\n//    tree_desc *desc;    /* the tree descriptor */\n{\n  var tree            = desc.dyn_tree;\n  var max_code        = desc.max_code;\n  var stree           = desc.stat_desc.static_tree;\n  var has_stree       = desc.stat_desc.has_stree;\n  var extra           = desc.stat_desc.extra_bits;\n  var base            = desc.stat_desc.extra_base;\n  var max_length      = desc.stat_desc.max_length;\n  var h;              /* heap index */\n  var n, m;           /* iterate over the tree elements */\n  var bits;           /* bit length */\n  var xbits;          /* extra bits */\n  var f;              /* frequency */\n  var overflow = 0;   /* number of elements with bit length too large */\n\n  for (bits = 0; bits <= MAX_BITS; bits++) {\n    s.bl_count[bits] = 0;\n  }\n\n  /* In a first pass, compute the optimal bit lengths (which may\n   * overflow in the case of the bit length tree).\n   */\n  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */\n\n  for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {\n    n = s.heap[h];\n    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;\n    if (bits > max_length) {\n      bits = max_length;\n      overflow++;\n    }\n    tree[n * 2 + 1]/*.Len*/ = bits;\n    /* We overwrite tree[n].Dad which is no longer needed */\n\n    if (n > max_code) { continue; } /* not a leaf node */\n\n    s.bl_count[bits]++;\n    xbits = 0;\n    if (n >= base) {\n      xbits = extra[n - base];\n    }\n    f = tree[n * 2]/*.Freq*/;\n    s.opt_len += f * (bits + xbits);\n    if (has_stree) {\n      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);\n    }\n  }\n  if (overflow === 0) { return; }\n\n  // Trace((stderr,\"\\nbit length overflow\\n\"));\n  /* This happens for example on obj2 and pic of the Calgary corpus */\n\n  /* Find the first bit length which could increase: */\n  do {\n    bits = max_length - 1;\n    while (s.bl_count[bits] === 0) { bits--; }\n    s.bl_count[bits]--;      /* move one leaf down the tree */\n    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */\n    s.bl_count[max_length]--;\n    /* The brother of the overflow item also moves one step up,\n     * but this does not affect bl_count[max_length]\n     */\n    overflow -= 2;\n  } while (overflow > 0);\n\n  /* Now recompute all bit lengths, scanning in increasing frequency.\n   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all\n   * lengths instead of fixing only the wrong ones. This idea is taken\n   * from 'ar' written by Haruhiko Okumura.)\n   */\n  for (bits = max_length; bits !== 0; bits--) {\n    n = s.bl_count[bits];\n    while (n !== 0) {\n      m = s.heap[--h];\n      if (m > max_code) { continue; }\n      if (tree[m * 2 + 1]/*.Len*/ !== bits) {\n        // Trace((stderr,\"code %d bits %d->%d\\n\", m, tree[m].Len, bits));\n        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;\n        tree[m * 2 + 1]/*.Len*/ = bits;\n      }\n      n--;\n    }\n  }\n}\n\n\n/* ===========================================================================\n * Generate the codes for a given tree and bit counts (which need not be\n * optimal).\n * IN assertion: the array bl_count contains the bit length statistics for\n * the given tree and the field len is set for all tree elements.\n * OUT assertion: the field code is set for all tree elements of non\n *     zero code length.\n */\nfunction gen_codes(tree, max_code, bl_count)\n//    ct_data *tree;             /* the tree to decorate */\n//    int max_code;              /* largest code with non zero frequency */\n//    ushf *bl_count;            /* number of codes at each bit length */\n{\n  var next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */\n  var code = 0;              /* running code value */\n  var bits;                  /* bit index */\n  var n;                     /* code index */\n\n  /* The distribution counts are first used to generate the code values\n   * without bit reversal.\n   */\n  for (bits = 1; bits <= MAX_BITS; bits++) {\n    next_code[bits] = code = (code + bl_count[bits - 1]) << 1;\n  }\n  /* Check that the bit counts in bl_count are consistent. The last code\n   * must be all ones.\n   */\n  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,\n  //        \"inconsistent bit counts\");\n  //Tracev((stderr,\"\\ngen_codes: max_code %d \", max_code));\n\n  for (n = 0;  n <= max_code; n++) {\n    var len = tree[n * 2 + 1]/*.Len*/;\n    if (len === 0) { continue; }\n    /* Now reverse the bits */\n    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);\n\n    //Tracecv(tree != static_ltree, (stderr,\"\\nn %3d %c l %2d c %4x (%x) \",\n    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));\n  }\n}\n\n\n/* ===========================================================================\n * Initialize the various 'constant' tables.\n */\nfunction tr_static_init() {\n  var n;        /* iterates over tree elements */\n  var bits;     /* bit counter */\n  var length;   /* length value */\n  var code;     /* code value */\n  var dist;     /* distance index */\n  var bl_count = new Array(MAX_BITS + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  // do check in _tr_init()\n  //if (static_init_done) return;\n\n  /* For some embedded targets, global variables are not initialized: */\n/*#ifdef NO_INIT_GLOBAL_POINTERS\n  static_l_desc.static_tree = static_ltree;\n  static_l_desc.extra_bits = extra_lbits;\n  static_d_desc.static_tree = static_dtree;\n  static_d_desc.extra_bits = extra_dbits;\n  static_bl_desc.extra_bits = extra_blbits;\n#endif*/\n\n  /* Initialize the mapping length (0..255) -> length code (0..28) */\n  length = 0;\n  for (code = 0; code < LENGTH_CODES - 1; code++) {\n    base_length[code] = length;\n    for (n = 0; n < (1 << extra_lbits[code]); n++) {\n      _length_code[length++] = code;\n    }\n  }\n  //Assert (length == 256, \"tr_static_init: length != 256\");\n  /* Note that the length 255 (match length 258) can be represented\n   * in two different ways: code 284 + 5 bits or code 285, so we\n   * overwrite length_code[255] to use the best encoding:\n   */\n  _length_code[length - 1] = code;\n\n  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */\n  dist = 0;\n  for (code = 0; code < 16; code++) {\n    base_dist[code] = dist;\n    for (n = 0; n < (1 << extra_dbits[code]); n++) {\n      _dist_code[dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: dist != 256\");\n  dist >>= 7; /* from now on, all distances are divided by 128 */\n  for (; code < D_CODES; code++) {\n    base_dist[code] = dist << 7;\n    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {\n      _dist_code[256 + dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: 256+dist != 512\");\n\n  /* Construct the codes of the static literal tree */\n  for (bits = 0; bits <= MAX_BITS; bits++) {\n    bl_count[bits] = 0;\n  }\n\n  n = 0;\n  while (n <= 143) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  while (n <= 255) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 9;\n    n++;\n    bl_count[9]++;\n  }\n  while (n <= 279) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 7;\n    n++;\n    bl_count[7]++;\n  }\n  while (n <= 287) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  /* Codes 286 and 287 do not exist, but we must include them in the\n   * tree construction to get a canonical Huffman tree (longest code\n   * all ones)\n   */\n  gen_codes(static_ltree, L_CODES + 1, bl_count);\n\n  /* The static distance tree is trivial: */\n  for (n = 0; n < D_CODES; n++) {\n    static_dtree[n * 2 + 1]/*.Len*/ = 5;\n    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);\n  }\n\n  // Now data ready and we can init static trees\n  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);\n  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);\n  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);\n\n  //static_init_done = true;\n}\n\n\n/* ===========================================================================\n * Initialize a new block.\n */\nfunction init_block(s) {\n  var n; /* iterates over tree elements */\n\n  /* Initialize the trees. */\n  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }\n\n  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;\n  s.opt_len = s.static_len = 0;\n  s.last_lit = s.matches = 0;\n}\n\n\n/* ===========================================================================\n * Flush the bit buffer and align the output on a byte boundary\n */\nfunction bi_windup(s)\n{\n  if (s.bi_valid > 8) {\n    put_short(s, s.bi_buf);\n  } else if (s.bi_valid > 0) {\n    //put_byte(s, (Byte)s->bi_buf);\n    s.pending_buf[s.pending++] = s.bi_buf;\n  }\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n}\n\n/* ===========================================================================\n * Copy a stored block, storing first the length and its\n * one's complement if requested.\n */\nfunction copy_block(s, buf, len, header)\n//DeflateState *s;\n//charf    *buf;    /* the input data */\n//unsigned len;     /* its length */\n//int      header;  /* true if block header must be written */\n{\n  bi_windup(s);        /* align on byte boundary */\n\n  if (header) {\n    put_short(s, len);\n    put_short(s, ~len);\n  }\n//  while (len--) {\n//    put_byte(s, *buf++);\n//  }\n  utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);\n  s.pending += len;\n}\n\n/* ===========================================================================\n * Compares to subtrees, using the tree depth as tie breaker when\n * the subtrees have equal frequency. This minimizes the worst case length.\n */\nfunction smaller(tree, n, m, depth) {\n  var _n2 = n * 2;\n  var _m2 = m * 2;\n  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||\n         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));\n}\n\n/* ===========================================================================\n * Restore the heap property by moving down the tree starting at node k,\n * exchanging a node with the smallest of its two sons if necessary, stopping\n * when the heap property is re-established (each father smaller than its\n * two sons).\n */\nfunction pqdownheap(s, tree, k)\n//    deflate_state *s;\n//    ct_data *tree;  /* the tree to restore */\n//    int k;               /* node to move down */\n{\n  var v = s.heap[k];\n  var j = k << 1;  /* left son of k */\n  while (j <= s.heap_len) {\n    /* Set j to the smallest of the two sons: */\n    if (j < s.heap_len &&\n      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {\n      j++;\n    }\n    /* Exit if v is smaller than both sons */\n    if (smaller(tree, v, s.heap[j], s.depth)) { break; }\n\n    /* Exchange v with the smallest son */\n    s.heap[k] = s.heap[j];\n    k = j;\n\n    /* And continue down the tree, setting j to the left son of k */\n    j <<= 1;\n  }\n  s.heap[k] = v;\n}\n\n\n// inlined manually\n// var SMALLEST = 1;\n\n/* ===========================================================================\n * Send the block data compressed using the given Huffman trees\n */\nfunction compress_block(s, ltree, dtree)\n//    deflate_state *s;\n//    const ct_data *ltree; /* literal tree */\n//    const ct_data *dtree; /* distance tree */\n{\n  var dist;           /* distance of matched string */\n  var lc;             /* match length or unmatched char (if dist == 0) */\n  var lx = 0;         /* running index in l_buf */\n  var code;           /* the code to send */\n  var extra;          /* number of extra bits to send */\n\n  if (s.last_lit !== 0) {\n    do {\n      dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);\n      lc = s.pending_buf[s.l_buf + lx];\n      lx++;\n\n      if (dist === 0) {\n        send_code(s, lc, ltree); /* send a literal byte */\n        //Tracecv(isgraph(lc), (stderr,\" '%c' \", lc));\n      } else {\n        /* Here, lc is the match length - MIN_MATCH */\n        code = _length_code[lc];\n        send_code(s, code + LITERALS + 1, ltree); /* send the length code */\n        extra = extra_lbits[code];\n        if (extra !== 0) {\n          lc -= base_length[code];\n          send_bits(s, lc, extra);       /* send the extra length bits */\n        }\n        dist--; /* dist is now the match distance - 1 */\n        code = d_code(dist);\n        //Assert (code < D_CODES, \"bad d_code\");\n\n        send_code(s, code, dtree);       /* send the distance code */\n        extra = extra_dbits[code];\n        if (extra !== 0) {\n          dist -= base_dist[code];\n          send_bits(s, dist, extra);   /* send the extra distance bits */\n        }\n      } /* literal or match pair ? */\n\n      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */\n      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,\n      //       \"pendingBuf overflow\");\n\n    } while (lx < s.last_lit);\n  }\n\n  send_code(s, END_BLOCK, ltree);\n}\n\n\n/* ===========================================================================\n * Construct one Huffman tree and assigns the code bit strings and lengths.\n * Update the total bit length for the current block.\n * IN assertion: the field freq is set for all tree elements.\n * OUT assertions: the fields len and code are set to the optimal bit length\n *     and corresponding code. The length opt_len is updated; static_len is\n *     also updated if stree is not null. The field max_code is set.\n */\nfunction build_tree(s, desc)\n//    deflate_state *s;\n//    tree_desc *desc; /* the tree descriptor */\n{\n  var tree     = desc.dyn_tree;\n  var stree    = desc.stat_desc.static_tree;\n  var has_stree = desc.stat_desc.has_stree;\n  var elems    = desc.stat_desc.elems;\n  var n, m;          /* iterate over heap elements */\n  var max_code = -1; /* largest code with non zero frequency */\n  var node;          /* new node being created */\n\n  /* Construct the initial heap, with least frequent element in\n   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].\n   * heap[0] is not used.\n   */\n  s.heap_len = 0;\n  s.heap_max = HEAP_SIZE;\n\n  for (n = 0; n < elems; n++) {\n    if (tree[n * 2]/*.Freq*/ !== 0) {\n      s.heap[++s.heap_len] = max_code = n;\n      s.depth[n] = 0;\n\n    } else {\n      tree[n * 2 + 1]/*.Len*/ = 0;\n    }\n  }\n\n  /* The pkzip format requires that at least one distance code exists,\n   * and that at least one bit should be sent even if there is only one\n   * possible code. So to avoid special checks later on we force at least\n   * two codes of non zero frequency.\n   */\n  while (s.heap_len < 2) {\n    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);\n    tree[node * 2]/*.Freq*/ = 1;\n    s.depth[node] = 0;\n    s.opt_len--;\n\n    if (has_stree) {\n      s.static_len -= stree[node * 2 + 1]/*.Len*/;\n    }\n    /* node is 0 or 1 so it does not have extra bits */\n  }\n  desc.max_code = max_code;\n\n  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,\n   * establish sub-heaps of increasing lengths:\n   */\n  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }\n\n  /* Construct the Huffman tree by repeatedly combining the least two\n   * frequent nodes.\n   */\n  node = elems;              /* next internal node of the tree */\n  do {\n    //pqremove(s, tree, n);  /* n = node of least frequency */\n    /*** pqremove ***/\n    n = s.heap[1/*SMALLEST*/];\n    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n    /***/\n\n    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */\n\n    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */\n    s.heap[--s.heap_max] = m;\n\n    /* Create a new node father of n and m */\n    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;\n    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;\n    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;\n\n    /* and insert the new node in the heap */\n    s.heap[1/*SMALLEST*/] = node++;\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n\n  } while (s.heap_len >= 2);\n\n  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];\n\n  /* At this point, the fields freq and dad are set. We can now\n   * generate the bit lengths.\n   */\n  gen_bitlen(s, desc);\n\n  /* The field len is now set, we can generate the bit codes */\n  gen_codes(tree, max_code, s.bl_count);\n}\n\n\n/* ===========================================================================\n * Scan a literal or distance tree to determine the frequencies of the codes\n * in the bit length tree.\n */\nfunction scan_tree(s, tree, max_code)\n//    deflate_state *s;\n//    ct_data *tree;   /* the tree to be scanned */\n//    int max_code;    /* and its largest code of non zero frequency */\n{\n  var n;                     /* iterates over all tree elements */\n  var prevlen = -1;          /* last emitted length */\n  var curlen;                /* length of current code */\n\n  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  var count = 0;             /* repeat count of the current code */\n  var max_count = 7;         /* max repeat count */\n  var min_count = 4;         /* min repeat count */\n\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      s.bl_tree[curlen * 2]/*.Freq*/ += count;\n\n    } else if (curlen !== 0) {\n\n      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }\n      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;\n\n    } else if (count <= 10) {\n      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;\n\n    } else {\n      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;\n    }\n\n    count = 0;\n    prevlen = curlen;\n\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n}\n\n\n/* ===========================================================================\n * Send a literal or distance tree in compressed form, using the codes in\n * bl_tree.\n */\nfunction send_tree(s, tree, max_code)\n//    deflate_state *s;\n//    ct_data *tree; /* the tree to be scanned */\n//    int max_code;       /* and its largest code of non zero frequency */\n{\n  var n;                     /* iterates over all tree elements */\n  var prevlen = -1;          /* last emitted length */\n  var curlen;                /* length of current code */\n\n  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  var count = 0;             /* repeat count of the current code */\n  var max_count = 7;         /* max repeat count */\n  var min_count = 4;         /* min repeat count */\n\n  /* tree[max_code+1].Len = -1; */  /* guard already set */\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);\n\n    } else if (curlen !== 0) {\n      if (curlen !== prevlen) {\n        send_code(s, curlen, s.bl_tree);\n        count--;\n      }\n      //Assert(count >= 3 && count <= 6, \" 3_6?\");\n      send_code(s, REP_3_6, s.bl_tree);\n      send_bits(s, count - 3, 2);\n\n    } else if (count <= 10) {\n      send_code(s, REPZ_3_10, s.bl_tree);\n      send_bits(s, count - 3, 3);\n\n    } else {\n      send_code(s, REPZ_11_138, s.bl_tree);\n      send_bits(s, count - 11, 7);\n    }\n\n    count = 0;\n    prevlen = curlen;\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n}\n\n\n/* ===========================================================================\n * Construct the Huffman tree for the bit lengths and return the index in\n * bl_order of the last bit length code to send.\n */\nfunction build_bl_tree(s) {\n  var max_blindex;  /* index of last bit length code of non zero freq */\n\n  /* Determine the bit length frequencies for literal and distance trees */\n  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);\n  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);\n\n  /* Build the bit length tree: */\n  build_tree(s, s.bl_desc);\n  /* opt_len now includes the length of the tree representations, except\n   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.\n   */\n\n  /* Determine the number of bit length codes to send. The pkzip format\n   * requires that at least 4 bit length codes be sent. (appnote.txt says\n   * 3 but the actual value used is 4.)\n   */\n  for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {\n    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {\n      break;\n    }\n  }\n  /* Update opt_len to include the bit length tree and counts */\n  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;\n  //Tracev((stderr, \"\\ndyn trees: dyn %ld, stat %ld\",\n  //        s->opt_len, s->static_len));\n\n  return max_blindex;\n}\n\n\n/* ===========================================================================\n * Send the header for a block using dynamic Huffman trees: the counts, the\n * lengths of the bit length codes, the literal tree and the distance tree.\n * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.\n */\nfunction send_all_trees(s, lcodes, dcodes, blcodes)\n//    deflate_state *s;\n//    int lcodes, dcodes, blcodes; /* number of codes for each tree */\n{\n  var rank;                    /* index in bl_order */\n\n  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, \"not enough codes\");\n  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,\n  //        \"too many codes\");\n  //Tracev((stderr, \"\\nbl counts: \"));\n  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */\n  send_bits(s, dcodes - 1,   5);\n  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */\n  for (rank = 0; rank < blcodes; rank++) {\n    //Tracev((stderr, \"\\nbl code %2d \", bl_order[rank]));\n    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);\n  }\n  //Tracev((stderr, \"\\nbl tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */\n  //Tracev((stderr, \"\\nlit tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */\n  //Tracev((stderr, \"\\ndist tree: sent %ld\", s->bits_sent));\n}\n\n\n/* ===========================================================================\n * Check if the data type is TEXT or BINARY, using the following algorithm:\n * - TEXT if the two conditions below are satisfied:\n *    a) There are no non-portable control characters belonging to the\n *       \"black list\" (0..6, 14..25, 28..31).\n *    b) There is at least one printable character belonging to the\n *       \"white list\" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).\n * - BINARY otherwise.\n * - The following partially-portable control characters form a\n *   \"gray list\" that is ignored in this detection algorithm:\n *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).\n * IN assertion: the fields Freq of dyn_ltree are set.\n */\nfunction detect_data_type(s) {\n  /* black_mask is the bit mask of black-listed bytes\n   * set bits 0..6, 14..25, and 28..31\n   * 0xf3ffc07f = binary 11110011111111111100000001111111\n   */\n  var black_mask = 0xf3ffc07f;\n  var n;\n\n  /* Check for non-textual (\"black-listed\") bytes. */\n  for (n = 0; n <= 31; n++, black_mask >>>= 1) {\n    if ((black_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {\n      return Z_BINARY;\n    }\n  }\n\n  /* Check for textual (\"white-listed\") bytes. */\n  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||\n      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {\n    return Z_TEXT;\n  }\n  for (n = 32; n < LITERALS; n++) {\n    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {\n      return Z_TEXT;\n    }\n  }\n\n  /* There are no \"black-listed\" or \"white-listed\" bytes:\n   * this stream either is empty or has tolerated (\"gray-listed\") bytes only.\n   */\n  return Z_BINARY;\n}\n\n\nvar static_init_done = false;\n\n/* ===========================================================================\n * Initialize the tree data structures for a new zlib stream.\n */\nfunction _tr_init(s)\n{\n\n  if (!static_init_done) {\n    tr_static_init();\n    static_init_done = true;\n  }\n\n  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);\n  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);\n  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);\n\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n\n  /* Initialize the first block of the first file: */\n  init_block(s);\n}\n\n\n/* ===========================================================================\n * Send a stored block\n */\nfunction _tr_stored_block(s, buf, stored_len, last)\n//DeflateState *s;\n//charf *buf;       /* input block */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n{\n  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */\n  copy_block(s, buf, stored_len, true); /* with header */\n}\n\n\n/* ===========================================================================\n * Send one empty static block to give enough lookahead for inflate.\n * This takes 10 bits, of which 7 may remain in the bit buffer.\n */\nfunction _tr_align(s) {\n  send_bits(s, STATIC_TREES << 1, 3);\n  send_code(s, END_BLOCK, static_ltree);\n  bi_flush(s);\n}\n\n\n/* ===========================================================================\n * Determine the best encoding for the current block: dynamic trees, static\n * trees or store, and output the encoded block to the zip file.\n */\nfunction _tr_flush_block(s, buf, stored_len, last)\n//DeflateState *s;\n//charf *buf;       /* input block, or NULL if too old */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n{\n  var opt_lenb, static_lenb;  /* opt_len and static_len in bytes */\n  var max_blindex = 0;        /* index of last bit length code of non zero freq */\n\n  /* Build the Huffman trees unless a stored block is forced */\n  if (s.level > 0) {\n\n    /* Check if the file is binary or text */\n    if (s.strm.data_type === Z_UNKNOWN) {\n      s.strm.data_type = detect_data_type(s);\n    }\n\n    /* Construct the literal and distance trees */\n    build_tree(s, s.l_desc);\n    // Tracev((stderr, \"\\nlit data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n\n    build_tree(s, s.d_desc);\n    // Tracev((stderr, \"\\ndist data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n    /* At this point, opt_len and static_len are the total bit lengths of\n     * the compressed block data, excluding the tree representations.\n     */\n\n    /* Build the bit length tree for the above two trees, and get the index\n     * in bl_order of the last bit length code to send.\n     */\n    max_blindex = build_bl_tree(s);\n\n    /* Determine the best encoding. Compute the block lengths in bytes. */\n    opt_lenb = (s.opt_len + 3 + 7) >>> 3;\n    static_lenb = (s.static_len + 3 + 7) >>> 3;\n\n    // Tracev((stderr, \"\\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u \",\n    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,\n    //        s->last_lit));\n\n    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }\n\n  } else {\n    // Assert(buf != (char*)0, \"lost buf\");\n    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */\n  }\n\n  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {\n    /* 4: two words for the lengths */\n\n    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.\n     * Otherwise we can't have processed more than WSIZE input bytes since\n     * the last block flush, because compression would have been\n     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to\n     * transform a block into a stored block.\n     */\n    _tr_stored_block(s, buf, stored_len, last);\n\n  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {\n\n    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);\n    compress_block(s, static_ltree, static_dtree);\n\n  } else {\n    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);\n    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);\n    compress_block(s, s.dyn_ltree, s.dyn_dtree);\n  }\n  // Assert (s->compressed_len == s->bits_sent, \"bad compressed size\");\n  /* The above check is made mod 2^32, for files larger than 512 MB\n   * and uLong implemented on 32 bits.\n   */\n  init_block(s);\n\n  if (last) {\n    bi_windup(s);\n  }\n  // Tracev((stderr,\"\\ncomprlen %lu(%lu) \", s->compressed_len>>3,\n  //       s->compressed_len-7*last));\n}\n\n/* ===========================================================================\n * Save the match info and tally the frequency counts. Return true if\n * the current block must be flushed.\n */\nfunction _tr_tally(s, dist, lc)\n//    deflate_state *s;\n//    unsigned dist;  /* distance of matched string */\n//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */\n{\n  //var out_length, in_length, dcode;\n\n  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;\n  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;\n\n  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;\n  s.last_lit++;\n\n  if (dist === 0) {\n    /* lc is the unmatched char */\n    s.dyn_ltree[lc * 2]/*.Freq*/++;\n  } else {\n    s.matches++;\n    /* Here, lc is the match length - MIN_MATCH */\n    dist--;             /* dist = match distance - 1 */\n    //Assert((ush)dist < (ush)MAX_DIST(s) &&\n    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&\n    //       (ush)d_code(dist) < (ush)D_CODES,  \"_tr_tally: bad match\");\n\n    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]/*.Freq*/++;\n    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;\n  }\n\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n\n//#ifdef TRUNCATE_BLOCK\n//  /* Try to guess if it is profitable to stop the current block here */\n//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {\n//    /* Compute an upper bound for the compressed length */\n//    out_length = s.last_lit*8;\n//    in_length = s.strstart - s.block_start;\n//\n//    for (dcode = 0; dcode < D_CODES; dcode++) {\n//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);\n//    }\n//    out_length >>>= 3;\n//    //Tracev((stderr,\"\\nlast_lit %u, in %ld, out ~%ld(%ld%%) \",\n//    //       s->last_lit, in_length, out_length,\n//    //       100L - out_length*100L/in_length));\n//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {\n//      return true;\n//    }\n//  }\n//#endif\n\n  return (s.last_lit === s.lit_bufsize - 1);\n  /* We avoid equality with lit_bufsize because of wraparound at 64K\n   * on 16 bit machines and because stored blocks are restricted to\n   * 64K-1 bytes.\n   */\n}\n\nexports._tr_init  = _tr_init;\nexports._tr_stored_block = _tr_stored_block;\nexports._tr_flush_block  = _tr_flush_block;\nexports._tr_tally = _tr_tally;\nexports._tr_align = _tr_align;\n","'use strict';\n\n\nvar zlib_inflate = require('./zlib/inflate');\nvar utils        = require('./utils/common');\nvar strings      = require('./utils/strings');\nvar c            = require('./zlib/constants');\nvar msg          = require('./zlib/messages');\nvar ZStream      = require('./zlib/zstream');\nvar GZheader     = require('./zlib/gzheader');\n\nvar toString = Object.prototype.toString;\n\n/**\n * class Inflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[inflate]]\n * and [[inflateRaw]].\n **/\n\n/* internal\n * inflate.chunks -> Array\n *\n * Chunks of output data, if [[Inflate#onData]] not overridden.\n **/\n\n/**\n * Inflate.result -> Uint8Array|Array|String\n *\n * Uncompressed result, generated by default [[Inflate#onData]]\n * and [[Inflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Inflate#push]] with `Z_FINISH` / `true` param) or if you\n * push a chunk with explicit flush (call [[Inflate#push]] with\n * `Z_SYNC_FLUSH` param).\n **/\n\n/**\n * Inflate.err -> Number\n *\n * Error code after inflate finished. 0 (Z_OK) on success.\n * Should be checked if broken data possible.\n **/\n\n/**\n * Inflate.msg -> String\n *\n * Error message, if [[Inflate.err]] != 0\n **/\n\n\n/**\n * new Inflate(options)\n * - options (Object): zlib inflate options.\n *\n * Creates new inflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `windowBits`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw inflate\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n * By default, when no options set, autodetect deflate/gzip data format via\n * wrapper header.\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * var inflate = new pako.Inflate({ level: 3});\n *\n * inflate.push(chunk1, false);\n * inflate.push(chunk2, true);  // true -> last chunk\n *\n * if (inflate.err) { throw new Error(inflate.err); }\n *\n * console.log(inflate.result);\n * ```\n **/\nfunction Inflate(options) {\n  if (!(this instanceof Inflate)) return new Inflate(options);\n\n  this.options = utils.assign({\n    chunkSize: 16384,\n    windowBits: 0,\n    to: ''\n  }, options || {});\n\n  var opt = this.options;\n\n  // Force window size for `raw` data, if not set directly,\n  // because we have no header for autodetect.\n  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {\n    opt.windowBits = -opt.windowBits;\n    if (opt.windowBits === 0) { opt.windowBits = -15; }\n  }\n\n  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate\n  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&\n      !(options && options.windowBits)) {\n    opt.windowBits += 32;\n  }\n\n  // Gzip header has no info about windows size, we can do autodetect only\n  // for deflate. So, if window size not set, force it to max when gzip possible\n  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {\n    // bit 3 (16) -> gzipped data\n    // bit 4 (32) -> autodetect gzip/deflate\n    if ((opt.windowBits & 15) === 0) {\n      opt.windowBits |= 15;\n    }\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm   = new ZStream();\n  this.strm.avail_out = 0;\n\n  var status  = zlib_inflate.inflateInit2(\n    this.strm,\n    opt.windowBits\n  );\n\n  if (status !== c.Z_OK) {\n    throw new Error(msg[status]);\n  }\n\n  this.header = new GZheader();\n\n  zlib_inflate.inflateGetHeader(this.strm, this.header);\n\n  // Setup dictionary\n  if (opt.dictionary) {\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      opt.dictionary = strings.string2buf(opt.dictionary);\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n      opt.dictionary = new Uint8Array(opt.dictionary);\n    }\n    if (opt.raw) { //In raw mode we need to set the dictionary early\n      status = zlib_inflate.inflateSetDictionary(this.strm, opt.dictionary);\n      if (status !== c.Z_OK) {\n        throw new Error(msg[status]);\n      }\n    }\n  }\n}\n\n/**\n * Inflate#push(data[, mode]) -> Boolean\n * - data (Uint8Array|Array|ArrayBuffer|String): input data\n * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.\n *\n * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with\n * new output chunks. Returns `true` on success. The last data block must have\n * mode Z_FINISH (or `true`). That will flush internal pending buffers and call\n * [[Inflate#onEnd]]. For interim explicit flushes (without ending the stream) you\n * can use mode Z_SYNC_FLUSH, keeping the decompression context.\n *\n * On fail call [[Inflate#onEnd]] with error code and return false.\n *\n * We strongly recommend to use `Uint8Array` on input for best speed (output\n * format is detected automatically). Also, don't skip last param and always\n * use the same type in your code (boolean or number). That will improve JS speed.\n *\n * For regular `Array`-s make sure all elements are [0..255].\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nInflate.prototype.push = function (data, mode) {\n  var strm = this.strm;\n  var chunkSize = this.options.chunkSize;\n  var dictionary = this.options.dictionary;\n  var status, _mode;\n  var next_out_utf8, tail, utf8str;\n\n  // Flag to properly process Z_BUF_ERROR on testing inflate call\n  // when we check that all output data was flushed.\n  var allowBufError = false;\n\n  if (this.ended) { return false; }\n  _mode = (mode === ~~mode) ? mode : ((mode === true) ? c.Z_FINISH : c.Z_NO_FLUSH);\n\n  // Convert data if needed\n  if (typeof data === 'string') {\n    // Only binary strings can be decompressed on practice\n    strm.input = strings.binstring2buf(data);\n  } else if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  do {\n    if (strm.avail_out === 0) {\n      strm.output = new utils.Buf8(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    status = zlib_inflate.inflate(strm, c.Z_NO_FLUSH);    /* no bad return value */\n\n    if (status === c.Z_NEED_DICT && dictionary) {\n      status = zlib_inflate.inflateSetDictionary(this.strm, dictionary);\n    }\n\n    if (status === c.Z_BUF_ERROR && allowBufError === true) {\n      status = c.Z_OK;\n      allowBufError = false;\n    }\n\n    if (status !== c.Z_STREAM_END && status !== c.Z_OK) {\n      this.onEnd(status);\n      this.ended = true;\n      return false;\n    }\n\n    if (strm.next_out) {\n      if (strm.avail_out === 0 || status === c.Z_STREAM_END || (strm.avail_in === 0 && (_mode === c.Z_FINISH || _mode === c.Z_SYNC_FLUSH))) {\n\n        if (this.options.to === 'string') {\n\n          next_out_utf8 = strings.utf8border(strm.output, strm.next_out);\n\n          tail = strm.next_out - next_out_utf8;\n          utf8str = strings.buf2string(strm.output, next_out_utf8);\n\n          // move tail\n          strm.next_out = tail;\n          strm.avail_out = chunkSize - tail;\n          if (tail) { utils.arraySet(strm.output, strm.output, next_out_utf8, tail, 0); }\n\n          this.onData(utf8str);\n\n        } else {\n          this.onData(utils.shrinkBuf(strm.output, strm.next_out));\n        }\n      }\n    }\n\n    // When no more input data, we should check that internal inflate buffers\n    // are flushed. The only way to do it when avail_out = 0 - run one more\n    // inflate pass. But if output data not exists, inflate return Z_BUF_ERROR.\n    // Here we set flag to process this error properly.\n    //\n    // NOTE. Deflate does not return error in this case and does not needs such\n    // logic.\n    if (strm.avail_in === 0 && strm.avail_out === 0) {\n      allowBufError = true;\n    }\n\n  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== c.Z_STREAM_END);\n\n  if (status === c.Z_STREAM_END) {\n    _mode = c.Z_FINISH;\n  }\n\n  // Finalize on the last chunk.\n  if (_mode === c.Z_FINISH) {\n    status = zlib_inflate.inflateEnd(this.strm);\n    this.onEnd(status);\n    this.ended = true;\n    return status === c.Z_OK;\n  }\n\n  // callback interim results if Z_SYNC_FLUSH.\n  if (_mode === c.Z_SYNC_FLUSH) {\n    this.onEnd(c.Z_OK);\n    strm.avail_out = 0;\n    return true;\n  }\n\n  return true;\n};\n\n\n/**\n * Inflate#onData(chunk) -> Void\n * - chunk (Uint8Array|Array|String): output data. Type of array depends\n *   on js engine support. When string output requested, each chunk\n *   will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nInflate.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Inflate#onEnd(status) -> Void\n * - status (Number): inflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called either after you tell inflate that the input stream is\n * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)\n * or if an error happened. By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nInflate.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === c.Z_OK) {\n    if (this.options.to === 'string') {\n      // Glue & convert here, until we teach pako to send\n      // utf8 aligned strings to onData\n      this.result = this.chunks.join('');\n    } else {\n      this.result = utils.flattenChunks(this.chunks);\n    }\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * inflate(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Decompress `data` with inflate/ungzip and `options`. Autodetect\n * format via wrapper header by default. That's why we don't provide\n * separate `ungzip` method.\n *\n * Supported options are:\n *\n * - windowBits\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])\n *   , output;\n *\n * try {\n *   output = pako.inflate(input);\n * } catch (err)\n *   console.log(err);\n * }\n * ```\n **/\nfunction inflate(input, options) {\n  var inflator = new Inflate(options);\n\n  inflator.push(input, true);\n\n  // That will never happens, if you don't cheat with options :)\n  if (inflator.err) { throw inflator.msg || msg[inflator.err]; }\n\n  return inflator.result;\n}\n\n\n/**\n * inflateRaw(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * The same as [[inflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction inflateRaw(input, options) {\n  options = options || {};\n  options.raw = true;\n  return inflate(input, options);\n}\n\n\n/**\n * ungzip(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Just shortcut to [[inflate]], because it autodetects format\n * by header.content. Done for convenience.\n **/\n\n\nexports.Inflate = Inflate;\nexports.inflate = inflate;\nexports.inflateRaw = inflateRaw;\nexports.ungzip  = inflate;\n","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar utils         = require('../utils/common');\nvar adler32       = require('./adler32');\nvar crc32         = require('./crc32');\nvar inflate_fast  = require('./inffast');\nvar inflate_table = require('./inftrees');\n\nvar CODES = 0;\nvar LENS = 1;\nvar DISTS = 2;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n/* Allowed flush values; see deflate() and inflate() below for details */\n//var Z_NO_FLUSH      = 0;\n//var Z_PARTIAL_FLUSH = 1;\n//var Z_SYNC_FLUSH    = 2;\n//var Z_FULL_FLUSH    = 3;\nvar Z_FINISH        = 4;\nvar Z_BLOCK         = 5;\nvar Z_TREES         = 6;\n\n\n/* Return codes for the compression/decompression functions. Negative values\n * are errors, positive values are used for special but normal events.\n */\nvar Z_OK            = 0;\nvar Z_STREAM_END    = 1;\nvar Z_NEED_DICT     = 2;\n//var Z_ERRNO         = -1;\nvar Z_STREAM_ERROR  = -2;\nvar Z_DATA_ERROR    = -3;\nvar Z_MEM_ERROR     = -4;\nvar Z_BUF_ERROR     = -5;\n//var Z_VERSION_ERROR = -6;\n\n/* The deflate compression method */\nvar Z_DEFLATED  = 8;\n\n\n/* STATES ====================================================================*/\n/* ===========================================================================*/\n\n\nvar    HEAD = 1;       /* i: waiting for magic header */\nvar    FLAGS = 2;      /* i: waiting for method and flags (gzip) */\nvar    TIME = 3;       /* i: waiting for modification time (gzip) */\nvar    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */\nvar    EXLEN = 5;      /* i: waiting for extra length (gzip) */\nvar    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */\nvar    NAME = 7;       /* i: waiting for end of file name (gzip) */\nvar    COMMENT = 8;    /* i: waiting for end of comment (gzip) */\nvar    HCRC = 9;       /* i: waiting for header crc (gzip) */\nvar    DICTID = 10;    /* i: waiting for dictionary check value */\nvar    DICT = 11;      /* waiting for inflateSetDictionary() call */\nvar        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */\nvar        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */\nvar        STORED = 14;    /* i: waiting for stored size (length and complement) */\nvar        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */\nvar        COPY = 16;      /* i/o: waiting for input or output to copy stored block */\nvar        TABLE = 17;     /* i: waiting for dynamic block table lengths */\nvar        LENLENS = 18;   /* i: waiting for code length code lengths */\nvar        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */\nvar            LEN_ = 20;      /* i: same as LEN below, but only first time in */\nvar            LEN = 21;       /* i: waiting for length/lit/eob code */\nvar            LENEXT = 22;    /* i: waiting for length extra bits */\nvar            DIST = 23;      /* i: waiting for distance code */\nvar            DISTEXT = 24;   /* i: waiting for distance extra bits */\nvar            MATCH = 25;     /* o: waiting for output space to copy string */\nvar            LIT = 26;       /* o: waiting for output space to write literal */\nvar    CHECK = 27;     /* i: waiting for 32-bit check value */\nvar    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */\nvar    DONE = 29;      /* finished check, done -- remain here until reset */\nvar    BAD = 30;       /* got a data error -- remain here until reset */\nvar    MEM = 31;       /* got an inflate() memory error -- remain here until reset */\nvar    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */\n\n/* ===========================================================================*/\n\n\n\nvar ENOUGH_LENS = 852;\nvar ENOUGH_DISTS = 592;\n//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);\n\nvar MAX_WBITS = 15;\n/* 32K LZ77 window */\nvar DEF_WBITS = MAX_WBITS;\n\n\nfunction zswap32(q) {\n  return  (((q >>> 24) & 0xff) +\n          ((q >>> 8) & 0xff00) +\n          ((q & 0xff00) << 8) +\n          ((q & 0xff) << 24));\n}\n\n\nfunction InflateState() {\n  this.mode = 0;             /* current inflate mode */\n  this.last = false;          /* true if processing last block */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.havedict = false;      /* true if dictionary provided */\n  this.flags = 0;             /* gzip header method and flags (0 if zlib) */\n  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */\n  this.check = 0;             /* protected copy of check value */\n  this.total = 0;             /* protected copy of output count */\n  // TODO: may be {}\n  this.head = null;           /* where to save gzip header information */\n\n  /* sliding window */\n  this.wbits = 0;             /* log base 2 of requested window size */\n  this.wsize = 0;             /* window size or zero if not using window */\n  this.whave = 0;             /* valid bytes in the window */\n  this.wnext = 0;             /* window write index */\n  this.window = null;         /* allocated sliding window, if needed */\n\n  /* bit accumulator */\n  this.hold = 0;              /* input bit accumulator */\n  this.bits = 0;              /* number of bits in \"in\" */\n\n  /* for string and stored block copying */\n  this.length = 0;            /* literal or length of data to copy */\n  this.offset = 0;            /* distance back to copy string from */\n\n  /* for table and code decoding */\n  this.extra = 0;             /* extra bits needed */\n\n  /* fixed and dynamic code tables */\n  this.lencode = null;          /* starting table for length/literal codes */\n  this.distcode = null;         /* starting table for distance codes */\n  this.lenbits = 0;           /* index bits for lencode */\n  this.distbits = 0;          /* index bits for distcode */\n\n  /* dynamic table building */\n  this.ncode = 0;             /* number of code length code lengths */\n  this.nlen = 0;              /* number of length code lengths */\n  this.ndist = 0;             /* number of distance code lengths */\n  this.have = 0;              /* number of code lengths in lens[] */\n  this.next = null;              /* next available space in codes[] */\n\n  this.lens = new utils.Buf16(320); /* temporary storage for code lengths */\n  this.work = new utils.Buf16(288); /* work area for code table building */\n\n  /*\n   because we don't have pointers in js, we use lencode and distcode directly\n   as buffers so we don't need codes\n  */\n  //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */\n  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */\n  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */\n  this.sane = 0;                   /* if false, allow invalid distance too far */\n  this.back = 0;                   /* bits back of last unprocessed length/lit */\n  this.was = 0;                    /* initial length of match */\n}\n\nfunction inflateResetKeep(strm) {\n  var state;\n\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n  strm.total_in = strm.total_out = state.total = 0;\n  strm.msg = ''; /*Z_NULL*/\n  if (state.wrap) {       /* to support ill-conceived Java test suite */\n    strm.adler = state.wrap & 1;\n  }\n  state.mode = HEAD;\n  state.last = 0;\n  state.havedict = 0;\n  state.dmax = 32768;\n  state.head = null/*Z_NULL*/;\n  state.hold = 0;\n  state.bits = 0;\n  //state.lencode = state.distcode = state.next = state.codes;\n  state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);\n  state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);\n\n  state.sane = 1;\n  state.back = -1;\n  //Tracev((stderr, \"inflate: reset\\n\"));\n  return Z_OK;\n}\n\nfunction inflateReset(strm) {\n  var state;\n\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n  state.wsize = 0;\n  state.whave = 0;\n  state.wnext = 0;\n  return inflateResetKeep(strm);\n\n}\n\nfunction inflateReset2(strm, windowBits) {\n  var wrap;\n  var state;\n\n  /* get the state */\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n\n  /* extract wrap request from windowBits parameter */\n  if (windowBits < 0) {\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n  else {\n    wrap = (windowBits >> 4) + 1;\n    if (windowBits < 48) {\n      windowBits &= 15;\n    }\n  }\n\n  /* set number of window bits, free window if different */\n  if (windowBits && (windowBits < 8 || windowBits > 15)) {\n    return Z_STREAM_ERROR;\n  }\n  if (state.window !== null && state.wbits !== windowBits) {\n    state.window = null;\n  }\n\n  /* update state and reset the rest of it */\n  state.wrap = wrap;\n  state.wbits = windowBits;\n  return inflateReset(strm);\n}\n\nfunction inflateInit2(strm, windowBits) {\n  var ret;\n  var state;\n\n  if (!strm) { return Z_STREAM_ERROR; }\n  //strm.msg = Z_NULL;                 /* in case we return an error */\n\n  state = new InflateState();\n\n  //if (state === Z_NULL) return Z_MEM_ERROR;\n  //Tracev((stderr, \"inflate: allocated\\n\"));\n  strm.state = state;\n  state.window = null/*Z_NULL*/;\n  ret = inflateReset2(strm, windowBits);\n  if (ret !== Z_OK) {\n    strm.state = null/*Z_NULL*/;\n  }\n  return ret;\n}\n\nfunction inflateInit(strm) {\n  return inflateInit2(strm, DEF_WBITS);\n}\n\n\n/*\n Return state with length and distance decoding tables and index sizes set to\n fixed code decoding.  Normally this returns fixed tables from inffixed.h.\n If BUILDFIXED is defined, then instead this routine builds the tables the\n first time it's called, and returns those tables the first time and\n thereafter.  This reduces the size of the code by about 2K bytes, in\n exchange for a little execution time.  However, BUILDFIXED should not be\n used for threaded applications, since the rewriting of the tables and virgin\n may not be thread-safe.\n */\nvar virgin = true;\n\nvar lenfix, distfix; // We have no pointers in JS, so keep tables separate\n\nfunction fixedtables(state) {\n  /* build fixed huffman tables if first call (may not be thread safe) */\n  if (virgin) {\n    var sym;\n\n    lenfix = new utils.Buf32(512);\n    distfix = new utils.Buf32(32);\n\n    /* literal/length table */\n    sym = 0;\n    while (sym < 144) { state.lens[sym++] = 8; }\n    while (sym < 256) { state.lens[sym++] = 9; }\n    while (sym < 280) { state.lens[sym++] = 7; }\n    while (sym < 288) { state.lens[sym++] = 8; }\n\n    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });\n\n    /* distance table */\n    sym = 0;\n    while (sym < 32) { state.lens[sym++] = 5; }\n\n    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });\n\n    /* do this just once */\n    virgin = false;\n  }\n\n  state.lencode = lenfix;\n  state.lenbits = 9;\n  state.distcode = distfix;\n  state.distbits = 5;\n}\n\n\n/*\n Update the window with the last wsize (normally 32K) bytes written before\n returning.  If window does not exist yet, create it.  This is only called\n when a window is already in use, or when output has been written during this\n inflate call, but the end of the deflate stream has not been reached yet.\n It is also called to create a window for dictionary data when a dictionary\n is loaded.\n\n Providing output buffers larger than 32K to inflate() should provide a speed\n advantage, since only the last 32K of output is copied to the sliding window\n upon return from inflate(), and since all distances after the first 32K of\n output will fall in the output data, making match copies simpler and faster.\n The advantage may be dependent on the size of the processor's data caches.\n */\nfunction updatewindow(strm, src, end, copy) {\n  var dist;\n  var state = strm.state;\n\n  /* if it hasn't been done already, allocate space for the window */\n  if (state.window === null) {\n    state.wsize = 1 << state.wbits;\n    state.wnext = 0;\n    state.whave = 0;\n\n    state.window = new utils.Buf8(state.wsize);\n  }\n\n  /* copy state->wsize or less output bytes into the circular window */\n  if (copy >= state.wsize) {\n    utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);\n    state.wnext = 0;\n    state.whave = state.wsize;\n  }\n  else {\n    dist = state.wsize - state.wnext;\n    if (dist > copy) {\n      dist = copy;\n    }\n    //zmemcpy(state->window + state->wnext, end - copy, dist);\n    utils.arraySet(state.window, src, end - copy, dist, state.wnext);\n    copy -= dist;\n    if (copy) {\n      //zmemcpy(state->window, end - copy, copy);\n      utils.arraySet(state.window, src, end - copy, copy, 0);\n      state.wnext = copy;\n      state.whave = state.wsize;\n    }\n    else {\n      state.wnext += dist;\n      if (state.wnext === state.wsize) { state.wnext = 0; }\n      if (state.whave < state.wsize) { state.whave += dist; }\n    }\n  }\n  return 0;\n}\n\nfunction inflate(strm, flush) {\n  var state;\n  var input, output;          // input/output buffers\n  var next;                   /* next input INDEX */\n  var put;                    /* next output INDEX */\n  var have, left;             /* available input and output */\n  var hold;                   /* bit buffer */\n  var bits;                   /* bits in bit buffer */\n  var _in, _out;              /* save starting available input and output */\n  var copy;                   /* number of stored or match bytes to copy */\n  var from;                   /* where to copy match bytes from */\n  var from_source;\n  var here = 0;               /* current decoding table entry */\n  var here_bits, here_op, here_val; // paked \"here\" denormalized (JS specific)\n  //var last;                   /* parent table entry */\n  var last_bits, last_op, last_val; // paked \"last\" denormalized (JS specific)\n  var len;                    /* length to copy for repeats, bits to drop */\n  var ret;                    /* return code */\n  var hbuf = new utils.Buf8(4);    /* buffer for gzip header crc calculation */\n  var opts;\n\n  var n; // temporary var for NEED_BITS\n\n  var order = /* permutation of code lengths */\n    [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];\n\n\n  if (!strm || !strm.state || !strm.output ||\n      (!strm.input && strm.avail_in !== 0)) {\n    return Z_STREAM_ERROR;\n  }\n\n  state = strm.state;\n  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */\n\n\n  //--- LOAD() ---\n  put = strm.next_out;\n  output = strm.output;\n  left = strm.avail_out;\n  next = strm.next_in;\n  input = strm.input;\n  have = strm.avail_in;\n  hold = state.hold;\n  bits = state.bits;\n  //---\n\n  _in = have;\n  _out = left;\n  ret = Z_OK;\n\n  inf_leave: // goto emulation\n  for (;;) {\n    switch (state.mode) {\n      case HEAD:\n        if (state.wrap === 0) {\n          state.mode = TYPEDO;\n          break;\n        }\n        //=== NEEDBITS(16);\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */\n          state.check = 0/*crc32(0L, Z_NULL, 0)*/;\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32(state.check, hbuf, 2, 0);\n          //===//\n\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          state.mode = FLAGS;\n          break;\n        }\n        state.flags = 0;           /* expect zlib header */\n        if (state.head) {\n          state.head.done = false;\n        }\n        if (!(state.wrap & 1) ||   /* check if zlib header allowed */\n          (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {\n          strm.msg = 'incorrect header check';\n          state.mode = BAD;\n          break;\n        }\n        if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {\n          strm.msg = 'unknown compression method';\n          state.mode = BAD;\n          break;\n        }\n        //--- DROPBITS(4) ---//\n        hold >>>= 4;\n        bits -= 4;\n        //---//\n        len = (hold & 0x0f)/*BITS(4)*/ + 8;\n        if (state.wbits === 0) {\n          state.wbits = len;\n        }\n        else if (len > state.wbits) {\n          strm.msg = 'invalid window size';\n          state.mode = BAD;\n          break;\n        }\n        state.dmax = 1 << len;\n        //Tracev((stderr, \"inflate:   zlib header ok\\n\"));\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n        state.mode = hold & 0x200 ? DICTID : TYPE;\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        break;\n      case FLAGS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.flags = hold;\n        if ((state.flags & 0xff) !== Z_DEFLATED) {\n          strm.msg = 'unknown compression method';\n          state.mode = BAD;\n          break;\n        }\n        if (state.flags & 0xe000) {\n          strm.msg = 'unknown header flags set';\n          state.mode = BAD;\n          break;\n        }\n        if (state.head) {\n          state.head.text = ((hold >> 8) & 1);\n        }\n        if (state.flags & 0x0200) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = TIME;\n        /* falls through */\n      case TIME:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (state.head) {\n          state.head.time = hold;\n        }\n        if (state.flags & 0x0200) {\n          //=== CRC4(state.check, hold)\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          hbuf[2] = (hold >>> 16) & 0xff;\n          hbuf[3] = (hold >>> 24) & 0xff;\n          state.check = crc32(state.check, hbuf, 4, 0);\n          //===\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = OS;\n        /* falls through */\n      case OS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (state.head) {\n          state.head.xflags = (hold & 0xff);\n          state.head.os = (hold >> 8);\n        }\n        if (state.flags & 0x0200) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = EXLEN;\n        /* falls through */\n      case EXLEN:\n        if (state.flags & 0x0400) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.length = hold;\n          if (state.head) {\n            state.head.extra_len = hold;\n          }\n          if (state.flags & 0x0200) {\n            //=== CRC2(state.check, hold);\n            hbuf[0] = hold & 0xff;\n            hbuf[1] = (hold >>> 8) & 0xff;\n            state.check = crc32(state.check, hbuf, 2, 0);\n            //===//\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n        }\n        else if (state.head) {\n          state.head.extra = null/*Z_NULL*/;\n        }\n        state.mode = EXTRA;\n        /* falls through */\n      case EXTRA:\n        if (state.flags & 0x0400) {\n          copy = state.length;\n          if (copy > have) { copy = have; }\n          if (copy) {\n            if (state.head) {\n              len = state.head.extra_len - state.length;\n              if (!state.head.extra) {\n                // Use untyped array for more convenient processing later\n                state.head.extra = new Array(state.head.extra_len);\n              }\n              utils.arraySet(\n                state.head.extra,\n                input,\n                next,\n                // extra field is limited to 65536 bytes\n                // - no need for additional size check\n                copy,\n                /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/\n                len\n              );\n              //zmemcpy(state.head.extra + len, next,\n              //        len + copy > state.head.extra_max ?\n              //        state.head.extra_max - len : copy);\n            }\n            if (state.flags & 0x0200) {\n              state.check = crc32(state.check, input, copy, next);\n            }\n            have -= copy;\n            next += copy;\n            state.length -= copy;\n          }\n          if (state.length) { break inf_leave; }\n        }\n        state.length = 0;\n        state.mode = NAME;\n        /* falls through */\n      case NAME:\n        if (state.flags & 0x0800) {\n          if (have === 0) { break inf_leave; }\n          copy = 0;\n          do {\n            // TODO: 2 or 1 bytes?\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n            if (state.head && len &&\n                (state.length < 65536 /*state.head.name_max*/)) {\n              state.head.name += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n\n          if (state.flags & 0x0200) {\n            state.check = crc32(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          if (len) { break inf_leave; }\n        }\n        else if (state.head) {\n          state.head.name = null;\n        }\n        state.length = 0;\n        state.mode = COMMENT;\n        /* falls through */\n      case COMMENT:\n        if (state.flags & 0x1000) {\n          if (have === 0) { break inf_leave; }\n          copy = 0;\n          do {\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n            if (state.head && len &&\n                (state.length < 65536 /*state.head.comm_max*/)) {\n              state.head.comment += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n          if (state.flags & 0x0200) {\n            state.check = crc32(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          if (len) { break inf_leave; }\n        }\n        else if (state.head) {\n          state.head.comment = null;\n        }\n        state.mode = HCRC;\n        /* falls through */\n      case HCRC:\n        if (state.flags & 0x0200) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          if (hold !== (state.check & 0xffff)) {\n            strm.msg = 'header crc mismatch';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n        }\n        if (state.head) {\n          state.head.hcrc = ((state.flags >> 9) & 1);\n          state.head.done = true;\n        }\n        strm.adler = state.check = 0;\n        state.mode = TYPE;\n        break;\n      case DICTID:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        strm.adler = state.check = zswap32(hold);\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = DICT;\n        /* falls through */\n      case DICT:\n        if (state.havedict === 0) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits;\n          //---\n          return Z_NEED_DICT;\n        }\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n        state.mode = TYPE;\n        /* falls through */\n      case TYPE:\n        if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case TYPEDO:\n        if (state.last) {\n          //--- BYTEBITS() ---//\n          hold >>>= bits & 7;\n          bits -= bits & 7;\n          //---//\n          state.mode = CHECK;\n          break;\n        }\n        //=== NEEDBITS(3); */\n        while (bits < 3) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.last = (hold & 0x01)/*BITS(1)*/;\n        //--- DROPBITS(1) ---//\n        hold >>>= 1;\n        bits -= 1;\n        //---//\n\n        switch ((hold & 0x03)/*BITS(2)*/) {\n          case 0:                             /* stored block */\n            //Tracev((stderr, \"inflate:     stored block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = STORED;\n            break;\n          case 1:                             /* fixed block */\n            fixedtables(state);\n            //Tracev((stderr, \"inflate:     fixed codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = LEN_;             /* decode codes */\n            if (flush === Z_TREES) {\n              //--- DROPBITS(2) ---//\n              hold >>>= 2;\n              bits -= 2;\n              //---//\n              break inf_leave;\n            }\n            break;\n          case 2:                             /* dynamic block */\n            //Tracev((stderr, \"inflate:     dynamic codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = TABLE;\n            break;\n          case 3:\n            strm.msg = 'invalid block type';\n            state.mode = BAD;\n        }\n        //--- DROPBITS(2) ---//\n        hold >>>= 2;\n        bits -= 2;\n        //---//\n        break;\n      case STORED:\n        //--- BYTEBITS() ---// /* go to byte boundary */\n        hold >>>= bits & 7;\n        bits -= bits & 7;\n        //---//\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {\n          strm.msg = 'invalid stored block lengths';\n          state.mode = BAD;\n          break;\n        }\n        state.length = hold & 0xffff;\n        //Tracev((stderr, \"inflate:       stored length %u\\n\",\n        //        state.length));\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = COPY_;\n        if (flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case COPY_:\n        state.mode = COPY;\n        /* falls through */\n      case COPY:\n        copy = state.length;\n        if (copy) {\n          if (copy > have) { copy = have; }\n          if (copy > left) { copy = left; }\n          if (copy === 0) { break inf_leave; }\n          //--- zmemcpy(put, next, copy); ---\n          utils.arraySet(output, input, next, copy, put);\n          //---//\n          have -= copy;\n          next += copy;\n          left -= copy;\n          put += copy;\n          state.length -= copy;\n          break;\n        }\n        //Tracev((stderr, \"inflate:       stored end\\n\"));\n        state.mode = TYPE;\n        break;\n      case TABLE:\n        //=== NEEDBITS(14); */\n        while (bits < 14) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;\n        //--- DROPBITS(5) ---//\n        hold >>>= 5;\n        bits -= 5;\n        //---//\n        state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;\n        //--- DROPBITS(5) ---//\n        hold >>>= 5;\n        bits -= 5;\n        //---//\n        state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;\n        //--- DROPBITS(4) ---//\n        hold >>>= 4;\n        bits -= 4;\n        //---//\n//#ifndef PKZIP_BUG_WORKAROUND\n        if (state.nlen > 286 || state.ndist > 30) {\n          strm.msg = 'too many length or distance symbols';\n          state.mode = BAD;\n          break;\n        }\n//#endif\n        //Tracev((stderr, \"inflate:       table sizes ok\\n\"));\n        state.have = 0;\n        state.mode = LENLENS;\n        /* falls through */\n      case LENLENS:\n        while (state.have < state.ncode) {\n          //=== NEEDBITS(3);\n          while (bits < 3) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);\n          //--- DROPBITS(3) ---//\n          hold >>>= 3;\n          bits -= 3;\n          //---//\n        }\n        while (state.have < 19) {\n          state.lens[order[state.have++]] = 0;\n        }\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        //state.next = state.codes;\n        //state.lencode = state.next;\n        // Switch to use dynamic table\n        state.lencode = state.lendyn;\n        state.lenbits = 7;\n\n        opts = { bits: state.lenbits };\n        ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);\n        state.lenbits = opts.bits;\n\n        if (ret) {\n          strm.msg = 'invalid code lengths set';\n          state.mode = BAD;\n          break;\n        }\n        //Tracev((stderr, \"inflate:       code lengths ok\\n\"));\n        state.have = 0;\n        state.mode = CODELENS;\n        /* falls through */\n      case CODELENS:\n        while (state.have < state.nlen + state.ndist) {\n          for (;;) {\n            here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          if (here_val < 16) {\n            //--- DROPBITS(here.bits) ---//\n            hold >>>= here_bits;\n            bits -= here_bits;\n            //---//\n            state.lens[state.have++] = here_val;\n          }\n          else {\n            if (here_val === 16) {\n              //=== NEEDBITS(here.bits + 2);\n              n = here_bits + 2;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              if (state.have === 0) {\n                strm.msg = 'invalid bit length repeat';\n                state.mode = BAD;\n                break;\n              }\n              len = state.lens[state.have - 1];\n              copy = 3 + (hold & 0x03);//BITS(2);\n              //--- DROPBITS(2) ---//\n              hold >>>= 2;\n              bits -= 2;\n              //---//\n            }\n            else if (here_val === 17) {\n              //=== NEEDBITS(here.bits + 3);\n              n = here_bits + 3;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              len = 0;\n              copy = 3 + (hold & 0x07);//BITS(3);\n              //--- DROPBITS(3) ---//\n              hold >>>= 3;\n              bits -= 3;\n              //---//\n            }\n            else {\n              //=== NEEDBITS(here.bits + 7);\n              n = here_bits + 7;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              len = 0;\n              copy = 11 + (hold & 0x7f);//BITS(7);\n              //--- DROPBITS(7) ---//\n              hold >>>= 7;\n              bits -= 7;\n              //---//\n            }\n            if (state.have + copy > state.nlen + state.ndist) {\n              strm.msg = 'invalid bit length repeat';\n              state.mode = BAD;\n              break;\n            }\n            while (copy--) {\n              state.lens[state.have++] = len;\n            }\n          }\n        }\n\n        /* handle error breaks in while */\n        if (state.mode === BAD) { break; }\n\n        /* check for end-of-block code (better have one) */\n        if (state.lens[256] === 0) {\n          strm.msg = 'invalid code -- missing end-of-block';\n          state.mode = BAD;\n          break;\n        }\n\n        /* build code tables -- note: do not change the lenbits or distbits\n           values here (9 and 6) without reading the comments in inftrees.h\n           concerning the ENOUGH constants, which depend on those values */\n        state.lenbits = 9;\n\n        opts = { bits: state.lenbits };\n        ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n        state.lenbits = opts.bits;\n        // state.lencode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid literal/lengths set';\n          state.mode = BAD;\n          break;\n        }\n\n        state.distbits = 6;\n        //state.distcode.copy(state.codes);\n        // Switch to use dynamic table\n        state.distcode = state.distdyn;\n        opts = { bits: state.distbits };\n        ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n        state.distbits = opts.bits;\n        // state.distcode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid distances set';\n          state.mode = BAD;\n          break;\n        }\n        //Tracev((stderr, 'inflate:       codes ok\\n'));\n        state.mode = LEN_;\n        if (flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case LEN_:\n        state.mode = LEN;\n        /* falls through */\n      case LEN:\n        if (have >= 6 && left >= 258) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits;\n          //---\n          inflate_fast(strm, _out);\n          //--- LOAD() ---\n          put = strm.next_out;\n          output = strm.output;\n          left = strm.avail_out;\n          next = strm.next_in;\n          input = strm.input;\n          have = strm.avail_in;\n          hold = state.hold;\n          bits = state.bits;\n          //---\n\n          if (state.mode === TYPE) {\n            state.back = -1;\n          }\n          break;\n        }\n        state.back = 0;\n        for (;;) {\n          here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if (here_bits <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if (here_op && (here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n          for (;;) {\n            here = state.lencode[last_val +\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((last_bits + here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          //--- DROPBITS(last.bits) ---//\n          hold >>>= last_bits;\n          bits -= last_bits;\n          //---//\n          state.back += last_bits;\n        }\n        //--- DROPBITS(here.bits) ---//\n        hold >>>= here_bits;\n        bits -= here_bits;\n        //---//\n        state.back += here_bits;\n        state.length = here_val;\n        if (here_op === 0) {\n          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n          //        \"inflate:         literal '%c'\\n\" :\n          //        \"inflate:         literal 0x%02x\\n\", here.val));\n          state.mode = LIT;\n          break;\n        }\n        if (here_op & 32) {\n          //Tracevv((stderr, \"inflate:         end of block\\n\"));\n          state.back = -1;\n          state.mode = TYPE;\n          break;\n        }\n        if (here_op & 64) {\n          strm.msg = 'invalid literal/length code';\n          state.mode = BAD;\n          break;\n        }\n        state.extra = here_op & 15;\n        state.mode = LENEXT;\n        /* falls through */\n      case LENEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n          while (bits < n) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n          //--- DROPBITS(state.extra) ---//\n          hold >>>= state.extra;\n          bits -= state.extra;\n          //---//\n          state.back += state.extra;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", state.length));\n        state.was = state.length;\n        state.mode = DIST;\n        /* falls through */\n      case DIST:\n        for (;;) {\n          here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if ((here_bits) <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if ((here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n          for (;;) {\n            here = state.distcode[last_val +\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((last_bits + here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          //--- DROPBITS(last.bits) ---//\n          hold >>>= last_bits;\n          bits -= last_bits;\n          //---//\n          state.back += last_bits;\n        }\n        //--- DROPBITS(here.bits) ---//\n        hold >>>= here_bits;\n        bits -= here_bits;\n        //---//\n        state.back += here_bits;\n        if (here_op & 64) {\n          strm.msg = 'invalid distance code';\n          state.mode = BAD;\n          break;\n        }\n        state.offset = here_val;\n        state.extra = (here_op) & 15;\n        state.mode = DISTEXT;\n        /* falls through */\n      case DISTEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n          while (bits < n) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n          //--- DROPBITS(state.extra) ---//\n          hold >>>= state.extra;\n          bits -= state.extra;\n          //---//\n          state.back += state.extra;\n        }\n//#ifdef INFLATE_STRICT\n        if (state.offset > state.dmax) {\n          strm.msg = 'invalid distance too far back';\n          state.mode = BAD;\n          break;\n        }\n//#endif\n        //Tracevv((stderr, \"inflate:         distance %u\\n\", state.offset));\n        state.mode = MATCH;\n        /* falls through */\n      case MATCH:\n        if (left === 0) { break inf_leave; }\n        copy = _out - left;\n        if (state.offset > copy) {         /* copy from window */\n          copy = state.offset - copy;\n          if (copy > state.whave) {\n            if (state.sane) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD;\n              break;\n            }\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//          Trace((stderr, \"inflate.c too far\\n\"));\n//          copy -= state.whave;\n//          if (copy > state.length) { copy = state.length; }\n//          if (copy > left) { copy = left; }\n//          left -= copy;\n//          state.length -= copy;\n//          do {\n//            output[put++] = 0;\n//          } while (--copy);\n//          if (state.length === 0) { state.mode = LEN; }\n//          break;\n//#endif\n          }\n          if (copy > state.wnext) {\n            copy -= state.wnext;\n            from = state.wsize - copy;\n          }\n          else {\n            from = state.wnext - copy;\n          }\n          if (copy > state.length) { copy = state.length; }\n          from_source = state.window;\n        }\n        else {                              /* copy from output */\n          from_source = output;\n          from = put - state.offset;\n          copy = state.length;\n        }\n        if (copy > left) { copy = left; }\n        left -= copy;\n        state.length -= copy;\n        do {\n          output[put++] = from_source[from++];\n        } while (--copy);\n        if (state.length === 0) { state.mode = LEN; }\n        break;\n      case LIT:\n        if (left === 0) { break inf_leave; }\n        output[put++] = state.length;\n        left--;\n        state.mode = LEN;\n        break;\n      case CHECK:\n        if (state.wrap) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            // Use '|' instead of '+' to make sure that result is signed\n            hold |= input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          _out -= left;\n          strm.total_out += _out;\n          state.total += _out;\n          if (_out) {\n            strm.adler = state.check =\n                /*UPDATE(state.check, put - _out, _out);*/\n                (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));\n\n          }\n          _out = left;\n          // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too\n          if ((state.flags ? hold : zswap32(hold)) !== state.check) {\n            strm.msg = 'incorrect data check';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          //Tracev((stderr, \"inflate:   check matches trailer\\n\"));\n        }\n        state.mode = LENGTH;\n        /* falls through */\n      case LENGTH:\n        if (state.wrap && state.flags) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          if (hold !== (state.total & 0xffffffff)) {\n            strm.msg = 'incorrect length check';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          //Tracev((stderr, \"inflate:   length matches trailer\\n\"));\n        }\n        state.mode = DONE;\n        /* falls through */\n      case DONE:\n        ret = Z_STREAM_END;\n        break inf_leave;\n      case BAD:\n        ret = Z_DATA_ERROR;\n        break inf_leave;\n      case MEM:\n        return Z_MEM_ERROR;\n      case SYNC:\n        /* falls through */\n      default:\n        return Z_STREAM_ERROR;\n    }\n  }\n\n  // inf_leave <- here is real place for \"goto inf_leave\", emulated via \"break inf_leave\"\n\n  /*\n     Return from inflate(), updating the total counts and the check value.\n     If there was no progress during the inflate() call, return a buffer\n     error.  Call updatewindow() to create and/or update the window state.\n     Note: a memory error from inflate() is non-recoverable.\n   */\n\n  //--- RESTORE() ---\n  strm.next_out = put;\n  strm.avail_out = left;\n  strm.next_in = next;\n  strm.avail_in = have;\n  state.hold = hold;\n  state.bits = bits;\n  //---\n\n  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&\n                      (state.mode < CHECK || flush !== Z_FINISH))) {\n    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {\n      state.mode = MEM;\n      return Z_MEM_ERROR;\n    }\n  }\n  _in -= strm.avail_in;\n  _out -= strm.avail_out;\n  strm.total_in += _in;\n  strm.total_out += _out;\n  state.total += _out;\n  if (state.wrap && _out) {\n    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/\n      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));\n  }\n  strm.data_type = state.bits + (state.last ? 64 : 0) +\n                    (state.mode === TYPE ? 128 : 0) +\n                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);\n  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {\n    ret = Z_BUF_ERROR;\n  }\n  return ret;\n}\n\nfunction inflateEnd(strm) {\n\n  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  var state = strm.state;\n  if (state.window) {\n    state.window = null;\n  }\n  strm.state = null;\n  return Z_OK;\n}\n\nfunction inflateGetHeader(strm, head) {\n  var state;\n\n  /* check state */\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }\n\n  /* save header structure */\n  state.head = head;\n  head.done = false;\n  return Z_OK;\n}\n\nfunction inflateSetDictionary(strm, dictionary) {\n  var dictLength = dictionary.length;\n\n  var state;\n  var dictid;\n  var ret;\n\n  /* check state */\n  if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR; }\n  state = strm.state;\n\n  if (state.wrap !== 0 && state.mode !== DICT) {\n    return Z_STREAM_ERROR;\n  }\n\n  /* check for correct dictionary identifier */\n  if (state.mode === DICT) {\n    dictid = 1; /* adler32(0, null, 0)*/\n    /* dictid = adler32(dictid, dictionary, dictLength); */\n    dictid = adler32(dictid, dictionary, dictLength, 0);\n    if (dictid !== state.check) {\n      return Z_DATA_ERROR;\n    }\n  }\n  /* copy dictionary to window using updatewindow(), which will amend the\n   existing dictionary if appropriate */\n  ret = updatewindow(strm, dictionary, dictLength, dictLength);\n  if (ret) {\n    state.mode = MEM;\n    return Z_MEM_ERROR;\n  }\n  state.havedict = 1;\n  // Tracev((stderr, \"inflate:   dictionary set\\n\"));\n  return Z_OK;\n}\n\nexports.inflateReset = inflateReset;\nexports.inflateReset2 = inflateReset2;\nexports.inflateResetKeep = inflateResetKeep;\nexports.inflateInit = inflateInit;\nexports.inflateInit2 = inflateInit2;\nexports.inflate = inflate;\nexports.inflateEnd = inflateEnd;\nexports.inflateGetHeader = inflateGetHeader;\nexports.inflateSetDictionary = inflateSetDictionary;\nexports.inflateInfo = 'pako inflate (from Nodeca project)';\n\n/* Not implemented\nexports.inflateCopy = inflateCopy;\nexports.inflateGetDictionary = inflateGetDictionary;\nexports.inflateMark = inflateMark;\nexports.inflatePrime = inflatePrime;\nexports.inflateSync = inflateSync;\nexports.inflateSyncPoint = inflateSyncPoint;\nexports.inflateUndermine = inflateUndermine;\n*/\n","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// See state defs from inflate.js\nvar BAD = 30;       /* got a data error -- remain here until reset */\nvar TYPE = 12;      /* i: waiting for type bits, including last-flag bit */\n\n/*\n   Decode literal, length, and distance codes and write out the resulting\n   literal and match bytes until either not enough input or output is\n   available, an end-of-block is encountered, or a data error is encountered.\n   When large enough input and output buffers are supplied to inflate(), for\n   example, a 16K input buffer and a 64K output buffer, more than 95% of the\n   inflate execution time is spent in this routine.\n\n   Entry assumptions:\n\n        state.mode === LEN\n        strm.avail_in >= 6\n        strm.avail_out >= 258\n        start >= strm.avail_out\n        state.bits < 8\n\n   On return, state.mode is one of:\n\n        LEN -- ran out of enough output space or enough available input\n        TYPE -- reached end of block code, inflate() to interpret next block\n        BAD -- error in block data\n\n   Notes:\n\n    - The maximum input bits used by a length/distance pair is 15 bits for the\n      length code, 5 bits for the length extra, 15 bits for the distance code,\n      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.\n      Therefore if strm.avail_in >= 6, then there is enough input to avoid\n      checking for available input while decoding.\n\n    - The maximum bytes that a single length/distance pair can output is 258\n      bytes, which is the maximum length that can be coded.  inflate_fast()\n      requires strm.avail_out >= 258 for each loop to avoid checking for\n      output space.\n */\nmodule.exports = function inflate_fast(strm, start) {\n  var state;\n  var _in;                    /* local strm.input */\n  var last;                   /* have enough input while in < last */\n  var _out;                   /* local strm.output */\n  var beg;                    /* inflate()'s initial strm.output */\n  var end;                    /* while out < end, enough space available */\n//#ifdef INFLATE_STRICT\n  var dmax;                   /* maximum distance from zlib header */\n//#endif\n  var wsize;                  /* window size or zero if not using window */\n  var whave;                  /* valid bytes in the window */\n  var wnext;                  /* window write index */\n  // Use `s_window` instead `window`, avoid conflict with instrumentation tools\n  var s_window;               /* allocated sliding window, if wsize != 0 */\n  var hold;                   /* local strm.hold */\n  var bits;                   /* local strm.bits */\n  var lcode;                  /* local strm.lencode */\n  var dcode;                  /* local strm.distcode */\n  var lmask;                  /* mask for first level of length codes */\n  var dmask;                  /* mask for first level of distance codes */\n  var here;                   /* retrieved table entry */\n  var op;                     /* code bits, operation, extra bits, or */\n                              /*  window position, window bytes to copy */\n  var len;                    /* match length, unused bytes */\n  var dist;                   /* match distance */\n  var from;                   /* where to copy match from */\n  var from_source;\n\n\n  var input, output; // JS specific, because we have no pointers\n\n  /* copy state to local variables */\n  state = strm.state;\n  //here = state.here;\n  _in = strm.next_in;\n  input = strm.input;\n  last = _in + (strm.avail_in - 5);\n  _out = strm.next_out;\n  output = strm.output;\n  beg = _out - (start - strm.avail_out);\n  end = _out + (strm.avail_out - 257);\n//#ifdef INFLATE_STRICT\n  dmax = state.dmax;\n//#endif\n  wsize = state.wsize;\n  whave = state.whave;\n  wnext = state.wnext;\n  s_window = state.window;\n  hold = state.hold;\n  bits = state.bits;\n  lcode = state.lencode;\n  dcode = state.distcode;\n  lmask = (1 << state.lenbits) - 1;\n  dmask = (1 << state.distbits) - 1;\n\n\n  /* decode literals and length/distances until end-of-block or not enough\n     input data or output space */\n\n  top:\n  do {\n    if (bits < 15) {\n      hold += input[_in++] << bits;\n      bits += 8;\n      hold += input[_in++] << bits;\n      bits += 8;\n    }\n\n    here = lcode[hold & lmask];\n\n    dolen:\n    for (;;) { // Goto emulation\n      op = here >>> 24/*here.bits*/;\n      hold >>>= op;\n      bits -= op;\n      op = (here >>> 16) & 0xff/*here.op*/;\n      if (op === 0) {                          /* literal */\n        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n        //        \"inflate:         literal '%c'\\n\" :\n        //        \"inflate:         literal 0x%02x\\n\", here.val));\n        output[_out++] = here & 0xffff/*here.val*/;\n      }\n      else if (op & 16) {                     /* length base */\n        len = here & 0xffff/*here.val*/;\n        op &= 15;                           /* number of extra bits */\n        if (op) {\n          if (bits < op) {\n            hold += input[_in++] << bits;\n            bits += 8;\n          }\n          len += hold & ((1 << op) - 1);\n          hold >>>= op;\n          bits -= op;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", len));\n        if (bits < 15) {\n          hold += input[_in++] << bits;\n          bits += 8;\n          hold += input[_in++] << bits;\n          bits += 8;\n        }\n        here = dcode[hold & dmask];\n\n        dodist:\n        for (;;) { // goto emulation\n          op = here >>> 24/*here.bits*/;\n          hold >>>= op;\n          bits -= op;\n          op = (here >>> 16) & 0xff/*here.op*/;\n\n          if (op & 16) {                      /* distance base */\n            dist = here & 0xffff/*here.val*/;\n            op &= 15;                       /* number of extra bits */\n            if (bits < op) {\n              hold += input[_in++] << bits;\n              bits += 8;\n              if (bits < op) {\n                hold += input[_in++] << bits;\n                bits += 8;\n              }\n            }\n            dist += hold & ((1 << op) - 1);\n//#ifdef INFLATE_STRICT\n            if (dist > dmax) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD;\n              break top;\n            }\n//#endif\n            hold >>>= op;\n            bits -= op;\n            //Tracevv((stderr, \"inflate:         distance %u\\n\", dist));\n            op = _out - beg;                /* max distance in output */\n            if (dist > op) {                /* see if copy from window */\n              op = dist - op;               /* distance back in window */\n              if (op > whave) {\n                if (state.sane) {\n                  strm.msg = 'invalid distance too far back';\n                  state.mode = BAD;\n                  break top;\n                }\n\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//                if (len <= op - whave) {\n//                  do {\n//                    output[_out++] = 0;\n//                  } while (--len);\n//                  continue top;\n//                }\n//                len -= op - whave;\n//                do {\n//                  output[_out++] = 0;\n//                } while (--op > whave);\n//                if (op === 0) {\n//                  from = _out - dist;\n//                  do {\n//                    output[_out++] = output[from++];\n//                  } while (--len);\n//                  continue top;\n//                }\n//#endif\n              }\n              from = 0; // window index\n              from_source = s_window;\n              if (wnext === 0) {           /* very common case */\n                from += wsize - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              else if (wnext < op) {      /* wrap around window */\n                from += wsize + wnext - op;\n                op -= wnext;\n                if (op < len) {         /* some from end of window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = 0;\n                  if (wnext < len) {  /* some from start of window */\n                    op = wnext;\n                    len -= op;\n                    do {\n                      output[_out++] = s_window[from++];\n                    } while (--op);\n                    from = _out - dist;      /* rest from output */\n                    from_source = output;\n                  }\n                }\n              }\n              else {                      /* contiguous in window */\n                from += wnext - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              while (len > 2) {\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                len -= 3;\n              }\n              if (len) {\n                output[_out++] = from_source[from++];\n                if (len > 1) {\n                  output[_out++] = from_source[from++];\n                }\n              }\n            }\n            else {\n              from = _out - dist;          /* copy direct from output */\n              do {                        /* minimum length is three */\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                len -= 3;\n              } while (len > 2);\n              if (len) {\n                output[_out++] = output[from++];\n                if (len > 1) {\n                  output[_out++] = output[from++];\n                }\n              }\n            }\n          }\n          else if ((op & 64) === 0) {          /* 2nd level distance code */\n            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n            continue dodist;\n          }\n          else {\n            strm.msg = 'invalid distance code';\n            state.mode = BAD;\n            break top;\n          }\n\n          break; // need to emulate goto via \"continue\"\n        }\n      }\n      else if ((op & 64) === 0) {              /* 2nd level length code */\n        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n        continue dolen;\n      }\n      else if (op & 32) {                     /* end-of-block */\n        //Tracevv((stderr, \"inflate:         end of block\\n\"));\n        state.mode = TYPE;\n        break top;\n      }\n      else {\n        strm.msg = 'invalid literal/length code';\n        state.mode = BAD;\n        break top;\n      }\n\n      break; // need to emulate goto via \"continue\"\n    }\n  } while (_in < last && _out < end);\n\n  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */\n  len = bits >> 3;\n  _in -= len;\n  bits -= len << 3;\n  hold &= (1 << bits) - 1;\n\n  /* update state and return */\n  strm.next_in = _in;\n  strm.next_out = _out;\n  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));\n  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));\n  state.hold = hold;\n  state.bits = bits;\n  return;\n};\n","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar utils = require('../utils/common');\n\nvar MAXBITS = 15;\nvar ENOUGH_LENS = 852;\nvar ENOUGH_DISTS = 592;\n//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);\n\nvar CODES = 0;\nvar LENS = 1;\nvar DISTS = 2;\n\nvar lbase = [ /* Length codes 257..285 base */\n  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,\n  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0\n];\n\nvar lext = [ /* Length codes 257..285 extra */\n  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,\n  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78\n];\n\nvar dbase = [ /* Distance codes 0..29 base */\n  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,\n  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,\n  8193, 12289, 16385, 24577, 0, 0\n];\n\nvar dext = [ /* Distance codes 0..29 extra */\n  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,\n  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,\n  28, 28, 29, 29, 64, 64\n];\n\nmodule.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)\n{\n  var bits = opts.bits;\n      //here = opts.here; /* table entry for duplication */\n\n  var len = 0;               /* a code's length in bits */\n  var sym = 0;               /* index of code symbols */\n  var min = 0, max = 0;          /* minimum and maximum code lengths */\n  var root = 0;              /* number of index bits for root table */\n  var curr = 0;              /* number of index bits for current table */\n  var drop = 0;              /* code bits to drop for sub-table */\n  var left = 0;                   /* number of prefix codes available */\n  var used = 0;              /* code entries in table used */\n  var huff = 0;              /* Huffman code */\n  var incr;              /* for incrementing code, index */\n  var fill;              /* index for replicating entries */\n  var low;               /* low bits for current root entry */\n  var mask;              /* mask for low root bits */\n  var next;             /* next available space in table */\n  var base = null;     /* base value table to use */\n  var base_index = 0;\n//  var shoextra;    /* extra bits table to use */\n  var end;                    /* use base and extra for symbol > end */\n  var count = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */\n  var offs = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */\n  var extra = null;\n  var extra_index = 0;\n\n  var here_bits, here_op, here_val;\n\n  /*\n   Process a set of code lengths to create a canonical Huffman code.  The\n   code lengths are lens[0..codes-1].  Each length corresponds to the\n   symbols 0..codes-1.  The Huffman code is generated by first sorting the\n   symbols by length from short to long, and retaining the symbol order\n   for codes with equal lengths.  Then the code starts with all zero bits\n   for the first code of the shortest length, and the codes are integer\n   increments for the same length, and zeros are appended as the length\n   increases.  For the deflate format, these bits are stored backwards\n   from their more natural integer increment ordering, and so when the\n   decoding tables are built in the large loop below, the integer codes\n   are incremented backwards.\n\n   This routine assumes, but does not check, that all of the entries in\n   lens[] are in the range 0..MAXBITS.  The caller must assure this.\n   1..MAXBITS is interpreted as that code length.  zero means that that\n   symbol does not occur in this code.\n\n   The codes are sorted by computing a count of codes for each length,\n   creating from that a table of starting indices for each length in the\n   sorted table, and then entering the symbols in order in the sorted\n   table.  The sorted table is work[], with that space being provided by\n   the caller.\n\n   The length counts are used for other purposes as well, i.e. finding\n   the minimum and maximum length codes, determining if there are any\n   codes at all, checking for a valid set of lengths, and looking ahead\n   at length counts to determine sub-table sizes when building the\n   decoding tables.\n   */\n\n  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */\n  for (len = 0; len <= MAXBITS; len++) {\n    count[len] = 0;\n  }\n  for (sym = 0; sym < codes; sym++) {\n    count[lens[lens_index + sym]]++;\n  }\n\n  /* bound code lengths, force root to be within code lengths */\n  root = bits;\n  for (max = MAXBITS; max >= 1; max--) {\n    if (count[max] !== 0) { break; }\n  }\n  if (root > max) {\n    root = max;\n  }\n  if (max === 0) {                     /* no symbols to code at all */\n    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */\n    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;\n    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n\n    //table.op[opts.table_index] = 64;\n    //table.bits[opts.table_index] = 1;\n    //table.val[opts.table_index++] = 0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n    opts.bits = 1;\n    return 0;     /* no symbols, but wait for decoding to report error */\n  }\n  for (min = 1; min < max; min++) {\n    if (count[min] !== 0) { break; }\n  }\n  if (root < min) {\n    root = min;\n  }\n\n  /* check for an over-subscribed or incomplete set of lengths */\n  left = 1;\n  for (len = 1; len <= MAXBITS; len++) {\n    left <<= 1;\n    left -= count[len];\n    if (left < 0) {\n      return -1;\n    }        /* over-subscribed */\n  }\n  if (left > 0 && (type === CODES || max !== 1)) {\n    return -1;                      /* incomplete set */\n  }\n\n  /* generate offsets into symbol table for each length for sorting */\n  offs[1] = 0;\n  for (len = 1; len < MAXBITS; len++) {\n    offs[len + 1] = offs[len] + count[len];\n  }\n\n  /* sort symbols by length, by symbol order within each length */\n  for (sym = 0; sym < codes; sym++) {\n    if (lens[lens_index + sym] !== 0) {\n      work[offs[lens[lens_index + sym]]++] = sym;\n    }\n  }\n\n  /*\n   Create and fill in decoding tables.  In this loop, the table being\n   filled is at next and has curr index bits.  The code being used is huff\n   with length len.  That code is converted to an index by dropping drop\n   bits off of the bottom.  For codes where len is less than drop + curr,\n   those top drop + curr - len bits are incremented through all values to\n   fill the table with replicated entries.\n\n   root is the number of index bits for the root table.  When len exceeds\n   root, sub-tables are created pointed to by the root entry with an index\n   of the low root bits of huff.  This is saved in low to check for when a\n   new sub-table should be started.  drop is zero when the root table is\n   being filled, and drop is root when sub-tables are being filled.\n\n   When a new sub-table is needed, it is necessary to look ahead in the\n   code lengths to determine what size sub-table is needed.  The length\n   counts are used for this, and so count[] is decremented as codes are\n   entered in the tables.\n\n   used keeps track of how many table entries have been allocated from the\n   provided *table space.  It is checked for LENS and DIST tables against\n   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in\n   the initial root table size constants.  See the comments in inftrees.h\n   for more information.\n\n   sym increments through all symbols, and the loop terminates when\n   all codes of length max, i.e. all codes, have been processed.  This\n   routine permits incomplete codes, so another loop after this one fills\n   in the rest of the decoding tables with invalid code markers.\n   */\n\n  /* set up for code type */\n  // poor man optimization - use if-else instead of switch,\n  // to avoid deopts in old v8\n  if (type === CODES) {\n    base = extra = work;    /* dummy value--not used */\n    end = 19;\n\n  } else if (type === LENS) {\n    base = lbase;\n    base_index -= 257;\n    extra = lext;\n    extra_index -= 257;\n    end = 256;\n\n  } else {                    /* DISTS */\n    base = dbase;\n    extra = dext;\n    end = -1;\n  }\n\n  /* initialize opts for loop */\n  huff = 0;                   /* starting code */\n  sym = 0;                    /* starting code symbol */\n  len = min;                  /* starting code length */\n  next = table_index;              /* current table to fill in */\n  curr = root;                /* current table index bits */\n  drop = 0;                   /* current bits to drop from code for index */\n  low = -1;                   /* trigger new sub-table when len > root */\n  used = 1 << root;          /* use root table entries */\n  mask = used - 1;            /* mask for comparing low */\n\n  /* check available table space */\n  if ((type === LENS && used > ENOUGH_LENS) ||\n    (type === DISTS && used > ENOUGH_DISTS)) {\n    return 1;\n  }\n\n  /* process all codes and make table entries */\n  for (;;) {\n    /* create table entry */\n    here_bits = len - drop;\n    if (work[sym] < end) {\n      here_op = 0;\n      here_val = work[sym];\n    }\n    else if (work[sym] > end) {\n      here_op = extra[extra_index + work[sym]];\n      here_val = base[base_index + work[sym]];\n    }\n    else {\n      here_op = 32 + 64;         /* end of block */\n      here_val = 0;\n    }\n\n    /* replicate for those indices with low len bits equal to huff */\n    incr = 1 << (len - drop);\n    fill = 1 << curr;\n    min = fill;                 /* save offset to next table */\n    do {\n      fill -= incr;\n      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;\n    } while (fill !== 0);\n\n    /* backwards increment the len-bit code huff */\n    incr = 1 << (len - 1);\n    while (huff & incr) {\n      incr >>= 1;\n    }\n    if (incr !== 0) {\n      huff &= incr - 1;\n      huff += incr;\n    } else {\n      huff = 0;\n    }\n\n    /* go to next symbol, update count, len */\n    sym++;\n    if (--count[len] === 0) {\n      if (len === max) { break; }\n      len = lens[lens_index + work[sym]];\n    }\n\n    /* create new sub-table if needed */\n    if (len > root && (huff & mask) !== low) {\n      /* if first time, transition to sub-tables */\n      if (drop === 0) {\n        drop = root;\n      }\n\n      /* increment past last table */\n      next += min;            /* here min is 1 << curr */\n\n      /* determine length of next table */\n      curr = len - drop;\n      left = 1 << curr;\n      while (curr + drop < max) {\n        left -= count[curr + drop];\n        if (left <= 0) { break; }\n        curr++;\n        left <<= 1;\n      }\n\n      /* check for enough space */\n      used += 1 << curr;\n      if ((type === LENS && used > ENOUGH_LENS) ||\n        (type === DISTS && used > ENOUGH_DISTS)) {\n        return 1;\n      }\n\n      /* point entry in root table to sub-table */\n      low = huff & mask;\n      /*table.op[low] = curr;\n      table.bits[low] = root;\n      table.val[low] = next - opts.table_index;*/\n      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;\n    }\n  }\n\n  /* fill in remaining table entry if code is incomplete (guaranteed to have\n   at most one remaining entry, since if the code is incomplete, the\n   maximum code length that was allowed to get this far is one bit) */\n  if (huff !== 0) {\n    //table.op[next + huff] = 64;            /* invalid code marker */\n    //table.bits[next + huff] = len - drop;\n    //table.val[next + huff] = 0;\n    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;\n  }\n\n  /* set return parameters */\n  //opts.table_index += used;\n  opts.bits = root;\n  return 0;\n};\n","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction GZheader() {\n  /* true if compressed data believed to be text */\n  this.text       = 0;\n  /* modification time */\n  this.time       = 0;\n  /* extra flags (not used when writing a gzip file) */\n  this.xflags     = 0;\n  /* operating system */\n  this.os         = 0;\n  /* pointer to extra field or Z_NULL if none */\n  this.extra      = null;\n  /* extra field length (valid if extra != Z_NULL) */\n  this.extra_len  = 0; // Actually, we don't need it in JS,\n                       // but leave for few code modifications\n\n  //\n  // Setup limits is not necessary because in js we should not preallocate memory\n  // for inflate use constant limit in 65536 bytes\n  //\n\n  /* space at extra (only when reading header) */\n  // this.extra_max  = 0;\n  /* pointer to zero-terminated file name or Z_NULL */\n  this.name       = '';\n  /* space at name (only when reading header) */\n  // this.name_max   = 0;\n  /* pointer to zero-terminated comment or Z_NULL */\n  this.comment    = '';\n  /* space at comment (only when reading header) */\n  // this.comm_max   = 0;\n  /* true if there was or will be a header crc */\n  this.hcrc       = 0;\n  /* true when done reading gzip header (not used when writing a gzip file) */\n  this.done       = false;\n}\n\nmodule.exports = GZheader;\n","/**\n * Private `concat` function to merge two array-like objects.\n *\n * @private\n * @param {Array|Arguments} [set1=[]] An array-like object.\n * @param {Array|Arguments} [set2=[]] An array-like object.\n * @return {Array} A new, merged array.\n * @example\n *\n *      _concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]\n */\nexport default function _concat(set1, set2) {\n  set1 = set1 || [];\n  set2 = set2 || [];\n  var idx;\n  var len1 = set1.length;\n  var len2 = set2.length;\n  var result = [];\n\n  idx = 0;\n  while (idx < len1) {\n    result[result.length] = set1[idx];\n    idx += 1;\n  }\n  idx = 0;\n  while (idx < len2) {\n    result[result.length] = set2[idx];\n    idx += 1;\n  }\n  return result;\n}","export default function _arity(n, fn) {\n  /* eslint-disable no-unused-vars */\n  switch (n) {\n    case 0:\n      return function () {\n        return fn.apply(this, arguments);\n      };\n    case 1:\n      return function (a0) {\n        return fn.apply(this, arguments);\n      };\n    case 2:\n      return function (a0, a1) {\n        return fn.apply(this, arguments);\n      };\n    case 3:\n      return function (a0, a1, a2) {\n        return fn.apply(this, arguments);\n      };\n    case 4:\n      return function (a0, a1, a2, a3) {\n        return fn.apply(this, arguments);\n      };\n    case 5:\n      return function (a0, a1, a2, a3, a4) {\n        return fn.apply(this, arguments);\n      };\n    case 6:\n      return function (a0, a1, a2, a3, a4, a5) {\n        return fn.apply(this, arguments);\n      };\n    case 7:\n      return function (a0, a1, a2, a3, a4, a5, a6) {\n        return fn.apply(this, arguments);\n      };\n    case 8:\n      return function (a0, a1, a2, a3, a4, a5, a6, a7) {\n        return fn.apply(this, arguments);\n      };\n    case 9:\n      return function (a0, a1, a2, a3, a4, a5, a6, a7, a8) {\n        return fn.apply(this, arguments);\n      };\n    case 10:\n      return function (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {\n        return fn.apply(this, arguments);\n      };\n    default:\n      throw new Error('First argument to _arity must be a non-negative integer no greater than ten');\n  }\n}","export default function _isPlaceholder(a) {\n       return a != null && typeof a === 'object' && a['@@functional/placeholder'] === true;\n}","import _isPlaceholder from './_isPlaceholder.js';\n\n/**\n * Optimized internal one-arity curry function.\n *\n * @private\n * @category Function\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nexport default function _curry1(fn) {\n  return function f1(a) {\n    if (arguments.length === 0 || _isPlaceholder(a)) {\n      return f1;\n    } else {\n      return fn.apply(this, arguments);\n    }\n  };\n}","import _curry1 from './_curry1.js';\nimport _isPlaceholder from './_isPlaceholder.js';\n\n/**\n * Optimized internal two-arity curry function.\n *\n * @private\n * @category Function\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nexport default function _curry2(fn) {\n  return function f2(a, b) {\n    switch (arguments.length) {\n      case 0:\n        return f2;\n      case 1:\n        return _isPlaceholder(a) ? f2 : _curry1(function (_b) {\n          return fn(a, _b);\n        });\n      default:\n        return _isPlaceholder(a) && _isPlaceholder(b) ? f2 : _isPlaceholder(a) ? _curry1(function (_a) {\n          return fn(_a, b);\n        }) : _isPlaceholder(b) ? _curry1(function (_b) {\n          return fn(a, _b);\n        }) : fn(a, b);\n    }\n  };\n}","import _arity from './_arity.js';\nimport _curry2 from './_curry2.js';\n\nexport default function _createPartialApplicator(concat) {\n  return _curry2(function (fn, args) {\n    return _arity(Math.max(0, fn.length - args.length), function () {\n      return fn.apply(this, concat(args, arguments));\n    });\n  });\n}","import _concat from './internal/_concat.js';\nimport _createPartialApplicator from './internal/_createPartialApplicator.js';\n\n/**\n * Takes a function `f` and a list of arguments, and returns a function `g`.\n * When applied, `g` returns the result of applying `f` to the arguments\n * provided initially followed by the arguments provided to `g`.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category Function\n * @sig ((a, b, c, ..., n) -> x) -> [a, b, c, ...] -> ((d, e, f, ..., n) -> x)\n * @param {Function} f\n * @param {Array} args\n * @return {Function}\n * @see R.partialRight, R.curry\n * @example\n *\n *      const multiply2 = (a, b) => a * b;\n *      const double = R.partial(multiply2, [2]);\n *      double(2); //=> 4\n *\n *      const greet = (salutation, title, firstName, lastName) =>\n *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';\n *\n *      const sayHello = R.partial(greet, ['Hello']);\n *      const sayHelloToMs = R.partial(sayHello, ['Ms.']);\n *      sayHelloToMs('Jane', 'Jones'); //=> 'Hello, Ms. Jane Jones!'\n * @symb R.partial(f, [a, b])(c, d) = f(a, b, c, d)\n */\nvar partial = /*#__PURE__*/_createPartialApplicator(_concat);\nexport default partial;","export default function _pipe(f, g) {\n  return function () {\n    return g.call(this, f.apply(this, arguments));\n  };\n}","import _curry1 from './_curry1.js';\nimport _curry2 from './_curry2.js';\nimport _isPlaceholder from './_isPlaceholder.js';\n\n/**\n * Optimized internal three-arity curry function.\n *\n * @private\n * @category Function\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nexport default function _curry3(fn) {\n  return function f3(a, b, c) {\n    switch (arguments.length) {\n      case 0:\n        return f3;\n      case 1:\n        return _isPlaceholder(a) ? f3 : _curry2(function (_b, _c) {\n          return fn(a, _b, _c);\n        });\n      case 2:\n        return _isPlaceholder(a) && _isPlaceholder(b) ? f3 : _isPlaceholder(a) ? _curry2(function (_a, _c) {\n          return fn(_a, b, _c);\n        }) : _isPlaceholder(b) ? _curry2(function (_b, _c) {\n          return fn(a, _b, _c);\n        }) : _curry1(function (_c) {\n          return fn(a, b, _c);\n        });\n      default:\n        return _isPlaceholder(a) && _isPlaceholder(b) && _isPlaceholder(c) ? f3 : _isPlaceholder(a) && _isPlaceholder(b) ? _curry2(function (_a, _b) {\n          return fn(_a, _b, c);\n        }) : _isPlaceholder(a) && _isPlaceholder(c) ? _curry2(function (_a, _c) {\n          return fn(_a, b, _c);\n        }) : _isPlaceholder(b) && _isPlaceholder(c) ? _curry2(function (_b, _c) {\n          return fn(a, _b, _c);\n        }) : _isPlaceholder(a) ? _curry1(function (_a) {\n          return fn(_a, b, c);\n        }) : _isPlaceholder(b) ? _curry1(function (_b) {\n          return fn(a, _b, c);\n        }) : _isPlaceholder(c) ? _curry1(function (_c) {\n          return fn(a, b, _c);\n        }) : fn(a, b, c);\n    }\n  };\n}","/**\n * Tests whether or not an object is an array.\n *\n * @private\n * @param {*} val The object to test.\n * @return {Boolean} `true` if `val` is an array, `false` otherwise.\n * @example\n *\n *      _isArray([]); //=> true\n *      _isArray(null); //=> false\n *      _isArray({}); //=> false\n */\nexport default Array.isArray || function _isArray(val) {\n  return val != null && val.length >= 0 && Object.prototype.toString.call(val) === '[object Array]';\n};","export default function _isString(x) {\n  return Object.prototype.toString.call(x) === '[object String]';\n}","import _curry1 from './_curry1.js';\nimport _isArray from './_isArray.js';\nimport _isString from './_isString.js';\n\n/**\n * Tests whether or not an object is similar to an array.\n *\n * @private\n * @category Type\n * @category List\n * @sig * -> Boolean\n * @param {*} x The object to test.\n * @return {Boolean} `true` if `x` has a numeric length property and extreme indices defined; `false` otherwise.\n * @example\n *\n *      _isArrayLike([]); //=> true\n *      _isArrayLike(true); //=> false\n *      _isArrayLike({}); //=> false\n *      _isArrayLike({length: 10}); //=> false\n *      _isArrayLike({0: 'zero', 9: 'nine', length: 10}); //=> true\n */\nvar _isArrayLike = /*#__PURE__*/_curry1(function isArrayLike(x) {\n  if (_isArray(x)) {\n    return true;\n  }\n  if (!x) {\n    return false;\n  }\n  if (typeof x !== 'object') {\n    return false;\n  }\n  if (_isString(x)) {\n    return false;\n  }\n  if (x.nodeType === 1) {\n    return !!x.length;\n  }\n  if (x.length === 0) {\n    return true;\n  }\n  if (x.length > 0) {\n    return x.hasOwnProperty(0) && x.hasOwnProperty(x.length - 1);\n  }\n  return false;\n});\nexport default _isArrayLike;","var XWrap = /*#__PURE__*/function () {\n  function XWrap(fn) {\n    this.f = fn;\n  }\n  XWrap.prototype['@@transducer/init'] = function () {\n    throw new Error('init not implemented on XWrap');\n  };\n  XWrap.prototype['@@transducer/result'] = function (acc) {\n    return acc;\n  };\n  XWrap.prototype['@@transducer/step'] = function (acc, x) {\n    return this.f(acc, x);\n  };\n\n  return XWrap;\n}();\n\nexport default function _xwrap(fn) {\n  return new XWrap(fn);\n}","import _arity from './internal/_arity.js';\nimport _curry2 from './internal/_curry2.js';\n\n/**\n * Creates a function that is bound to a context.\n * Note: `R.bind` does not provide the additional argument-binding capabilities of\n * [Function.prototype.bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind).\n *\n * @func\n * @memberOf R\n * @since v0.6.0\n * @category Function\n * @category Object\n * @sig (* -> *) -> {*} -> (* -> *)\n * @param {Function} fn The function to bind to context\n * @param {Object} thisObj The context to bind `fn` to\n * @return {Function} A function that will execute in the context of `thisObj`.\n * @see R.partial\n * @example\n *\n *      const log = R.bind(console.log, console);\n *      R.pipe(R.assoc('a', 2), R.tap(log), R.assoc('a', 3))({a: 1}); //=> {a: 3}\n *      // logs {a: 2}\n * @symb R.bind(f, o)(a, b) = f.call(o, a, b)\n */\nvar bind = /*#__PURE__*/_curry2(function bind(fn, thisObj) {\n  return _arity(fn.length, function () {\n    return fn.apply(thisObj, arguments);\n  });\n});\nexport default bind;","import _isArrayLike from './_isArrayLike.js';\nimport _xwrap from './_xwrap.js';\nimport bind from '../bind.js';\n\nfunction _arrayReduce(xf, acc, list) {\n  var idx = 0;\n  var len = list.length;\n  while (idx < len) {\n    acc = xf['@@transducer/step'](acc, list[idx]);\n    if (acc && acc['@@transducer/reduced']) {\n      acc = acc['@@transducer/value'];\n      break;\n    }\n    idx += 1;\n  }\n  return xf['@@transducer/result'](acc);\n}\n\nfunction _iterableReduce(xf, acc, iter) {\n  var step = iter.next();\n  while (!step.done) {\n    acc = xf['@@transducer/step'](acc, step.value);\n    if (acc && acc['@@transducer/reduced']) {\n      acc = acc['@@transducer/value'];\n      break;\n    }\n    step = iter.next();\n  }\n  return xf['@@transducer/result'](acc);\n}\n\nfunction _methodReduce(xf, acc, obj, methodName) {\n  return xf['@@transducer/result'](obj[methodName](bind(xf['@@transducer/step'], xf), acc));\n}\n\nvar symIterator = typeof Symbol !== 'undefined' ? Symbol.iterator : '@@iterator';\n\nexport default function _reduce(fn, acc, list) {\n  if (typeof fn === 'function') {\n    fn = _xwrap(fn);\n  }\n  if (_isArrayLike(list)) {\n    return _arrayReduce(fn, acc, list);\n  }\n  if (typeof list['fantasy-land/reduce'] === 'function') {\n    return _methodReduce(fn, acc, list, 'fantasy-land/reduce');\n  }\n  if (list[symIterator] != null) {\n    return _iterableReduce(fn, acc, list[symIterator]());\n  }\n  if (typeof list.next === 'function') {\n    return _iterableReduce(fn, acc, list);\n  }\n  if (typeof list.reduce === 'function') {\n    return _methodReduce(fn, acc, list, 'reduce');\n  }\n\n  throw new TypeError('reduce: list must be array or iterable');\n}","import _curry3 from './internal/_curry3.js';\nimport _reduce from './internal/_reduce.js';\n\n/**\n * Returns a single item by iterating through the list, successively calling\n * the iterator function and passing it an accumulator value and the current\n * value from the array, and then passing the result to the next call.\n *\n * The iterator function receives two values: *(acc, value)*. It may use\n * [`R.reduced`](#reduced) to shortcut the iteration.\n *\n * The arguments' order of [`reduceRight`](#reduceRight)'s iterator function\n * is *(value, acc)*.\n *\n * Note: `R.reduce` does not skip deleted or unassigned indices (sparse\n * arrays), unlike the native `Array.prototype.reduce` method. For more details\n * on this behavior, see:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#Description\n *\n * Dispatches to the `reduce` method of the third argument, if present. When\n * doing so, it is up to the user to handle the [`R.reduced`](#reduced)\n * shortcuting, as this is not implemented by `reduce`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig ((a, b) -> a) -> a -> [b] -> a\n * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n *        current element from the array.\n * @param {*} acc The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.reduced, R.addIndex, R.reduceRight\n * @example\n *\n *      R.reduce(R.subtract, 0, [1, 2, 3, 4]) // => ((((0 - 1) - 2) - 3) - 4) = -10\n *      //          -               -10\n *      //         / \\              / \\\n *      //        -   4           -6   4\n *      //       / \\              / \\\n *      //      -   3   ==>     -3   3\n *      //     / \\              / \\\n *      //    -   2           -1   2\n *      //   / \\              / \\\n *      //  0   1            0   1\n *\n * @symb R.reduce(f, a, [b, c, d]) = f(f(f(a, b), c), d)\n */\nvar reduce = /*#__PURE__*/_curry3(_reduce);\nexport default reduce;","import _isArray from './_isArray.js';\n\n/**\n * This checks whether a function has a [methodname] function. If it isn't an\n * array it will execute that function otherwise it will default to the ramda\n * implementation.\n *\n * @private\n * @param {Function} fn ramda implemtation\n * @param {String} methodname property to check for a custom implementation\n * @return {Object} Whatever the return value of the method is.\n */\nexport default function _checkForMethod(methodname, fn) {\n  return function () {\n    var length = arguments.length;\n    if (length === 0) {\n      return fn();\n    }\n    var obj = arguments[length - 1];\n    return _isArray(obj) || typeof obj[methodname] !== 'function' ? fn.apply(this, arguments) : obj[methodname].apply(obj, Array.prototype.slice.call(arguments, 0, length - 1));\n  };\n}","import _checkForMethod from './internal/_checkForMethod.js';\nimport _curry3 from './internal/_curry3.js';\n\n/**\n * Returns the elements of the given list or string (or object with a `slice`\n * method) from `fromIndex` (inclusive) to `toIndex` (exclusive).\n *\n * Dispatches to the `slice` method of the third argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.4\n * @category List\n * @sig Number -> Number -> [a] -> [a]\n * @sig Number -> Number -> String -> String\n * @param {Number} fromIndex The start index (inclusive).\n * @param {Number} toIndex The end index (exclusive).\n * @param {*} list\n * @return {*}\n * @example\n *\n *      R.slice(1, 3, ['a', 'b', 'c', 'd']);        //=> ['b', 'c']\n *      R.slice(1, Infinity, ['a', 'b', 'c', 'd']); //=> ['b', 'c', 'd']\n *      R.slice(0, -1, ['a', 'b', 'c', 'd']);       //=> ['a', 'b', 'c']\n *      R.slice(-3, -1, ['a', 'b', 'c', 'd']);      //=> ['b', 'c']\n *      R.slice(0, 3, 'ramda');                     //=> 'ram'\n */\nvar slice = /*#__PURE__*/_curry3( /*#__PURE__*/_checkForMethod('slice', function slice(fromIndex, toIndex, list) {\n  return Array.prototype.slice.call(list, fromIndex, toIndex);\n}));\nexport default slice;","import _checkForMethod from './internal/_checkForMethod.js';\nimport _curry1 from './internal/_curry1.js';\nimport slice from './slice.js';\n\n/**\n * Returns all but the first element of the given list or string (or object\n * with a `tail` method).\n *\n * Dispatches to the `slice` method of the first argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [a]\n * @sig String -> String\n * @param {*} list\n * @return {*}\n * @see R.head, R.init, R.last\n * @example\n *\n *      R.tail([1, 2, 3]);  //=> [2, 3]\n *      R.tail([1, 2]);     //=> [2]\n *      R.tail([1]);        //=> []\n *      R.tail([]);         //=> []\n *\n *      R.tail('abc');  //=> 'bc'\n *      R.tail('ab');   //=> 'b'\n *      R.tail('a');    //=> ''\n *      R.tail('');     //=> ''\n */\nvar tail = /*#__PURE__*/_curry1( /*#__PURE__*/_checkForMethod('tail', /*#__PURE__*/slice(1, Infinity)));\nexport default tail;","import _arity from './internal/_arity.js';\nimport _pipe from './internal/_pipe.js';\nimport reduce from './reduce.js';\nimport tail from './tail.js';\n\n/**\n * Performs left-to-right function composition. The leftmost function may have\n * any arity; the remaining functions must be unary.\n *\n * In some libraries this function is named `sequence`.\n *\n * **Note:** The result of pipe is not automatically curried.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)) -> ((a, b, ..., n) -> z)\n * @param {...Function} functions\n * @return {Function}\n * @see R.compose\n * @example\n *\n *      const f = R.pipe(Math.pow, R.negate, R.inc);\n *\n *      f(3, 4); // -(3^4) + 1\n * @symb R.pipe(f, g, h)(a, b) = h(g(f(a, b)))\n */\nexport default function pipe() {\n  if (arguments.length === 0) {\n    throw new Error('pipe requires at least one argument');\n  }\n  return _arity(arguments[0].length, reduce(_pipe, arguments[0], tail(arguments)));\n}","import _arity from './internal/_arity.js';\nimport _curry1 from './internal/_curry1.js';\nimport _curry2 from './internal/_curry2.js';\nimport _curryN from './internal/_curryN.js';\n\n/**\n * Returns a curried equivalent of the provided function, with the specified\n * arity. The curried function has two unusual capabilities. First, its\n * arguments needn't be provided one at a time. If `g` is `R.curryN(3, f)`, the\n * following are equivalent:\n *\n *   - `g(1)(2)(3)`\n *   - `g(1)(2, 3)`\n *   - `g(1, 2)(3)`\n *   - `g(1, 2, 3)`\n *\n * Secondly, the special placeholder value [`R.__`](#__) may be used to specify\n * \"gaps\", allowing partial application of any combination of arguments,\n * regardless of their positions. If `g` is as above and `_` is [`R.__`](#__),\n * the following are equivalent:\n *\n *   - `g(1, 2, 3)`\n *   - `g(_, 2, 3)(1)`\n *   - `g(_, _, 3)(1)(2)`\n *   - `g(_, _, 3)(1, 2)`\n *   - `g(_, 2)(1)(3)`\n *   - `g(_, 2)(1, 3)`\n *   - `g(_, 2)(_, 3)(1)`\n *\n * @func\n * @memberOf R\n * @since v0.5.0\n * @category Function\n * @sig Number -> (* -> a) -> (* -> a)\n * @param {Number} length The arity for the returned function.\n * @param {Function} fn The function to curry.\n * @return {Function} A new, curried function.\n * @see R.curry\n * @example\n *\n *      const sumArgs = (...args) => R.sum(args);\n *\n *      const curriedAddFourNumbers = R.curryN(4, sumArgs);\n *      const f = curriedAddFourNumbers(1, 2);\n *      const g = f(3);\n *      g(4); //=> 10\n */\nvar curryN = /*#__PURE__*/_curry2(function curryN(length, fn) {\n  if (length === 1) {\n    return _curry1(fn);\n  }\n  return _arity(length, _curryN(length, [], fn));\n});\nexport default curryN;","import _arity from './_arity.js';\nimport _isPlaceholder from './_isPlaceholder.js';\n\n/**\n * Internal curryN function.\n *\n * @private\n * @category Function\n * @param {Number} length The arity of the curried function.\n * @param {Array} received An array of arguments received thus far.\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nexport default function _curryN(length, received, fn) {\n  return function () {\n    var combined = [];\n    var argsIdx = 0;\n    var left = length;\n    var combinedIdx = 0;\n    while (combinedIdx < received.length || argsIdx < arguments.length) {\n      var result;\n      if (combinedIdx < received.length && (!_isPlaceholder(received[combinedIdx]) || argsIdx >= arguments.length)) {\n        result = received[combinedIdx];\n      } else {\n        result = arguments[argsIdx];\n        argsIdx += 1;\n      }\n      combined[combinedIdx] = result;\n      if (!_isPlaceholder(result)) {\n        left -= 1;\n      }\n      combinedIdx += 1;\n    }\n    return left <= 0 ? fn.apply(this, combined) : _arity(left, _curryN(length, combined, fn));\n  };\n}","import _curry2 from './internal/_curry2.js';\nimport _isString from './internal/_isString.js';\n\n/**\n * Returns the nth element of the given list or string. If n is negative the\n * element at index length + n is returned.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Number -> [a] -> a | Undefined\n * @sig Number -> String -> String\n * @param {Number} offset\n * @param {*} list\n * @return {*}\n * @example\n *\n *      const list = ['foo', 'bar', 'baz', 'quux'];\n *      R.nth(1, list); //=> 'bar'\n *      R.nth(-1, list); //=> 'quux'\n *      R.nth(-99, list); //=> undefined\n *\n *      R.nth(2, 'abc'); //=> 'c'\n *      R.nth(3, 'abc'); //=> ''\n * @symb R.nth(-1, [a, b, c]) = c\n * @symb R.nth(0, [a, b, c]) = a\n * @symb R.nth(1, [a, b, c]) = b\n */\nvar nth = /*#__PURE__*/_curry2(function nth(offset, list) {\n  var idx = offset < 0 ? list.length + offset : offset;\n  return _isString(list) ? list.charAt(idx) : list[idx];\n});\nexport default nth;","import _curry1 from './internal/_curry1.js';\nimport curryN from './curryN.js';\nimport nth from './nth.js';\n\n/**\n * Returns a function which returns its nth argument.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Function\n * @sig Number -> *... -> *\n * @param {Number} n\n * @return {Function}\n * @example\n *\n *      R.nthArg(1)('a', 'b', 'c'); //=> 'b'\n *      R.nthArg(-1)('a', 'b', 'c'); //=> 'c'\n * @symb R.nthArg(-1)(a, b, c) = c\n * @symb R.nthArg(0)(a, b, c) = a\n * @symb R.nthArg(1)(a, b, c) = b\n */\nvar nthArg = /*#__PURE__*/_curry1(function nthArg(n) {\n  var arity = n < 0 ? 1 : n + 1;\n  return curryN(arity, function () {\n    return nth(n, arguments);\n  });\n});\nexport default nthArg;","export default function _of(x) {\n  return [x];\n}","import _curry1 from './internal/_curry1.js';\nimport _of from './internal/_of.js';\n\n/**\n * Returns a singleton array containing the value provided.\n *\n * Note this `of` is different from the ES6 `of`; See\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category Function\n * @sig a -> [a]\n * @param {*} x any value\n * @return {Array} An array wrapping `x`.\n * @example\n *\n *      R.of(null); //=> [null]\n *      R.of([42]); //=> [[42]]\n */\nvar of = /*#__PURE__*/_curry1(_of);\nexport default of;","export default function _isTransformer(obj) {\n  return obj != null && typeof obj['@@transducer/step'] === 'function';\n}","import _isArray from './_isArray.js';\nimport _isTransformer from './_isTransformer.js';\n\n/**\n * Returns a function that dispatches with different strategies based on the\n * object in list position (last argument). If it is an array, executes [fn].\n * Otherwise, if it has a function with one of the given method names, it will\n * execute that function (functor case). Otherwise, if it is a transformer,\n * uses transducer [xf] to return a new transformer (transducer case).\n * Otherwise, it will default to executing [fn].\n *\n * @private\n * @param {Array} methodNames properties to check for a custom implementation\n * @param {Function} xf transducer to initialize if object is transformer\n * @param {Function} fn default ramda implementation\n * @return {Function} A function that dispatches on object in list position\n */\nexport default function _dispatchable(methodNames, xf, fn) {\n  return function () {\n    if (arguments.length === 0) {\n      return fn();\n    }\n    var args = Array.prototype.slice.call(arguments, 0);\n    var obj = args.pop();\n    if (!_isArray(obj)) {\n      var idx = 0;\n      while (idx < methodNames.length) {\n        if (typeof obj[methodNames[idx]] === 'function') {\n          return obj[methodNames[idx]].apply(obj, args);\n        }\n        idx += 1;\n      }\n      if (_isTransformer(obj)) {\n        var transducer = xf.apply(null, args);\n        return transducer(obj);\n      }\n    }\n    return fn.apply(this, arguments);\n  };\n}","export default function _map(fn, functor) {\n  var idx = 0;\n  var len = functor.length;\n  var result = Array(len);\n  while (idx < len) {\n    result[idx] = fn(functor[idx]);\n    idx += 1;\n  }\n  return result;\n}","export default {\n  init: function () {\n    return this.xf['@@transducer/init']();\n  },\n  result: function (result) {\n    return this.xf['@@transducer/result'](result);\n  }\n};","import _curry2 from './_curry2.js';\nimport _xfBase from './_xfBase.js';\n\nvar XMap = /*#__PURE__*/function () {\n  function XMap(f, xf) {\n    this.xf = xf;\n    this.f = f;\n  }\n  XMap.prototype['@@transducer/init'] = _xfBase.init;\n  XMap.prototype['@@transducer/result'] = _xfBase.result;\n  XMap.prototype['@@transducer/step'] = function (result, input) {\n    return this.xf['@@transducer/step'](result, this.f(input));\n  };\n\n  return XMap;\n}();\n\nvar _xmap = /*#__PURE__*/_curry2(function _xmap(f, xf) {\n  return new XMap(f, xf);\n});\nexport default _xmap;","export default function _has(prop, obj) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}","import _has from './_has.js';\n\nvar toString = Object.prototype.toString;\nvar _isArguments = /*#__PURE__*/function () {\n  return toString.call(arguments) === '[object Arguments]' ? function _isArguments(x) {\n    return toString.call(x) === '[object Arguments]';\n  } : function _isArguments(x) {\n    return _has('callee', x);\n  };\n}();\n\nexport default _isArguments;","import _curry1 from './internal/_curry1.js';\nimport _has from './internal/_has.js';\nimport _isArguments from './internal/_isArguments.js';\n\n// cover IE < 9 keys issues\nvar hasEnumBug = ! /*#__PURE__*/{ toString: null }.propertyIsEnumerable('toString');\nvar nonEnumerableProps = ['constructor', 'valueOf', 'isPrototypeOf', 'toString', 'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];\n// Safari bug\nvar hasArgsEnumBug = /*#__PURE__*/function () {\n  'use strict';\n\n  return arguments.propertyIsEnumerable('length');\n}();\n\nvar contains = function contains(list, item) {\n  var idx = 0;\n  while (idx < list.length) {\n    if (list[idx] === item) {\n      return true;\n    }\n    idx += 1;\n  }\n  return false;\n};\n\n/**\n * Returns a list containing the names of all the enumerable own properties of\n * the supplied object.\n * Note that the order of the output array is not guaranteed to be consistent\n * across different JS platforms.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig {k: v} -> [k]\n * @param {Object} obj The object to extract properties from\n * @return {Array} An array of the object's own properties.\n * @see R.keysIn, R.values\n * @example\n *\n *      R.keys({a: 1, b: 2, c: 3}); //=> ['a', 'b', 'c']\n */\nvar keys = typeof Object.keys === 'function' && !hasArgsEnumBug ? /*#__PURE__*/_curry1(function keys(obj) {\n  return Object(obj) !== obj ? [] : Object.keys(obj);\n}) : /*#__PURE__*/_curry1(function keys(obj) {\n  if (Object(obj) !== obj) {\n    return [];\n  }\n  var prop, nIdx;\n  var ks = [];\n  var checkArgsLength = hasArgsEnumBug && _isArguments(obj);\n  for (prop in obj) {\n    if (_has(prop, obj) && (!checkArgsLength || prop !== 'length')) {\n      ks[ks.length] = prop;\n    }\n  }\n  if (hasEnumBug) {\n    nIdx = nonEnumerableProps.length - 1;\n    while (nIdx >= 0) {\n      prop = nonEnumerableProps[nIdx];\n      if (_has(prop, obj) && !contains(ks, prop)) {\n        ks[ks.length] = prop;\n      }\n      nIdx -= 1;\n    }\n  }\n  return ks;\n});\nexport default keys;","import _curry2 from './internal/_curry2.js';\nimport _dispatchable from './internal/_dispatchable.js';\nimport _map from './internal/_map.js';\nimport _reduce from './internal/_reduce.js';\nimport _xmap from './internal/_xmap.js';\nimport curryN from './curryN.js';\nimport keys from './keys.js';\n\n/**\n * Takes a function and\n * a [functor](https://github.com/fantasyland/fantasy-land#functor),\n * applies the function to each of the functor's values, and returns\n * a functor of the same shape.\n *\n * Ramda provides suitable `map` implementations for `Array` and `Object`,\n * so this function may be applied to `[1, 2, 3]` or `{x: 1, y: 2, z: 3}`.\n *\n * Dispatches to the `map` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * Also treats functions as functors and will compose them together.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Functor f => (a -> b) -> f a -> f b\n * @param {Function} fn The function to be called on every element of the input `list`.\n * @param {Array} list The list to be iterated over.\n * @return {Array} The new list.\n * @see R.transduce, R.addIndex\n * @example\n *\n *      const double = x => x * 2;\n *\n *      R.map(double, [1, 2, 3]); //=> [2, 4, 6]\n *\n *      R.map(double, {x: 1, y: 2, z: 3}); //=> {x: 2, y: 4, z: 6}\n * @symb R.map(f, [a, b]) = [f(a), f(b)]\n * @symb R.map(f, { x: a, y: b }) = { x: f(a), y: f(b) }\n * @symb R.map(f, functor_o) = functor_o.map(f)\n */\nvar map = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable(['fantasy-land/map', 'map'], _xmap, function map(fn, functor) {\n  switch (Object.prototype.toString.call(functor)) {\n    case '[object Function]':\n      return curryN(functor.length, function () {\n        return fn.call(this, functor.apply(this, arguments));\n      });\n    case '[object Object]':\n      return _reduce(function (acc, key) {\n        acc[key] = fn(functor[key]);\n        return acc;\n      }, {}, keys(functor));\n    default:\n      return _map(fn, functor);\n  }\n}));\nexport default map;","import _concat from './internal/_concat.js';\nimport _curry2 from './internal/_curry2.js';\nimport _reduce from './internal/_reduce.js';\nimport map from './map.js';\n\n/**\n * ap applies a list of functions to a list of values.\n *\n * Dispatches to the `ap` method of the second argument, if present. Also\n * treats curried functions as applicatives.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category Function\n * @sig [a -> b] -> [a] -> [b]\n * @sig Apply f => f (a -> b) -> f a -> f b\n * @sig (r -> a -> b) -> (r -> a) -> (r -> b)\n * @param {*} applyF\n * @param {*} applyX\n * @return {*}\n * @example\n *\n *      R.ap([R.multiply(2), R.add(3)], [1,2,3]); //=> [2, 4, 6, 4, 5, 6]\n *      R.ap([R.concat('tasty '), R.toUpper], ['pizza', 'salad']); //=> [\"tasty pizza\", \"tasty salad\", \"PIZZA\", \"SALAD\"]\n *\n *      // R.ap can also be used as S combinator\n *      // when only two functions are passed\n *      R.ap(R.concat, R.toUpper)('Ramda') //=> 'RamdaRAMDA'\n * @symb R.ap([f, g], [a, b]) = [f(a), f(b), g(a), g(b)]\n */\nvar ap = /*#__PURE__*/_curry2(function ap(applyF, applyX) {\n  return typeof applyX['fantasy-land/ap'] === 'function' ? applyX['fantasy-land/ap'](applyF) : typeof applyF.ap === 'function' ? applyF.ap(applyX) : typeof applyF === 'function' ? function (x) {\n    return applyF(x)(applyX(x));\n  } : _reduce(function (acc, f) {\n    return _concat(acc, map(f, applyX));\n  }, [], applyF);\n});\nexport default ap;","import _curry1 from './internal/_curry1.js';\n\n/**\n * Returns a function that always returns the given value. Note that for\n * non-primitives the value returned is a reference to the original value.\n *\n * This function is known as `const`, `constant`, or `K` (for K combinator) in\n * other languages and libraries.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig a -> (* -> a)\n * @param {*} val The value to wrap in a function\n * @return {Function} A Function :: * -> val.\n * @example\n *\n *      const t = R.always('Tee');\n *      t(); //=> 'Tee'\n */\nvar always = /*#__PURE__*/_curry1(function always(val) {\n  return function () {\n    return val;\n  };\n});\nexport default always;","import _curry2 from './internal/_curry2.js';\n\n/**\n * Returns the larger of its two arguments.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig Ord a => a -> a -> a\n * @param {*} a\n * @param {*} b\n * @return {*}\n * @see R.maxBy, R.min\n * @example\n *\n *      R.max(789, 123); //=> 789\n *      R.max('a', 'b'); //=> 'b'\n */\nvar max = /*#__PURE__*/_curry2(function max(a, b) {\n  return b > a ? b : a;\n});\nexport default max;","import _arity from './internal/_arity.js';\nimport _curry1 from './internal/_curry1.js';\nimport map from './map.js';\nimport max from './max.js';\nimport reduce from './reduce.js';\n\n/**\n * Returns a function, `fn`, which encapsulates `if/else, if/else, ...` logic.\n * `R.cond` takes a list of [predicate, transformer] pairs. All of the arguments\n * to `fn` are applied to each of the predicates in turn until one returns a\n * \"truthy\" value, at which point `fn` returns the result of applying its\n * arguments to the corresponding transformer. If none of the predicates\n * matches, `fn` returns undefined.\n *\n * @func\n * @memberOf R\n * @since v0.6.0\n * @category Logic\n * @sig [[(*... -> Boolean),(*... -> *)]] -> (*... -> *)\n * @param {Array} pairs A list of [predicate, transformer]\n * @return {Function}\n * @see R.ifElse, R.unless, R.when\n * @example\n *\n *      const fn = R.cond([\n *        [R.equals(0),   R.always('water freezes at 0°C')],\n *        [R.equals(100), R.always('water boils at 100°C')],\n *        [R.T,           temp => 'nothing special happens at ' + temp + '°C']\n *      ]);\n *      fn(0); //=> 'water freezes at 0°C'\n *      fn(50); //=> 'nothing special happens at 50°C'\n *      fn(100); //=> 'water boils at 100°C'\n */\nvar cond = /*#__PURE__*/_curry1(function cond(pairs) {\n  var arity = reduce(max, 0, map(function (pair) {\n    return pair[0].length;\n  }, pairs));\n  return _arity(arity, function () {\n    var idx = 0;\n    while (idx < pairs.length) {\n      if (pairs[idx][0].apply(this, arguments)) {\n        return pairs[idx][1].apply(this, arguments);\n      }\n      idx += 1;\n    }\n  });\n});\nexport default cond;","import _curry1 from './internal/_curry1.js';\nimport curryN from './curryN.js';\n\n/**\n * Returns a new function much like the supplied one, except that the first two\n * arguments' order is reversed.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig ((a, b, c, ...) -> z) -> (b -> a -> c -> ... -> z)\n * @param {Function} fn The function to invoke with its first two parameters reversed.\n * @return {*} The result of invoking `fn` with its first two parameters' order reversed.\n * @example\n *\n *      const mergeThree = (a, b, c) => [].concat(a, b, c);\n *\n *      mergeThree(1, 2, 3); //=> [1, 2, 3]\n *\n *      R.flip(mergeThree)(1, 2, 3); //=> [2, 1, 3]\n * @symb R.flip(f)(a, b, c) = f(b, a, c)\n */\nvar flip = /*#__PURE__*/_curry1(function flip(fn) {\n  return curryN(fn.length, function (a, b) {\n    var args = Array.prototype.slice.call(arguments, 0);\n    args[0] = b;\n    args[1] = a;\n    return fn.apply(this, args);\n  });\n});\nexport default flip;","import _concat from './internal/_concat.js';\nimport _createPartialApplicator from './internal/_createPartialApplicator.js';\nimport flip from './flip.js';\n\n/**\n * Takes a function `f` and a list of arguments, and returns a function `g`.\n * When applied, `g` returns the result of applying `f` to the arguments\n * provided to `g` followed by the arguments provided initially.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category Function\n * @sig ((a, b, c, ..., n) -> x) -> [d, e, f, ..., n] -> ((a, b, c, ...) -> x)\n * @param {Function} f\n * @param {Array} args\n * @return {Function}\n * @see R.partial\n * @example\n *\n *      const greet = (salutation, title, firstName, lastName) =>\n *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';\n *\n *      const greetMsJaneJones = R.partialRight(greet, ['Ms.', 'Jane', 'Jones']);\n *\n *      greetMsJaneJones('Hello'); //=> 'Hello, Ms. Jane Jones!'\n * @symb R.partialRight(f, [a, b])(c, d) = f(c, d, a, b)\n */\nvar partialRight = /*#__PURE__*/_createPartialApplicator( /*#__PURE__*/flip(_concat));\nexport default partialRight;","\n\n/**\n * A function that always returns `true`. Any passed in parameters are ignored.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Function\n * @sig * -> Boolean\n * @param {*}\n * @return {Boolean}\n * @see R.F\n * @example\n *\n *      R.T(); //=> true\n */\nvar T = function () {\n  return true;\n};\nexport default T;","import _curry2 from './internal/_curry2.js';\n\n/**\n * Calls an input function `n` times, returning an array containing the results\n * of those function calls.\n *\n * `fn` is passed one argument: The current value of `n`, which begins at `0`\n * and is gradually incremented to `n - 1`.\n *\n * @func\n * @memberOf R\n * @since v0.2.3\n * @category List\n * @sig (Number -> a) -> Number -> [a]\n * @param {Function} fn The function to invoke. Passed one argument, the current value of `n`.\n * @param {Number} n A value between `0` and `n - 1`. Increments after each function call.\n * @return {Array} An array containing the return values of all calls to `fn`.\n * @see R.repeat\n * @example\n *\n *      R.times(R.identity, 5); //=> [0, 1, 2, 3, 4]\n * @symb R.times(f, 0) = []\n * @symb R.times(f, 1) = [f(0)]\n * @symb R.times(f, 2) = [f(0), f(1)]\n */\nvar times = /*#__PURE__*/_curry2(function times(fn, n) {\n  var len = Number(n);\n  var idx = 0;\n  var list;\n\n  if (len < 0 || isNaN(len)) {\n    throw new RangeError('n must be a non-negative number');\n  }\n  list = new Array(len);\n  while (idx < len) {\n    list[idx] = fn(idx);\n    idx += 1;\n  }\n  return list;\n});\nexport default times;","export default function _arrayFromIterator(iter) {\n  var list = [];\n  var next;\n  while (!(next = iter.next()).done) {\n    list.push(next.value);\n  }\n  return list;\n}","export default function _includesWith(pred, x, list) {\n  var idx = 0;\n  var len = list.length;\n\n  while (idx < len) {\n    if (pred(x, list[idx])) {\n      return true;\n    }\n    idx += 1;\n  }\n  return false;\n}","// Based on https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\nfunction _objectIs(a, b) {\n  // SameValue algorithm\n  if (a === b) {\n    // Steps 1-5, 7-10\n    // Steps 6.b-6.e: +0 != -0\n    return a !== 0 || 1 / a === 1 / b;\n  } else {\n    // Step 6.a: NaN == NaN\n    return a !== a && b !== b;\n  }\n}\n\nexport default typeof Object.is === 'function' ? Object.is : _objectIs;","import _curry1 from './internal/_curry1.js';\n\n/**\n * Gives a single-word string description of the (native) type of a value,\n * returning such answers as 'Object', 'Number', 'Array', or 'Null'. Does not\n * attempt to distinguish user Object types any further, reporting them all as\n * 'Object'.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Type\n * @sig (* -> {*}) -> String\n * @param {*} val The value to test\n * @return {String}\n * @example\n *\n *      R.type({}); //=> \"Object\"\n *      R.type(1); //=> \"Number\"\n *      R.type(false); //=> \"Boolean\"\n *      R.type('s'); //=> \"String\"\n *      R.type(null); //=> \"Null\"\n *      R.type([]); //=> \"Array\"\n *      R.type(/[A-z]/); //=> \"RegExp\"\n *      R.type(() => {}); //=> \"Function\"\n *      R.type(undefined); //=> \"Undefined\"\n */\nvar type = /*#__PURE__*/_curry1(function type(val) {\n  return val === null ? 'Null' : val === undefined ? 'Undefined' : Object.prototype.toString.call(val).slice(8, -1);\n});\nexport default type;","import _arrayFromIterator from './_arrayFromIterator.js';\nimport _includesWith from './_includesWith.js';\nimport _functionName from './_functionName.js';\nimport _has from './_has.js';\nimport _objectIs from './_objectIs.js';\nimport keys from '../keys.js';\nimport type from '../type.js';\n\n/**\n * private _uniqContentEquals function.\n * That function is checking equality of 2 iterator contents with 2 assumptions\n * - iterators lengths are the same\n * - iterators values are unique\n *\n * false-positive result will be returned for comparision of, e.g.\n * - [1,2,3] and [1,2,3,4]\n * - [1,1,1] and [1,2,3]\n * */\n\nfunction _uniqContentEquals(aIterator, bIterator, stackA, stackB) {\n  var a = _arrayFromIterator(aIterator);\n  var b = _arrayFromIterator(bIterator);\n\n  function eq(_a, _b) {\n    return _equals(_a, _b, stackA.slice(), stackB.slice());\n  }\n\n  // if *a* array contains any element that is not included in *b*\n  return !_includesWith(function (b, aItem) {\n    return !_includesWith(eq, aItem, b);\n  }, b, a);\n}\n\nexport default function _equals(a, b, stackA, stackB) {\n  if (_objectIs(a, b)) {\n    return true;\n  }\n\n  var typeA = type(a);\n\n  if (typeA !== type(b)) {\n    return false;\n  }\n\n  if (a == null || b == null) {\n    return false;\n  }\n\n  if (typeof a['fantasy-land/equals'] === 'function' || typeof b['fantasy-land/equals'] === 'function') {\n    return typeof a['fantasy-land/equals'] === 'function' && a['fantasy-land/equals'](b) && typeof b['fantasy-land/equals'] === 'function' && b['fantasy-land/equals'](a);\n  }\n\n  if (typeof a.equals === 'function' || typeof b.equals === 'function') {\n    return typeof a.equals === 'function' && a.equals(b) && typeof b.equals === 'function' && b.equals(a);\n  }\n\n  switch (typeA) {\n    case 'Arguments':\n    case 'Array':\n    case 'Object':\n      if (typeof a.constructor === 'function' && _functionName(a.constructor) === 'Promise') {\n        return a === b;\n      }\n      break;\n    case 'Boolean':\n    case 'Number':\n    case 'String':\n      if (!(typeof a === typeof b && _objectIs(a.valueOf(), b.valueOf()))) {\n        return false;\n      }\n      break;\n    case 'Date':\n      if (!_objectIs(a.valueOf(), b.valueOf())) {\n        return false;\n      }\n      break;\n    case 'Error':\n      return a.name === b.name && a.message === b.message;\n    case 'RegExp':\n      if (!(a.source === b.source && a.global === b.global && a.ignoreCase === b.ignoreCase && a.multiline === b.multiline && a.sticky === b.sticky && a.unicode === b.unicode)) {\n        return false;\n      }\n      break;\n  }\n\n  var idx = stackA.length - 1;\n  while (idx >= 0) {\n    if (stackA[idx] === a) {\n      return stackB[idx] === b;\n    }\n    idx -= 1;\n  }\n\n  switch (typeA) {\n    case 'Map':\n      if (a.size !== b.size) {\n        return false;\n      }\n\n      return _uniqContentEquals(a.entries(), b.entries(), stackA.concat([a]), stackB.concat([b]));\n    case 'Set':\n      if (a.size !== b.size) {\n        return false;\n      }\n\n      return _uniqContentEquals(a.values(), b.values(), stackA.concat([a]), stackB.concat([b]));\n    case 'Arguments':\n    case 'Array':\n    case 'Object':\n    case 'Boolean':\n    case 'Number':\n    case 'String':\n    case 'Date':\n    case 'Error':\n    case 'RegExp':\n    case 'Int8Array':\n    case 'Uint8Array':\n    case 'Uint8ClampedArray':\n    case 'Int16Array':\n    case 'Uint16Array':\n    case 'Int32Array':\n    case 'Uint32Array':\n    case 'Float32Array':\n    case 'Float64Array':\n    case 'ArrayBuffer':\n      break;\n    default:\n      // Values of other types are only equal if identical.\n      return false;\n  }\n\n  var keysA = keys(a);\n  if (keysA.length !== keys(b).length) {\n    return false;\n  }\n\n  var extendedStackA = stackA.concat([a]);\n  var extendedStackB = stackB.concat([b]);\n\n  idx = keysA.length - 1;\n  while (idx >= 0) {\n    var key = keysA[idx];\n    if (!(_has(key, b) && _equals(b[key], a[key], extendedStackA, extendedStackB))) {\n      return false;\n    }\n    idx -= 1;\n  }\n  return true;\n}","export default function _functionName(f) {\n  // String(x => x) evaluates to \"x => x\", so the pattern may not match.\n  var match = String(f).match(/^function (\\w*)/);\n  return match == null ? '' : match[1];\n}","import _curry2 from './internal/_curry2.js';\nimport _equals from './internal/_equals.js';\n\n/**\n * Returns `true` if its arguments are equivalent, `false` otherwise. Handles\n * cyclical data structures.\n *\n * Dispatches symmetrically to the `equals` methods of both arguments, if\n * present.\n *\n * @func\n * @memberOf R\n * @since v0.15.0\n * @category Relation\n * @sig a -> b -> Boolean\n * @param {*} a\n * @param {*} b\n * @return {Boolean}\n * @example\n *\n *      R.equals(1, 1); //=> true\n *      R.equals(1, '1'); //=> false\n *      R.equals([1, 2, 3], [1, 2, 3]); //=> true\n *\n *      const a = {}; a.v = a;\n *      const b = {}; b.v = b;\n *      R.equals(a, b); //=> true\n */\nvar equals = /*#__PURE__*/_curry2(function equals(a, b) {\n  return _equals(a, b, [], []);\n});\nexport default equals;","import _curry2 from './_curry2.js';\nimport _reduced from './_reduced.js';\nimport _xfBase from './_xfBase.js';\n\nvar XTake = /*#__PURE__*/function () {\n  function XTake(n, xf) {\n    this.xf = xf;\n    this.n = n;\n    this.i = 0;\n  }\n  XTake.prototype['@@transducer/init'] = _xfBase.init;\n  XTake.prototype['@@transducer/result'] = _xfBase.result;\n  XTake.prototype['@@transducer/step'] = function (result, input) {\n    this.i += 1;\n    var ret = this.n === 0 ? result : this.xf['@@transducer/step'](result, input);\n    return this.n >= 0 && this.i >= this.n ? _reduced(ret) : ret;\n  };\n\n  return XTake;\n}();\n\nvar _xtake = /*#__PURE__*/_curry2(function _xtake(n, xf) {\n  return new XTake(n, xf);\n});\nexport default _xtake;","export default function _reduced(x) {\n  return x && x['@@transducer/reduced'] ? x : {\n    '@@transducer/value': x,\n    '@@transducer/reduced': true\n  };\n}","import _curry2 from './internal/_curry2.js';\nimport _dispatchable from './internal/_dispatchable.js';\nimport _xtake from './internal/_xtake.js';\nimport slice from './slice.js';\n\n/**\n * Returns the first `n` elements of the given list, string, or\n * transducer/transformer (or object with a `take` method).\n *\n * Dispatches to the `take` method of the second argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Number -> [a] -> [a]\n * @sig Number -> String -> String\n * @param {Number} n\n * @param {*} list\n * @return {*}\n * @see R.drop\n * @example\n *\n *      R.take(1, ['foo', 'bar', 'baz']); //=> ['foo']\n *      R.take(2, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']\n *      R.take(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n *      R.take(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n *      R.take(3, 'ramda');               //=> 'ram'\n *\n *      const personnel = [\n *        'Dave Brubeck',\n *        'Paul Desmond',\n *        'Eugene Wright',\n *        'Joe Morello',\n *        'Gerry Mulligan',\n *        'Bob Bates',\n *        'Joe Dodge',\n *        'Ron Crotty'\n *      ];\n *\n *      const takeFive = R.take(5);\n *      takeFive(personnel);\n *      //=> ['Dave Brubeck', 'Paul Desmond', 'Eugene Wright', 'Joe Morello', 'Gerry Mulligan']\n * @symb R.take(-1, [a, b]) = [a, b]\n * @symb R.take(0, [a, b]) = []\n * @symb R.take(1, [a, b]) = [a]\n * @symb R.take(2, [a, b]) = [a, b]\n */\nvar take = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable(['take'], _xtake, function take(n, xs) {\n  return slice(0, n < 0 ? Infinity : n, xs);\n}));\nexport default take;","import _curry2 from './internal/_curry2.js';\nimport equals from './equals.js';\nimport take from './take.js';\n\n/**\n * Checks if a list starts with the provided sublist.\n *\n * Similarly, checks if a string starts with the provided substring.\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category List\n * @sig [a] -> [a] -> Boolean\n * @sig String -> String -> Boolean\n * @param {*} prefix\n * @param {*} list\n * @return {Boolean}\n * @see R.endsWith\n * @example\n *\n *      R.startsWith('a', 'abc')                //=> true\n *      R.startsWith('b', 'abc')                //=> false\n *      R.startsWith(['a'], ['a', 'b', 'c'])    //=> true\n *      R.startsWith(['b'], ['a', 'b', 'c'])    //=> false\n */\nvar startsWith = /*#__PURE__*/_curry2(function (prefix, list) {\n  return equals(take(prefix.length, list), prefix);\n});\nexport default startsWith;","export default function _identity(x) {\n  return x;\n}","import _curry1 from './internal/_curry1.js';\nimport _identity from './internal/_identity.js';\n\n/**\n * A function that does nothing but return the parameter supplied to it. Good\n * as a default or placeholder function.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig a -> a\n * @param {*} x The value to return.\n * @return {*} The input value, `x`.\n * @example\n *\n *      R.identity(1); //=> 1\n *\n *      const obj = {};\n *      R.identity(obj) === obj; //=> true\n * @symb R.identity(a) = a\n */\nvar identity = /*#__PURE__*/_curry1(_identity);\nexport default identity;","import _curry2 from './internal/_curry2.js';\nimport slice from './slice.js';\n\n/**\n * Splits a collection into slices of the specified length.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig Number -> [a] -> [[a]]\n * @sig Number -> String -> [String]\n * @param {Number} n\n * @param {Array} list\n * @return {Array}\n * @example\n *\n *      R.splitEvery(3, [1, 2, 3, 4, 5, 6, 7]); //=> [[1, 2, 3], [4, 5, 6], [7]]\n *      R.splitEvery(3, 'foobarbaz'); //=> ['foo', 'bar', 'baz']\n */\nvar splitEvery = /*#__PURE__*/_curry2(function splitEvery(n, list) {\n  if (n <= 0) {\n    throw new Error('First argument to splitEvery must be a positive integer');\n  }\n  var result = [];\n  var idx = 0;\n  while (idx < list.length) {\n    result.push(slice(idx, idx += n, list));\n  }\n  return result;\n});\nexport default splitEvery;","import _curry2 from './internal/_curry2.js';\n\n/**\n * Wraps a function of any arity (including nullary) in a function that accepts\n * exactly `n` parameters. Any extraneous parameters will not be passed to the\n * supplied function.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig Number -> (* -> a) -> (* -> a)\n * @param {Number} n The desired arity of the new function.\n * @param {Function} fn The function to wrap.\n * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of\n *         arity `n`.\n * @see R.binary, R.unary\n * @example\n *\n *      const takesTwoArgs = (a, b) => [a, b];\n *\n *      takesTwoArgs.length; //=> 2\n *      takesTwoArgs(1, 2); //=> [1, 2]\n *\n *      const takesOneArg = R.nAry(1, takesTwoArgs);\n *      takesOneArg.length; //=> 1\n *      // Only `n` arguments are passed to the wrapped function\n *      takesOneArg(1, 2); //=> [1, undefined]\n * @symb R.nAry(0, f)(a, b) = f()\n * @symb R.nAry(1, f)(a, b) = f(a)\n * @symb R.nAry(2, f)(a, b) = f(a, b)\n */\nvar nAry = /*#__PURE__*/_curry2(function nAry(n, fn) {\n  switch (n) {\n    case 0:\n      return function () {\n        return fn.call(this);\n      };\n    case 1:\n      return function (a0) {\n        return fn.call(this, a0);\n      };\n    case 2:\n      return function (a0, a1) {\n        return fn.call(this, a0, a1);\n      };\n    case 3:\n      return function (a0, a1, a2) {\n        return fn.call(this, a0, a1, a2);\n      };\n    case 4:\n      return function (a0, a1, a2, a3) {\n        return fn.call(this, a0, a1, a2, a3);\n      };\n    case 5:\n      return function (a0, a1, a2, a3, a4) {\n        return fn.call(this, a0, a1, a2, a3, a4);\n      };\n    case 6:\n      return function (a0, a1, a2, a3, a4, a5) {\n        return fn.call(this, a0, a1, a2, a3, a4, a5);\n      };\n    case 7:\n      return function (a0, a1, a2, a3, a4, a5, a6) {\n        return fn.call(this, a0, a1, a2, a3, a4, a5, a6);\n      };\n    case 8:\n      return function (a0, a1, a2, a3, a4, a5, a6, a7) {\n        return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7);\n      };\n    case 9:\n      return function (a0, a1, a2, a3, a4, a5, a6, a7, a8) {\n        return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8);\n      };\n    case 10:\n      return function (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {\n        return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);\n      };\n    default:\n      throw new Error('First argument to nAry must be a non-negative integer no greater than ten');\n  }\n});\nexport default nAry;","import _curry1 from './internal/_curry1.js';\nimport nAry from './nAry.js';\n\n/**\n * Wraps a function of any arity (including nullary) in a function that accepts\n * exactly 2 parameters. Any extraneous parameters will not be passed to the\n * supplied function.\n *\n * @func\n * @memberOf R\n * @since v0.2.0\n * @category Function\n * @sig (* -> c) -> (a, b -> c)\n * @param {Function} fn The function to wrap.\n * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of\n *         arity 2.\n * @see R.nAry, R.unary\n * @example\n *\n *      const takesThreeArgs = function(a, b, c) {\n *        return [a, b, c];\n *      };\n *      takesThreeArgs.length; //=> 3\n *      takesThreeArgs(1, 2, 3); //=> [1, 2, 3]\n *\n *      const takesTwoArgs = R.binary(takesThreeArgs);\n *      takesTwoArgs.length; //=> 2\n *      // Only 2 arguments are passed to the wrapped function\n *      takesTwoArgs(1, 2, 3); //=> [1, 2, undefined]\n * @symb R.binary(f)(a, b, c) = f(a, b)\n */\nvar binary = /*#__PURE__*/_curry1(function binary(fn) {\n  return nAry(2, fn);\n});\nexport default binary;","import _curry2 from './internal/_curry2.js';\n\n/**\n * Retrieve the value at a given path.\n *\n * @func\n * @memberOf R\n * @since v0.2.0\n * @category Object\n * @typedefn Idx = String | Int\n * @sig [Idx] -> {a} -> a | Undefined\n * @param {Array} path The path to use.\n * @param {Object} obj The object to retrieve the nested property from.\n * @return {*} The data at `path`.\n * @see R.prop\n * @example\n *\n *      R.path(['a', 'b'], {a: {b: 2}}); //=> 2\n *      R.path(['a', 'b'], {c: {b: 2}}); //=> undefined\n */\nvar path = /*#__PURE__*/_curry2(function path(paths, obj) {\n  var val = obj;\n  var idx = 0;\n  while (idx < paths.length) {\n    if (val == null) {\n      return;\n    }\n    val = val[paths[idx]];\n    idx += 1;\n  }\n  return val;\n});\nexport default path;","import _curry2 from './internal/_curry2.js';\nimport path from './path.js';\n\n/**\n * Returns a function that when supplied an object returns the indicated\n * property of that object, if it exists.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig s -> {s: a} -> a | Undefined\n * @param {String} p The property name\n * @param {Object} obj The object to query\n * @return {*} The value at `obj.p`.\n * @see R.path\n * @example\n *\n *      R.prop('x', {x: 100}); //=> 100\n *      R.prop('x', {}); //=> undefined\n *      R.compose(R.inc, R.prop('x'))({ x: 3 }) //=> 4\n */\n\nvar prop = /*#__PURE__*/_curry2(function prop(p, obj) {\n  return path([p], obj);\n});\nexport default prop;","import _curry2 from './internal/_curry2.js';\n\n/**\n * Adds two values.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Math\n * @sig Number -> Number -> Number\n * @param {Number} a\n * @param {Number} b\n * @return {Number}\n * @see R.subtract\n * @example\n *\n *      R.add(2, 3);       //=>  5\n *      R.add(7)(10);      //=> 17\n */\nvar add = /*#__PURE__*/_curry2(function add(a, b) {\n  return Number(a) + Number(b);\n});\nexport default add;","import add from './add.js';\nimport reduce from './reduce.js';\n\n/**\n * Adds together all the elements of a list.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Math\n * @sig [Number] -> Number\n * @param {Array} list An array of numbers\n * @return {Number} The sum of all the numbers in the list.\n * @see R.reduce\n * @example\n *\n *      R.sum([2,4,6,8,100,1]); //=> 121\n */\nvar sum = /*#__PURE__*/reduce(add, 0);\nexport default sum;","import _curry2 from './internal/_curry2.js';\n\n/**\n * Creates a new object out of a list of keys and a list of values.\n * Key/value pairing is truncated to the length of the shorter of the two lists.\n * Note: `zipObj` is equivalent to `pipe(zip, fromPairs)`.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category List\n * @sig [String] -> [*] -> {String: *}\n * @param {Array} keys The array that will be properties on the output object.\n * @param {Array} values The list of values on the output object.\n * @return {Object} The object made by pairing up same-indexed elements of `keys` and `values`.\n * @example\n *\n *      R.zipObj(['a', 'b', 'c'], [1, 2, 3]); //=> {a: 1, b: 2, c: 3}\n */\nvar zipObj = /*#__PURE__*/_curry2(function zipObj(keys, values) {\n  var idx = 0;\n  var len = Math.min(keys.length, values.length);\n  var out = {};\n  while (idx < len) {\n    out[keys[idx]] = values[idx];\n    idx += 1;\n  }\n  return out;\n});\nexport default zipObj;","import _curry2 from './internal/_curry2.js';\n\n/**\n * Divides the first parameter by the second and returns the remainder. Note\n * that this function preserves the JavaScript-style behavior for modulo. For\n * mathematical modulo see [`mathMod`](#mathMod).\n *\n * @func\n * @memberOf R\n * @since v0.1.1\n * @category Math\n * @sig Number -> Number -> Number\n * @param {Number} a The value to the divide.\n * @param {Number} b The pseudo-modulus\n * @return {Number} The result of `b % a`.\n * @see R.mathMod\n * @example\n *\n *      R.modulo(17, 3); //=> 2\n *      // JS behavior:\n *      R.modulo(-17, 3); //=> -2\n *      R.modulo(17, -3); //=> 2\n *\n *      const isOdd = R.modulo(R.__, 2);\n *      isOdd(42); //=> 0\n *      isOdd(21); //=> 1\n */\nvar modulo = /*#__PURE__*/_curry2(function modulo(a, b) {\n  return a % b;\n});\nexport default modulo;","/**\n * A special placeholder value used to specify \"gaps\" within curried functions,\n * allowing partial application of any combination of arguments, regardless of\n * their positions.\n *\n * If `g` is a curried ternary function and `_` is `R.__`, the following are\n * equivalent:\n *\n *   - `g(1, 2, 3)`\n *   - `g(_, 2, 3)(1)`\n *   - `g(_, _, 3)(1)(2)`\n *   - `g(_, _, 3)(1, 2)`\n *   - `g(_, 2, _)(1, 3)`\n *   - `g(_, 2)(1)(3)`\n *   - `g(_, 2)(1, 3)`\n *   - `g(_, 2)(_, 3)(1)`\n *\n * @name __\n * @constant\n * @memberOf R\n * @since v0.6.0\n * @category Function\n * @example\n *\n *      const greet = R.replace('{name}', R.__, 'Hello, {name}!');\n *      greet('Alice'); //=> 'Hello, Alice!'\n */\nexport default { '@@functional/placeholder': true };","import * as R from 'ramda';\n\nexport const toArray = (x) => Array.from(x);\n\nexport const byteToStrBase2 = (x) => x.toString(2).padStart(8, '0');\n\nexport function arrayBufferToUint8Array(x) {\n  return new Uint8Array(x);\n}\n\n/**\n * Return hex variant of uint8array\n * @param {Uint8Array|Number[]} arr\n * @returns {string} - hex string\n */\nexport function uint8ArrayToHex(arr) {\n  let hex = '';\n  for (let i = 0; i < arr.length; i += 1) {\n    hex += arr[i].toString(16).padStart(2, '0');\n  }\n  return hex;\n}\n\n/**\n * Parse sequence of bytes to BigInt. Sequence has got big endian format as default\n * @param {Uint8Array|Number[]} arr\n * @param {boolean} [littleEndian]\n * @returns {BigInt}\n */\nexport function uint8ToBigInt(arr, littleEndian) {\n  const calc = littleEndian ? arr.reverse() : arr;\n  const hex = uint8ArrayToHex(calc);\n  return BigInt(`0x${hex}`);\n}\n\nexport const debug = (x) => {\n  console.log(x);\n  return x;\n};\n\nexport function getRandomInt(max) {\n  return Math.floor(Math.random() * Math.floor(max));\n}\n\nconst getRandomByte = R.partial(getRandomInt, [256]);\n\nexport const getNRandomBytes = R.times(getRandomByte);\n\nexport const randomBigInt = R.pipe(\n  R.always(8),\n  getNRandomBytes,\n  uint8ToBigInt,\n);\n\n/**\n * Copy bytes from Uint8Array `from` to Uint*Array `to`;\n * @param {Uint8Array|Number[]} fromArr\n * @param {Uint8Array} toArr\n */\nexport function copyBytes(fromArr, toArr) {\n  for (let i = 0; i < fromArr.length; i += 1) {\n    toArr[i] = fromArr[i];\n  }\n}\n\n/**\n * Builds Uint8 Array from string\n * @param {string} str - string that should be encoded;\n * @returns {Uint8Array}\n */\nexport function stringToUint8(str) {\n  const encoder = new TextEncoder('utf8');\n  return encoder.encode(str);\n}\n\n/**\n * Builds string form Uint8Array\n * @param {Uint8Array} uint8arr\n * @returns {string}\n */\nexport function uint8ToString(uint8arr) {\n  const decoder = new TextDecoder('utf8');\n  return decoder.decode(uint8arr);\n}\n\n/**\n * Translate value to array of bytes in little-endian order\n * @param {Number} value\n * @returns {Number[]}\n */\nexport function toLittleEndian(value) {\n  const result = [];\n\n  let current = value;\n\n  while (current > 0) {\n    result.push(current % 256);\n    current = Math.floor(current / 256);\n  }\n  return result;\n}\n\n/**\n * Returns true if passed value is a prime value\n * @param {BigInt} p\n * @returns {boolean}\n */\nexport function isPrime(p) {\n  for (let i = BigInt(2); i * i <= p; i += BigInt(1)) {\n    if (p % i === BigInt(0)) return false;\n  }\n  return true;\n}\n\nexport function* primeGenerator() {\n  yield BigInt(2);\n  const primeResults = [BigInt(2)];\n\n  let i = BigInt(2);\n  while (true) {\n    let prime = true;\n    for (let j = 0; j < primeResults.length; j += 1) {\n      if (i % primeResults[j] === BigInt(0)) {\n        prime = false;\n        break;\n      }\n    }\n    if (prime) {\n      primeResults.push(i);\n      yield i;\n    }\n    i += BigInt(1);\n  }\n}\n\nfunction absDec(a, b) {\n  if (a > b) {\n    return a - b;\n  }\n  return b - a;\n}\n\nfunction gcd(a, b) {\n  while (b) {\n    const tmp = a;\n    a = b;\n    b = tmp % b;\n  }\n\n  return a;\n}\n\nfunction min(a, b) {\n  if (a < b) {\n    return a;\n  }\n  return b;\n}\n\n\n/**\n * Fast modular exponentiation for a ^ b mod n\n * @returns {BigInt}\n */\nexport function powModulo(a, b, n) {\n  a %= n;\n  let result = BigInt(1);\n  let x = a;\n\n  while (b > 0) {\n    const leastSignificantBit = b % BigInt(2);\n    b /= BigInt(2);\n\n    if (leastSignificantBit === BigInt(1)) {\n      result *= x;\n      result %= n;\n    }\n\n    x *= x;\n    x %= n;\n  }\n  return result;\n}\n\n/**\n * Decompose prime factors takes algorithm form\n * https://github.com/LonamiWebs/Telethon/blob/master/telethon/crypto/factorization.py\n * @param {BigInt} pq - factorized number\n * @returns {BigInt[]} - list of p q factors where p < q\n */\nexport function findPrimeFactors(pq) {\n  if (pq % BigInt(2) === BigInt(0)) {\n    return [2, pq / BigInt(2)];\n  }\n\n  let y = BigInt(1) + (randomBigInt() % (pq - BigInt(1)));\n  const c = BigInt(1) + (randomBigInt() % (pq - BigInt(1)));\n  const m = BigInt(1) + (randomBigInt() % (pq - BigInt(1)));\n\n  let g = BigInt(1);\n  let r = BigInt(1);\n  let q = BigInt(1);\n\n  let x = BigInt(0);\n  let ys = BigInt(0);\n\n  while (g === BigInt(1)) {\n    x = y;\n    for (let i = BigInt(0); i < r; i += BigInt(1)) {\n      y = (((y ** BigInt(2)) % pq) + c) % pq;\n    }\n\n    let k = BigInt(0);\n    while (k < r && g === BigInt(1)) {\n      ys = y;\n      for (let i = BigInt(0); i < min(m, r - k); i += BigInt(1)) {\n        y = (((y ** BigInt(2)) % pq) + c) % pq;\n        q = (q * absDec(x, y)) % pq;\n      }\n      g = gcd(q, pq);\n      k += m;\n    }\n\n    r *= BigInt(2);\n  }\n\n  if (g === pq) {\n    /* eslint-disable-next-line */\n    while (true) { // eslint: noqa\n      ys = (((ys ** BigInt(2)) % pq) + c) % pq;\n      g = gcd(absDec(x, ys), pq);\n      if (g > 1) {\n        break;\n      }\n    }\n  }\n\n  const p = g;\n  q = pq / p;\n  return (p < q) ? [p, q] : [q, p];\n}\n\n/**\n * @param {Number} x\n * @returns {string}\n */\nexport function numberToHex(x) {\n  return x.toString(16);\n}\n\n/**\n * Parases hex string to number array of bytes\n * @param {string} - hex string,\n * @return {Number[]}\n */\nexport const hexToUint8Array = R.pipe(\n  R.cond([\n    [R.startsWith('0x'), R.slice(2, Infinity)],\n    [R.T, R.identity],\n  ]),\n  R.splitEvery(2),\n  R.map(R.flip(R.curryN(2)(parseInt))(16)),\n);\n\n/**\n * Parses hex string and returns ArrayBuffer of it\n * @param hexStr\n * @return {ArrayBuffer}\n */\nexport function hexToArrayBuffer(hexStr) {\n  const bytesArr = hexToUint8Array(hexStr);\n  const buffer = new ArrayBuffer(bytesArr.length);\n  const bufferBytes = new Uint8Array(buffer);\n\n  copyBytes(bytesArr, bufferBytes);\n  return buffer;\n}\n\n\n/**\n * Moves all arr into buffer\n * @param {Uint8Array} arr\n * @returns {ArrayBuffer}\n */\nexport function uint8ToArrayBuffer(arr) {\n  const buffer = new ArrayBuffer(arr.length);\n  const bufferBytes = new Uint8Array(buffer);\n  copyBytes(arr, bufferBytes);\n  return buffer;\n}\n/**\n * Trans number or bigint to Uint8Array with big endian format if little endian doesn't set\n * @param bigint\n * @param littleEndian\n * @returns {number[]}\n */\nexport function bigIntToUint8Array(bigint, littleEndian) {\n  const result = [];\n  let value = BigInt(bigint);\n\n  while (value > BigInt(0)) {\n    result.push(Number(value % BigInt(256)));\n    value /= BigInt(256);\n  }\n  if (result.length === 0) {\n    result.push(0);\n  }\n  return littleEndian ? result : result.reverse();\n}\n\n/**\n * @returns {number}\n */\nexport function getUnixTimestamp() {\n  return Math.floor(+Date.now() / 1000);\n}\n\n/**\n * Generates message id\n * @returns {bigint}\n */\nexport function getMessageId() {\n  if (!getMessageId.inc) {\n    getMessageId.inc = 1;\n  } else {\n    getMessageId.inc += 1;\n  }\n  return BigInt(getUnixTimestamp() * 2 ** 32) + BigInt(getMessageId.inc * 4);\n}\n\n/**\n * Copies whole buffer to another with recipient buffer offset\n * @param fromBuffer\n * @param toBuffer\n * @param offset\n */\nexport function copyBuffer(fromBuffer, toBuffer, offset = 0) {\n  const fromBufferBytes = new Uint8Array(fromBuffer);\n  const toBufferBytes = new Uint8Array(toBuffer, offset);\n  copyBytes(fromBufferBytes, toBufferBytes);\n}\n\n\nexport const dumpArrayBuffer = R.pipe(\n  arrayBufferToUint8Array,\n  uint8ArrayToHex,\n);\n\nexport const arrayBufferToHex = dumpArrayBuffer;\n\n/**\n * @param {ArrayBuffer} bufferA\n * @param {ArrayBuffer} bufferB\n * @returns {ArrayBuffer}\n */\nexport function mergeArrayBuffer(bufferA, bufferB) {\n  const buffer = new ArrayBuffer(bufferA.byteLength + bufferB.byteLength);\n  const bufferAView = new Uint8Array(bufferA);\n  const bufferBView = new Uint8Array(bufferB);\n\n  const bufferPart1 = new Uint8Array(buffer, 0, bufferA.byteLength);\n  const bufferPart2 = new Uint8Array(buffer, bufferA.byteLength, bufferB.byteLength);\n\n  copyBytes(bufferAView, bufferPart1);\n  copyBytes(bufferBView, bufferPart2);\n\n  return buffer;\n}\n\n/**\n * @param {ArrayBuffer} buffer\n * @param {Number} start\n * @param {Number} [end]\n * @returns {ArrayBuffer}\n */\nexport function sliceBuffer(buffer, start, end) {\n  return buffer.slice(start, end);\n}\n\nexport const getEmptyArrayBuffer = R.always(new ArrayBuffer(0));\n\nexport const mergeAllArrayBuffers = R.reduce(mergeArrayBuffer, getEmptyArrayBuffer());\n\n/**\n * @param {Array<Function>} dumpFuncs\n * @returns {ArrayBuffer}\n */\nexport const buildDumpFunc = R.pipe(\n  R.ap,\n  R.partial(R.binary(R.pipe), [R.of]),\n  R.partialRight(R.binary(R.pipe), [mergeAllArrayBuffers]),\n);\n\nexport const isWithOffset = R.pipe(\n  R.nthArg(1),\n  R.equals(true),\n);\n\nexport const withConstantOffset = (func, offset) => (x) => ({\n  value: func(x),\n  offset,\n});\n/**\n * Computes offset of whole message\n * @param {Array<{ offset: Number }>} - list of loaded data\n * @returns {Number} - offset of whole message\n */\nexport const computeOffset = R.pipe(\n  R.ap([R.prop('offset')]),\n  R.sum,\n);\n\nexport function addWithOffsetArg(load) {\n  return R.cond([\n    [isWithOffset, load],\n    [R.T, R.pipe(load, R.prop('value'))],\n  ]);\n}\n\n/**\n * loads data from pairs with array buffer\n * @param {{ value: *, offset: Number }} result\n * @param {Number} idx\n * @param {Array<[string, Function]>} pairs\n * @param {ArrayBuffer} buffer\n */\nfunction loadByPairs(result, idx, pairs, buffer) {\n  const [attrName, loader] = pairs[idx];\n  const { offset, value } = result;\n  const slicedBuffer = sliceBuffer(buffer, offset, undefined);\n  const { value: loadedValue, offset: loadedOffset } = loader(slicedBuffer, true);\n  const updatedResult = {\n    value: {\n      [attrName]: loadedValue,\n      ...value,\n    },\n    offset: offset + loadedOffset,\n  };\n\n  const nIdx = idx + 1;\n  return (pairs.length === nIdx) ? updatedResult : loadByPairs(updatedResult, nIdx, pairs, buffer);\n}\n\n/**\n * Build function to load data for object from ArrayBuffer\n * @param {Array<[string, Function]>} pairs - tuple where first argument is a name of attribute,\n * second argument is a function to load data\n */\nexport function buildLoadFunc(pairs) {\n  const load = R.partial(loadByPairs, [{ value: {}, offset: 0 }, 0, pairs]);\n  return addWithOffsetArg(load);\n}\n\nexport const buildTypeLoader = R.pipe(\n  R.of,\n  R.ap([R.identity, R.always(0)]),\n  R.zipObj(['value', 'offset']),\n  R.always,\n);\n\nexport const buildConstructorLoader = R.pipe(\n  R.of,\n  R.ap([R.identity, R.always(4)]),\n  R.zipObj(['value', 'offset']),\n  R.always,\n);\n\nexport const buildMethodLoader = buildConstructorLoader;\n\n/**\n * Call function that returns promise one bo one, and handle progress by progressCb\n * @param {Array<>} promiseFuncList - function that will returns promise\n * @param {Function} progressCb - callback to track progress\n * @returns {{ promise: PromiseLike<*>, cancel: Function }} - object with promise and cancel func\n */\nexport function promiseChain(promiseFuncList, progressCb) {\n  const resultArr = [];\n  let canceled = false;\n\n  function innerCaller(i, result) {\n    if (canceled) {\n      return Promise.reject(new Error('canceled'));\n    }\n\n    progressCb(i, promiseFuncList.length);\n    if (i !== 0) {\n      resultArr.push(result);\n    }\n    if (i === promiseFuncList.length) {\n      return Promise.resolve(resultArr);\n    }\n    const promise = promiseFuncList[i](result);\n    return promise.then(R.partial(innerCaller, [i + 1]));\n  }\n\n  const promise = innerCaller(0);\n  function cancel() {\n    canceled = true;\n  }\n  return { promise, cancel };\n}\n\n/**\n * Get promise function, call\n * @param {Function} getPromiseFunc - takes previous result, counter and returns new promise;\n * @param {Function} conditionFunc - takes previous result and returns\n * @param {Function} progressCb - for tracking progress\n */\nexport function promiseChainUntil(getPromiseFunc, conditionFunc, progressCb) {\n  const resultArr = [];\n  let canceled = false;\n  function innerCaller(result, i) {\n    if (canceled) {\n      return Promise.reject(new Error('canceled'));\n    }\n    if (i !== 0) {\n      resultArr.push(result);\n    }\n\n    progressCb(i);\n\n    if (i !== 0 && conditionFunc(result, i)) {\n      return Promise.resolve(resultArr);\n    }\n\n    return getPromiseFunc(result, i).then(R.partialRight(innerCaller, [i + 1]));\n  }\n  const promise = innerCaller(undefined, 0);\n  function cancel() {\n    canceled = true;\n  }\n  return { promise, cancel };\n}\n\n/**\n * @param {Number} x\n * @param {Number} n\n * @return {Number}\n */\nexport function shiftLeftNBit(x, n) {\n  /* eslint-disable */\n  return x << n;\n  /* eslint-enable */\n}\n\n/**\n * @param {Number} x\n * @param {Number} n\n * @return {Number}\n */\nexport function shiftRightNBit(x, n) {\n  /* eslint-disable */\n  return x >> n;\n  /* eslint-enable */\n}\n\n/**\n * Return first value from array buffer\n * @param {ArrayBuffer} buffer\n * @returns {Number}\n */\nexport const getFirstByte = R.pipe(\n  arrayBufferToUint8Array,\n  R.nth(0),\n);\n\n/**\n * @param {Number} x\n * @param {Number} n\n * @return {Number}\n */\nexport const getNBit = R.pipe(\n  shiftRightNBit,\n  R.modulo(R.__, 2),\n);\n\nexport function maskNumber(x, y) {\n  /* eslint-disable */\n  return x & y;\n  /* eslint-enable */\n}\n\nconst binaryPipe = R.binary(R.pipe);\n\nexport const applyAll = R.pipe(\n  R.ap,\n  R.partial(binaryPipe, [R.of]),\n);\n","import _curry3 from './internal/_curry3.js';\nimport equals from './equals.js';\n\n/**\n * Returns `true` if the specified object property is equal, in\n * [`R.equals`](#equals) terms, to the given value; `false` otherwise.\n * You can test multiple properties with [`R.whereEq`](#whereEq).\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig String -> a -> Object -> Boolean\n * @param {String} name\n * @param {*} val\n * @param {*} obj\n * @return {Boolean}\n * @see R.whereEq, R.propSatisfies, R.equals\n * @example\n *\n *      const abby = {name: 'Abby', age: 7, hair: 'blond'};\n *      const fred = {name: 'Fred', age: 12, hair: 'brown'};\n *      const rusty = {name: 'Rusty', age: 10, hair: 'brown'};\n *      const alois = {name: 'Alois', age: 15, disposition: 'surly'};\n *      const kids = [abby, fred, rusty, alois];\n *      const hasBrownHair = R.propEq('hair', 'brown');\n *      R.filter(hasBrownHair, kids); //=> [fred, rusty]\n */\nvar propEq = /*#__PURE__*/_curry3(function propEq(name, val, obj) {\n  return equals(val, obj[name]);\n});\nexport default propEq;","import _curry1 from './internal/_curry1.js';\nimport _isNumber from './internal/_isNumber.js';\n\n/**\n * Returns the number of elements in the array by returning `list.length`.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category List\n * @sig [a] -> Number\n * @param {Array} list The array to inspect.\n * @return {Number} The length of the array.\n * @example\n *\n *      R.length([]); //=> 0\n *      R.length([1, 2, 3]); //=> 3\n */\nvar length = /*#__PURE__*/_curry1(function length(list) {\n  return list != null && _isNumber(list.length) ? list.length : NaN;\n});\nexport default length;","export default function _isNumber(x) {\n  return Object.prototype.toString.call(x) === '[object Number]';\n}","import _curry2 from './internal/_curry2.js';\n\n/**\n * Applies function `fn` to the argument list `args`. This is useful for\n * creating a fixed-arity function from a variadic function. `fn` should be a\n * bound function if context is significant.\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category Function\n * @sig (*... -> a) -> [*] -> a\n * @param {Function} fn The function which will be called with `args`\n * @param {Array} args The arguments to call `fn` with\n * @return {*} result The result, equivalent to `fn(...args)`\n * @see R.call, R.unapply\n * @example\n *\n *      const nums = [1, 2, 3, -99, 42, 6, 7];\n *      R.apply(Math.max, nums); //=> 42\n * @symb R.apply(f, [a, b, c]) = f(a, b, c)\n */\nvar apply = /*#__PURE__*/_curry2(function apply(fn, args) {\n  return fn.apply(this, args);\n});\nexport default apply;","import _curry2 from './internal/_curry2.js';\n\n/**\n * Creates a new list out of the two supplied by pairing up equally-positioned\n * items from both lists. The returned list is truncated to the length of the\n * shorter of the two input lists.\n * Note: `zip` is equivalent to `zipWith(function(a, b) { return [a, b] })`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [b] -> [[a,b]]\n * @param {Array} list1 The first array to consider.\n * @param {Array} list2 The second array to consider.\n * @return {Array} The list made by pairing up same-indexed elements of `list1` and `list2`.\n * @example\n *\n *      R.zip([1, 2, 3], ['a', 'b', 'c']); //=> [[1, 'a'], [2, 'b'], [3, 'c']]\n * @symb R.zip([a, b, c], [d, e, f]) = [[a, d], [b, e], [c, f]]\n */\nvar zip = /*#__PURE__*/_curry2(function zip(a, b) {\n  var rv = [];\n  var idx = 0;\n  var len = Math.min(a.length, b.length);\n  while (idx < len) {\n    rv[idx] = [a[idx], b[idx]];\n    idx += 1;\n  }\n  return rv;\n});\nexport default zip;","// Values from my.telegram.com\nexport const BOOL_TRUE = 0x997275b5;\nexport const BOOL_FALSE = 0xbc799737;\n\nexport const TYPE_KEY = '@@type';\nexport const CONSTRUCTOR_KEY = '@@constructor';\nexport const METHOD_KEY = '@@method';\n\nexport const API_ID = 1005944;\nexport const API_HASH = 'dfbf8ed1e37d1cd1ad370e7431ed8a87';\n\nexport const PROTOCOL_ID = 0xdddddddd; //\nexport const DC_ID = 0b0100000000000000; // DC-2 in little endian form\nexport const TEST_DC_INC = 10000; // INCREMENT DC FOR TEST\n\nexport const RES_PQ_TYPE = 'ResPQ';\nexport const REQ_PQ_METHOD = 'req_pq';\nexport const REQ_PQ = 0x60469778;\n\nexport const RES_PQ = 0x05162463;\nexport const RES_PQ_CONSTRUCTOR = 'resPQ';\n\nexport const PQ_INNER_DATA_TYPE = 'P_Q_inner_data';\nexport const PQ_INNER_DATA_CONSTRUCTOR = 'p_q_inner_data';\nexport const PQ_INNER_DATA = 0x83c95aec;\nexport const PQ_INNER_DATA_TEMP_CONSTRUCTOR = 'p_q_inner_data_temp';\nexport const PQ_INNER_DATA_TEMP = 0x3c6a84d4;\n\nexport const SERVER_DH_PARAMS_TYPE = 'Server_DH_Params';\nexport const REQ_DH_PARAMS_METHOD = 'req_DH_params';\nexport const REQ_DH_PARAMS = 0xd712e4be;\n\nexport const SERVER_DH_PARAMS_FAIL_CONSTRUCTOR = 'server_DH_params_fail';\nexport const SERVER_DH_PARAMS_FAIL = 0x79cb045d;\nexport const SERVER_DH_PARAMS_OK_CONSTRUCTOR = 'server_DH_params_ok';\nexport const SERVER_DH_PARAMS_OK = 0xd0e8075c;\n\nexport const SERVER_DH_INNER_DATA_TYPE = 'Server_DH_inner_data';\nexport const SERVER_DH_INNER_DATA_CONSTRUCTOR = 'server_DH_inner_data';\nexport const SERVER_DH_INNER_DATA = 0xb5890dba;\n\nexport const CLIENT_DH_INNER_DATA_TYPE = 'Client_DH_Inner_Data';\nexport const CLIENT_DH_INNER_DATA_CONSTRUCTOR = 'client_DH_inner_data';\nexport const CLIENT_DH_INNER_DATA = 0x6643b654;\n\nexport const SET_CLIENT_DH_PARAMS_ANSWER_TYPE = 'Set_client_DH_params_answer';\nexport const SET_CLIENT_DH_PARAMS_METHOD = 'set_client_DH_params';\nexport const SET_CLIENT_DH_PARAMS = 0xf5045f1f;\n\nexport const DH_GEN_OK_CONSTRUCTOR = 'dh_gen_ok';\nexport const DH_GEN_OK = 0x3bcbf734;\nexport const DH_GEN_RETRY_CONSTRUCTOR = 'dh_gen_retry';\nexport const DH_GEN_RETRY = 0x46dc1fb9;\nexport const DH_GEN_FAIL_CONSTRUCTOR = 'dh_gen_fail';\nexport const DH_GEN_FAIL = 0xa69dae02;\n\nexport const AUTH_SEND_CODE = 0xa677244f;\nexport const AUTH_SENT_CODE = 0x2215bcbd;\nexport const CODE_SETTINGS = 0xdebebe83;\n\nexport const PONG_TYPE = 'Pong';\nexport const PING = 0x7abe77ec;\nexport const PING_METHOD = 'ping';\nexport const PONG = 0x347773c5;\nexport const PONG_CONSTRUCTOR = 'pong';\n\nexport const PING_DELAY_DISCONNECT = 0xf3427b8c;\nexport const PING_DELAY_DISCONNECT_METHOD = 'ping_delay_disconnect';\n\nexport const GET_CONFIG = 0xc4f9186b;\n\nexport const GET_NEAREST_DC = 0x1fb33026;\n\nexport const HTTP_WAIT_TYPE = 'HttpWait';\nexport const HTTP_WAIT = 0x9299359f;\nexport const HTTP_WAIT_CONSTRUCTOR = 'http_wait';\n\nexport const MESSAGE_CONTAINER_TYPE = 'MessageContainer';\nexport const MESSAGE_CONTAINER = 0x73f1f8dc;\nexport const MESSAGE_CONTAINER_CONSTRUCTOR = 'msg_container';\n\nexport const NEW_SESSION_CREATED_TYPE = 'NewSession';\nexport const NEW_SESSION_CREATED = 0x9ec20908;\nexport const NEW_SESSION_CREATED_CONSTRUCTOR = 'new_session_created';\n\nexport const BAD_MSG_NOTIFICATION_TYPE = 'BadMsgNotification';\nexport const BAD_MSG_NOTIFICATION = 0xa7eff811;\nexport const BAD_MSG_NOTIFICATION_CONSTRUCTOR = 'bad_msg_notification';\n\nexport const BAD_SERVER_SALT = 0xedab447b;\nexport const BAD_SERVER_SALT_CONSTRUCTOR = 'bad_server_salt';\n\nexport const MSGS_ACK_TYPE = 'MsgsAck';\nexport const MSGS_ACK = 0x62d6b459;\nexport const MSGS_ACK_CONSTRUCTOR = 'msgs_ack';\n\nexport const MSGS_STATE_REQ_TYPE = 'MsgsStateReq';\nexport const MSGS_STATE_REQ = 0xda69fb52;\nexport const MSGS_STATE_REQ_METHOD = 'msgs_state_req';\n\nexport const MSGS_STATE_INFO_TYPE = 'MsgsStateInfo';\nexport const MSGS_STATE_INFO = 0x04deb57d;\nexport const MSGS_STATE_INFO_CONSTRUCTOR = 'msgs_state_info';\n\nexport const MSGS_ALL_INFO_TYPE = 'MsgsAllInfo';\nexport const MSGS_ALL_INFO = 0x8cc0d131;\nexport const MSGS_ALL_INFO_CONSTRUCTOR = 'msgs_all_info';\n\nexport const MSG_DETAILED_INFO_TYPE = 'MsgDetailedInfo';\nexport const MSG_DETAILED_INFO_CONSTRUCTOR = 'msg_detailed_info';\nexport const MSG_DETAILED_INFO = 0x276d3ec6;\n\nexport const MSG_NEW_DETAILED_INFO = 0x809db6df;\nexport const MSG_NEW_DETAILED_INFO_CONSTRUCTOR = 'msg_new_detailed_info';\n\nexport const MSG_RESEND_REQ_TYPE = 'MsgResendReq';\nexport const MSG_RESEND_REQ = 0x7d861a08;\nexport const MSG_RESEND_REQ_METHOD = 'msg_resend_req_type';\n\nexport const MSG_RESEND_ANS_REQ = 0x8610baeb;\nexport const MSG_RESEND_ANS_REQ_METHOD = 'msg_resend_ans_req';\n\nexport const VECTOR = 0x1cb5c415;\n\nexport const RPC_RESULT_TYPE = 'RpcResult';\nexport const RPC_RESULT = 0xf35c6d01;\nexport const RPC_RESULT_CONSTRUCTOR = 'rpc_result';\n\nexport const RPC_DROP_ANSWER_TYPE = 'RpcDropAnswer';\nexport const RPC_DROP_ANSWER = 0x58e4a740;\nexport const RPC_DROP_ANSWER_METHOD = 'rpc_drop_answer';\n\nexport const RPC_ANSWER_UNKNOWN = 0x5e2ad36e;\nexport const RPC_ANSWER_UNKNOWN_CONSTRUCTOR = 'rpc_answer_unknown';\n\nexport const RPC_ANSWER_DROPPED_RUNNING = 0xcd78e586;\nexport const RPC_ANSWER_DROPPED_RUNNING_CONSTRUCTOR = 'rpc_answer_dropped_running';\n\nexport const RPC_ANSWER_DROPPED = 0xa43ad8b7;\nexport const RPC_ANSWER_DROPPED_CONSTRUCTOR = 'rpc_answer_dropped';\n\nexport const RPC_ERROR_TYPE = 'RpcError';\nexport const RPC_ERROR = 0x2144ca19;\nexport const RPC_ERROR_CONSTRUCTOR = 'rpc_error_type';\n\nexport const GET_FUTURE_SALTS = 0xb921bd04;\nexport const GET_FUTURE_SALTS_METHOD = 'get_future_salts';\n\nexport const FUTURE_SALTS_TYPE = 'FutureSalts';\nexport const FUTURE_SALT = 0x0949d9dc;\nexport const FUTURE_SALT_CONSTRUCTOR = 'future_salt';\n\nexport const FUTURE_SALTS = 0xae500895;\nexport const FUTURE_SALTS_CONSTRUCTOR = 'future_salts';\n\nexport const DESTROY_SESSION_TYPE = 'DestroySessionRes';\nexport const DESTROY_SESSION = 0xe7512126;\nexport const DESTROY_SESSION_CONSTRUCTOR = 'destroy_session';\n\nexport const DESTROY_SESSION_OK = 0xe22045fc;\nexport const DESTROY_SESSION_OK_CONSTRUCTOR = 'destroy_session_ok';\n\nexport const DESTROY_SESSION_NONE = 0x62d350c9;\nexport const DESTROY_SESSION_NONE_CONSTRUCTOR = 'destroy_session_none';\n\nexport const GZIP_PACKED = 0x3072cfa1;\n","import * as R from 'ramda';\nimport {\n  AUTH_SENT_CODE,\n  BAD_MSG_NOTIFICATION,\n  BAD_SERVER_SALT,\n  CLIENT_DH_INNER_DATA,\n  CONSTRUCTOR_KEY,\n  DESTROY_SESSION,\n  DESTROY_SESSION_NONE,\n  DESTROY_SESSION_OK, DH_GEN_FAIL, DH_GEN_OK, DH_GEN_RETRY,\n  FUTURE_SALT,\n  FUTURE_SALTS,\n  GET_FUTURE_SALTS,\n  GZIP_PACKED,\n  HTTP_WAIT,\n  MESSAGE_CONTAINER,\n  METHOD_KEY,\n  MSG_DETAILED_INFO,\n  MSG_NEW_DETAILED_INFO,\n  MSG_RESEND_ANS_REQ,\n  MSG_RESEND_REQ,\n  MSGS_ACK,\n  MSGS_ALL_INFO,\n  MSGS_STATE_INFO,\n  MSGS_STATE_REQ,\n  NEW_SESSION_CREATED,\n  PING,\n  PING_DELAY_DISCONNECT,\n  PONG,\n  PQ_INNER_DATA,\n  PQ_INNER_DATA_TEMP,\n  REQ_DH_PARAMS,\n  REQ_PQ,\n  RES_PQ,\n  RPC_ANSWER_DROPPED,\n  RPC_ANSWER_DROPPED_RUNNING,\n  RPC_ANSWER_UNKNOWN,\n  RPC_DROP_ANSWER,\n  RPC_ERROR,\n  RPC_RESULT,\n  SERVER_DH_INNER_DATA,\n  SERVER_DH_PARAMS_FAIL,\n  SERVER_DH_PARAMS_OK,\n  SET_CLIENT_DH_PARAMS,\n  TYPE_KEY,\n  VECTOR,\n} from '../constants';\n\n/**\n * Gets constructor value from buffer\n * @param {ArrayBuffer} - message buffer\n * @returns {Number} - constructor number\n */\nexport const getConstructor = R.pipe(\n  (x) => new Uint32Array(x, 0, 1),\n  R.nth(0),\n);\n\n/**\n * @param {ArrayBuffer} - message buffer\n * @returns {boolean}\n */\nexport const isMessageContainer = R.pipe(\n  getConstructor,\n  R.equals(MESSAGE_CONTAINER),\n);\n\n/**\n * @param {ArrayBuffer} - message buffer\n * @returns {boolean}\n */\nexport const isPong = R.pipe(\n  getConstructor,\n  R.equals(PONG),\n);\n\n/**\n * @param {ArrayBuffer} - message buffer\n * @returns {boolean}\n */\nexport const isPing = R.pipe(\n  getConstructor,\n  R.equals(PING),\n);\n\n/**\n * @param {ArrayBuffer} - message buffer\n * @returns {boolean}\n */\nexport const isPingDelayDisconnect = R.pipe(\n  getConstructor,\n  R.equals(PING_DELAY_DISCONNECT),\n);\n\n/**\n * @param {ArrayBuffer} - message buffer\n * @returns {boolean}\n */\nexport const isNewSessionCreated = R.pipe(\n  getConstructor,\n  R.equals(NEW_SESSION_CREATED),\n);\n\n/**\n * @param {ArrayBuffer} - message buffer\n * @returns {boolean}\n */\nexport const isBadMsgNotification = R.pipe(\n  getConstructor,\n  R.equals(BAD_MSG_NOTIFICATION),\n);\n\nexport const isBadServerSalt = R.pipe(\n  getConstructor,\n  R.equals(BAD_SERVER_SALT),\n);\n\n/**\n * @param {ArrayBuffer} - message buffer\n * @returns {boolean}\n */\nexport const isMsgsAck = R.pipe(\n  getConstructor,\n  R.equals(MSGS_ACK),\n);\n\n/**\n * @param {ArrayBuffer} - message buffer\n * @returns {boolean}\n */\nexport const isMsgsStateReq = R.pipe(\n  getConstructor,\n  R.equals(MSGS_STATE_REQ),\n);\n\n/**\n * @param {ArrayBuffer} - message buffer\n * @returns {boolean}\n */\nexport const isMsgsStateInfo = R.pipe(\n  getConstructor,\n  R.equals(MSGS_STATE_INFO),\n);\n\n/**\n * @param {ArrayBuffer} - message buffer\n * @returns {boolean}\n */\nexport const isMsgsAllInfo = R.pipe(\n  getConstructor,\n  R.equals(MSGS_ALL_INFO),\n);\n\n/**\n * @param {ArrayBuffer} - message buffer\n * @returns {boolean}\n */\nexport const isMsgDetailedInfo = R.pipe(\n  getConstructor,\n  R.equals(MSG_DETAILED_INFO),\n);\n\n/**\n * @param {ArrayBuffer} - message buffer\n * @returns {boolean}\n */\nexport const isMsgNewDetailedInfo = R.pipe(\n  getConstructor,\n  R.equals(MSG_NEW_DETAILED_INFO),\n);\n\n/**\n * @param {ArrayBuffer} - message buffer\n * @returns {boolean}\n */\nexport const isMsgResendReq = R.pipe(\n  getConstructor,\n  R.equals(MSG_RESEND_REQ),\n);\n\n/**\n * @param {ArrayBuffer} - message buffer\n * @returns {boolean}\n */\nexport const isMsgResendAnsReq = R.pipe(\n  getConstructor,\n  R.equals(MSG_RESEND_ANS_REQ),\n);\n\n/**\n * @param {ArrayBuffer} - message buffer\n * @returns {boolean}\n */\nexport const isVector = R.pipe(\n  getConstructor,\n  R.equals(VECTOR),\n);\n\n/**\n * @param {ArrayBuffer} - message buffer\n * @returns {boolean}\n */\nexport const isRpcResult = R.pipe(\n  getConstructor,\n  R.equals(RPC_RESULT),\n);\n\n/**\n * @param {ArrayBuffer} - message buffer\n * @returns {boolean}\n */\nexport const isRpcError = R.pipe(\n  getConstructor,\n  R.equals(RPC_ERROR),\n);\n\n/**\n * @param {ArrayBuffer} - message buffer\n * @returns {boolean}\n */\nexport const isRpcDropAnswer = R.pipe(\n  getConstructor,\n  R.equals(RPC_DROP_ANSWER),\n);\n\n/**\n * @param {ArrayBuffer} - message buffer\n * @returns {boolean}\n */\nexport const isRpcAnswerUnknown = R.pipe(\n  getConstructor,\n  R.equals(RPC_ANSWER_UNKNOWN),\n);\n\n/**\n * @param {ArrayBuffer} - message buffer\n * @returns {boolean}\n */\nexport const isRpcAnswerDroppedRunning = R.pipe(\n  getConstructor,\n  R.equals(RPC_ANSWER_DROPPED_RUNNING),\n);\n\n/**\n * @param {ArrayBuffer} - message buffer\n * @returns {boolean}\n */\nexport const isRpcAnswerDropped = R.pipe(\n  getConstructor,\n  R.equals(RPC_ANSWER_DROPPED),\n);\n\n/**\n * @param {ArrayBuffer} - message buffer\n * @returns {boolean}\n */\nexport const isAuthSentCode = R.pipe(\n  getConstructor,\n  R.equals(AUTH_SENT_CODE),\n);\n\n/**\n * @param {ArrayBuffer} - message buffer\n * @returns {boolean}\n */\nexport const isGetFutureSalts = R.pipe(\n  getConstructor,\n  R.equals(GET_FUTURE_SALTS),\n);\n\n/**\n * @param {ArrayBuffer} - message buffer\n * @returns {boolean}\n */\nexport const isFutureSalt = R.pipe(\n  getConstructor,\n  R.equals(FUTURE_SALT),\n);\n\n/**\n * @param {ArrayBuffer} - message buffer\n * @returns {boolean}\n */\nexport const isFutureSalts = R.pipe(\n  getConstructor,\n  R.equals(FUTURE_SALTS),\n);\n\n/**\n * @param {ArrayBuffer} - message buffer\n * @returns {boolean}\n */\nexport const isDestroySession = R.pipe(\n  getConstructor,\n  R.equals(DESTROY_SESSION),\n);\n\n/**\n * @param {ArrayBuffer} - message buffer\n * @returns {boolean}\n */\nexport const isDestroySessionOk = R.pipe(\n  getConstructor,\n  R.equals(DESTROY_SESSION_OK),\n);\n\n/**\n * @param {ArrayBuffer} - message buffer\n * @returns {boolean}\n */\nexport const isDestroySessionNone = R.pipe(\n  getConstructor,\n  R.equals(DESTROY_SESSION_NONE),\n);\n\n/**\n * @param {ArrayBuffer} - message buffer\n * @returns {boolean}\n */\nexport const isHttpWait = R.pipe(\n  getConstructor,\n  R.equals(HTTP_WAIT),\n);\n\n/**\n * @param {ArrayBuffer} - message buffer\n * @returns {boolean}\n */\nexport const isGzipped = R.pipe(\n  getConstructor,\n  R.equals(GZIP_PACKED),\n);\n\n/**\n * @param {ArrayBuffer} - message buffer\n * @returns {boolean}\n */\nexport const isReqPQ = R.pipe(\n  getConstructor,\n  R.equals(REQ_PQ),\n);\n\n/**\n * @param {ArrayBuffer} - message buffer\n * @returns {boolean}\n */\nexport const isResPQ = R.pipe(\n  getConstructor,\n  R.equals(RES_PQ),\n);\n\n/**\n * @param {ArrayBuffer} - message buffer\n * @returns {boolean}\n */\nexport const isPQInnerData = R.pipe(\n  getConstructor,\n  R.equals(PQ_INNER_DATA),\n);\n\n/**\n * @param {ArrayBuffer} - message buffer\n * @returns {boolean}\n */\nexport const isPQInnerDataTemp = R.pipe(\n  getConstructor,\n  R.equals(PQ_INNER_DATA_TEMP),\n);\n\n/**\n * @param {ArrayBuffer} - message buffer\n * @returns {boolean}\n */\nexport const isReqDhParams = R.pipe(\n  getConstructor,\n  R.equals(REQ_DH_PARAMS),\n);\n\n/**\n * @param {ArrayBuffer} - message buffer\n * @returns {boolean}\n */\nexport const isServerDHParamsFail = R.pipe(\n  getConstructor,\n  R.equals(SERVER_DH_PARAMS_FAIL),\n);\n\n/**\n * @param {ArrayBuffer} - message buffer\n * @returns {boolean}\n */\nexport const isServerDHParamsOk = R.pipe(\n  getConstructor,\n  R.equals(SERVER_DH_PARAMS_OK),\n);\n\n/**\n * @param {ArrayBuffer} - message buffer\n * @returns {boolean}\n */\nexport const isServerDHInnerData = R.pipe(\n  getConstructor,\n  R.equals(SERVER_DH_INNER_DATA),\n);\n\n/**\n * @param {ArrayBuffer} - message buffer\n * @returns {boolean}\n */\nexport const isClienDHInnerData = R.pipe(\n  getConstructor,\n  R.equals(CLIENT_DH_INNER_DATA),\n);\n\n/**\n * @param {ArrayBuffer} - message buffer\n * @returns {boolean}\n */\nexport const isSetClientDHParams = R.pipe(\n  getConstructor,\n  R.equals(SET_CLIENT_DH_PARAMS),\n);\n\n/**\n * @param {ArrayBuffer} - message buffer\n * @returns {boolean}\n */\nexport const isDHGenOk = R.pipe(\n  getConstructor,\n  R.equals(DH_GEN_OK),\n);\n\n/**\n * @param {ArrayBuffer} - message buffer\n * @returns {boolean}\n */\nexport const isDHGenRetry = R.pipe(\n  getConstructor,\n  R.equals(DH_GEN_RETRY),\n);\n\n/**\n * @param {ArrayBuffer} - message buffer\n * @returns {boolean}\n */\nexport const isDHGenFail = R.pipe(\n  getConstructor,\n  R.equals(DH_GEN_FAIL),\n);\n\nexport const isMessageOf = R.propEq(CONSTRUCTOR_KEY);\n\nexport const isMessageOfType = R.propEq(TYPE_KEY);\n\nexport const isMethodOf = R.propEq(METHOD_KEY);\n\nexport const toBigInt = (x) => BigInt(x);\n\nconst pow = (x, y) => x ** y;\n\nexport const add = (x, y) => x + y;\n\nconst base256 = R.pipe(toBigInt, R.partial(pow, [BigInt(256)]));\n\nexport const getBase = R.pipe(\n  R.of,\n  R.ap([\n    R.identity,\n    R.pipe(R.length, R.times(base256)),\n  ]),\n  R.apply(R.zip),\n);\n","import _curry1 from './internal/_curry1.js';\n\n/**\n * Takes a function `fn`, which takes a single array argument, and returns a\n * function which:\n *\n *   - takes any number of positional arguments;\n *   - passes these arguments to `fn` as an array; and\n *   - returns the result.\n *\n * In other words, `R.unapply` derives a variadic function from a function which\n * takes an array. `R.unapply` is the inverse of [`R.apply`](#apply).\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Function\n * @sig ([*...] -> a) -> (*... -> a)\n * @param {Function} fn\n * @return {Function}\n * @see R.apply\n * @example\n *\n *      R.unapply(JSON.stringify)(1, 2, 3); //=> '[1,2,3]'\n * @symb R.unapply(f)(a, b) = f([a, b])\n */\nvar unapply = /*#__PURE__*/_curry1(function unapply(fn) {\n  return function () {\n    return fn(Array.prototype.slice.call(arguments, 0));\n  };\n});\nexport default unapply;","/**\n * Splits vector to buffer array of each values\n * @param {Function} loadItem - function that allows load item\n * @param {ArrayBuffer} buffer\n * @param {boolean} [withOffset] - return offset value or just vector structure\n * @returns {*[]}\n */\nexport default function loadVector(loadItem, buffer, withOffset) {\n  // TODO: allow to parse vectors with any values\n  const count = (new Uint32Array(buffer.slice(4), 0, 1))[0];\n\n  const items = [];\n  let offset = 8;\n\n  for (let i = 0; i < count; i += 1) {\n    const itemBuffer = buffer.slice(offset);\n    const { value: item, offset: itemOffset } = loadItem(itemBuffer, true);\n    items.push(item);\n    offset += itemOffset;\n  }\n\n  return (withOffset) ? { offset, value: items } : items;\n}\n","import _curry2 from './internal/_curry2.js';\n\n/**\n * See if an object (`val`) is an instance of the supplied constructor. This\n * function will check up the inheritance chain, if any.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category Type\n * @sig (* -> {*}) -> a -> Boolean\n * @param {Object} ctor A constructor\n * @param {*} val The value to test\n * @return {Boolean}\n * @example\n *\n *      R.is(Object, {}); //=> true\n *      R.is(Number, 1); //=> true\n *      R.is(Object, 1); //=> false\n *      R.is(String, 's'); //=> true\n *      R.is(String, new String('')); //=> true\n *      R.is(Object, new String('')); //=> true\n *      R.is(Object, 's'); //=> false\n *      R.is(Number, {}); //=> false\n */\nvar is = /*#__PURE__*/_curry2(function is(Ctor, val) {\n  return val != null && val.constructor === Ctor || val instanceof Ctor;\n});\nexport default is;","export default function _isObject(x) {\n  return Object.prototype.toString.call(x) === '[object Object]';\n}","import _curry1 from './internal/_curry1.js';\nimport _isArguments from './internal/_isArguments.js';\nimport _isArray from './internal/_isArray.js';\nimport _isObject from './internal/_isObject.js';\nimport _isString from './internal/_isString.js';\n\n/**\n * Returns the empty value of its argument's type. Ramda defines the empty\n * value of Array (`[]`), Object (`{}`), String (`''`), and Arguments. Other\n * types are supported if they define `<Type>.empty`,\n * `<Type>.prototype.empty` or implement the\n * [FantasyLand Monoid spec](https://github.com/fantasyland/fantasy-land#monoid).\n *\n * Dispatches to the `empty` method of the first argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category Function\n * @sig a -> a\n * @param {*} x\n * @return {*}\n * @example\n *\n *      R.empty(Just(42));      //=> Nothing()\n *      R.empty([1, 2, 3]);     //=> []\n *      R.empty('unicorns');    //=> ''\n *      R.empty({x: 1, y: 2});  //=> {}\n */\nvar empty = /*#__PURE__*/_curry1(function empty(x) {\n  return x != null && typeof x['fantasy-land/empty'] === 'function' ? x['fantasy-land/empty']() : x != null && x.constructor != null && typeof x.constructor['fantasy-land/empty'] === 'function' ? x.constructor['fantasy-land/empty']() : x != null && typeof x.empty === 'function' ? x.empty() : x != null && x.constructor != null && typeof x.constructor.empty === 'function' ? x.constructor.empty() : _isArray(x) ? [] : _isString(x) ? '' : _isObject(x) ? {} : _isArguments(x) ? function () {\n    return arguments;\n  }() : void 0 // else\n  ;\n});\nexport default empty;","import _curry1 from './internal/_curry1.js';\nimport empty from './empty.js';\nimport equals from './equals.js';\n\n/**\n * Returns `true` if the given value is its type's empty value; `false`\n * otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Logic\n * @sig a -> Boolean\n * @param {*} x\n * @return {Boolean}\n * @see R.empty\n * @example\n *\n *      R.isEmpty([1, 2, 3]);   //=> false\n *      R.isEmpty([]);          //=> true\n *      R.isEmpty('');          //=> true\n *      R.isEmpty(null);        //=> false\n *      R.isEmpty({});          //=> true\n *      R.isEmpty({length: 0}); //=> false\n */\nvar isEmpty = /*#__PURE__*/_curry1(function isEmpty(x) {\n  return x != null && equals(x, empty(x));\n});\nexport default isEmpty;","import _isArrayLike from './_isArrayLike.js';\n\n/**\n * `_makeFlat` is a helper function that returns a one-level or fully recursive\n * function based on the flag passed in.\n *\n * @private\n */\nexport default function _makeFlat(recursive) {\n  return function flatt(list) {\n    var value, jlen, j;\n    var result = [];\n    var idx = 0;\n    var ilen = list.length;\n\n    while (idx < ilen) {\n      if (_isArrayLike(list[idx])) {\n        value = recursive ? flatt(list[idx]) : list[idx];\n        j = 0;\n        jlen = value.length;\n        while (j < jlen) {\n          result[result.length] = value[j];\n          j += 1;\n        }\n      } else {\n        result[result.length] = list[idx];\n      }\n      idx += 1;\n    }\n    return result;\n  };\n}","import _curry1 from './internal/_curry1.js';\nimport _makeFlat from './internal/_makeFlat.js';\n\n/**\n * Returns a new list by pulling every item out of it (and all its sub-arrays)\n * and putting them in a new array, depth-first.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [b]\n * @param {Array} list The array to consider.\n * @return {Array} The flattened list.\n * @see R.unnest\n * @example\n *\n *      R.flatten([1, 2, [3, 4], 5, [6, [7, 8, [9, [10, 11], 12]]]]);\n *      //=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n */\nvar flatten = /*#__PURE__*/_curry1( /*#__PURE__*/_makeFlat(true));\nexport default flatten;","import * as R from 'ramda';\nimport { isWithOffset, withConstantOffset } from '../../utils';\n\nfunction loadInt(buffer) {\n  return new Uint32Array(buffer, 0, 1)[0];\n}\n\nexport default R.cond([\n  [isWithOffset, withConstantOffset(loadInt, 4)],\n  [R.T, loadInt],\n]);\n","/**\n * @param {Number} value\n * @returns {ArrayBuffer}\n */\nexport default function dumpInt(value) {\n  const buffer = new ArrayBuffer(4);\n  const view = new Uint32Array(buffer);\n  view[0] = value;\n  return buffer;\n}\n","import * as R from 'ramda';\nimport { isWithOffset, withConstantOffset } from '../../utils';\n\n/**\n * @param {ArrayBuffer} buffer\n * @returns {BigInt}\n */\nfunction loadBigInt(buffer) {\n  return (new BigUint64Array(buffer, 0, 1))[0];\n}\n\nexport default R.cond([\n  [isWithOffset, withConstantOffset(loadBigInt, 8)],\n  [R.T, loadBigInt],\n]);\n","/**\n * @param {BigInt} value\n * @returns {ArrayBuffer}\n */\nexport default function dumpBigInt(value) {\n  const buffer = new ArrayBuffer(8);\n  const view = new BigUint64Array(buffer);\n  view[0] = value;\n  return buffer;\n}\n","import * as R from 'ramda';\n/**\n * @param {ArrayBuffer} buffer\n * @returns {boolean}\n */\nimport { BOOL_TRUE } from '../../constants';\nimport { isWithOffset, withConstantOffset } from '../../utils';\n\nfunction loadBool(buffer) {\n  return (new Uint32Array(buffer, 0, 1))[0] === BOOL_TRUE;\n}\n\nexport default R.cond([\n  [isWithOffset, withConstantOffset(loadBool, 4)],\n  [R.T, loadBool],\n]);\n","import { BOOL_FALSE, BOOL_TRUE } from '../../constants';\n\nexport default function dumpBool(value) {\n  const buffer = new ArrayBuffer(4);\n  const view = new Uint32Array(buffer, 0, 1);\n  view[0] = (value) ? BOOL_TRUE : BOOL_FALSE;\n  return buffer;\n}\n","import _curry1 from './internal/_curry1.js';\nimport nAry from './nAry.js';\n\n/**\n * Wraps a function of any arity (including nullary) in a function that accepts\n * exactly 1 parameter. Any extraneous parameters will not be passed to the\n * supplied function.\n *\n * @func\n * @memberOf R\n * @since v0.2.0\n * @category Function\n * @sig (* -> b) -> (a -> b)\n * @param {Function} fn The function to wrap.\n * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of\n *         arity 1.\n * @see R.binary, R.nAry\n * @example\n *\n *      const takesTwoArgs = function(a, b) {\n *        return [a, b];\n *      };\n *      takesTwoArgs.length; //=> 2\n *      takesTwoArgs(1, 2); //=> [1, 2]\n *\n *      const takesOneArg = R.unary(takesTwoArgs);\n *      takesOneArg.length; //=> 1\n *      // Only 1 argument is passed to the wrapped function\n *      takesOneArg(1, 2); //=> [1, undefined]\n * @symb R.unary(f)(a, b, c) = f(a)\n */\nvar unary = /*#__PURE__*/_curry1(function unary(fn) {\n  return nAry(1, fn);\n});\nexport default unary;","import _curry2 from './internal/_curry2.js';\n\n/**\n * Returns `true` if the first argument is greater than the second; `false`\n * otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig Ord a => a -> a -> Boolean\n * @param {*} a\n * @param {*} b\n * @return {Boolean}\n * @see R.lt\n * @example\n *\n *      R.gt(2, 1); //=> true\n *      R.gt(2, 2); //=> false\n *      R.gt(2, 3); //=> false\n *      R.gt('a', 'z'); //=> false\n *      R.gt('z', 'a'); //=> true\n */\nvar gt = /*#__PURE__*/_curry2(function gt(a, b) {\n  return a > b;\n});\nexport default gt;","import _curry1 from './internal/_curry1.js';\n\n/**\n * A function that returns the `!` of its argument. It will return `true` when\n * passed false-y value, and `false` when passed a truth-y one.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Logic\n * @sig * -> Boolean\n * @param {*} a any value\n * @return {Boolean} the logical inverse of passed argument.\n * @see R.complement\n * @example\n *\n *      R.not(true); //=> false\n *      R.not(false); //=> true\n *      R.not(0); //=> true\n *      R.not(1); //=> false\n */\nvar not = /*#__PURE__*/_curry1(function not(a) {\n  return !a;\n});\nexport default not;","import _curry2 from './internal/_curry2.js';\n\n/**\n * Subtracts its second argument from its first argument.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Math\n * @sig Number -> Number -> Number\n * @param {Number} a The first value.\n * @param {Number} b The second value.\n * @return {Number} The result of `a - b`.\n * @see R.add\n * @example\n *\n *      R.subtract(10, 8); //=> 2\n *\n *      const minus5 = R.subtract(R.__, 5);\n *      minus5(17); //=> 12\n *\n *      const complementaryAngle = R.subtract(90);\n *      complementaryAngle(30); //=> 60\n *      complementaryAngle(72); //=> 18\n */\nvar subtract = /*#__PURE__*/_curry2(function subtract(a, b) {\n  return Number(a) - Number(b);\n});\nexport default subtract;","export default function _isFunction(x) {\n  return Object.prototype.toString.call(x) === '[object Function]';\n}","import _indexOf from './_indexOf.js';\n\nexport default function _includes(a, list) {\n  return _indexOf(list, a, 0) >= 0;\n}","import equals from '../equals.js';\n\nexport default function _indexOf(list, a, idx) {\n  var inf, item;\n  // Array.prototype.indexOf doesn't exist below IE9\n  if (typeof list.indexOf === 'function') {\n    switch (typeof a) {\n      case 'number':\n        if (a === 0) {\n          // manually crawl the list to distinguish between +0 and -0\n          inf = 1 / a;\n          while (idx < list.length) {\n            item = list[idx];\n            if (item === 0 && 1 / item === inf) {\n              return idx;\n            }\n            idx += 1;\n          }\n          return -1;\n        } else if (a !== a) {\n          // NaN\n          while (idx < list.length) {\n            item = list[idx];\n            if (typeof item === 'number' && item !== item) {\n              return idx;\n            }\n            idx += 1;\n          }\n          return -1;\n        }\n        // non-zero numbers can utilise Set\n        return list.indexOf(a, idx);\n\n      // all these types can utilise Set\n      case 'string':\n      case 'boolean':\n      case 'function':\n      case 'undefined':\n        return list.indexOf(a, idx);\n\n      case 'object':\n        if (a === null) {\n          // null can utilise Set\n          return list.indexOf(a, idx);\n        }\n    }\n  }\n  // anything else not covered above, defer to R.equals\n  while (idx < list.length) {\n    if (equals(list[idx], a)) {\n      return idx;\n    }\n    idx += 1;\n  }\n  return -1;\n}","export default function _quote(s) {\n  var escaped = s.replace(/\\\\/g, '\\\\\\\\').replace(/[\\b]/g, '\\\\b') // \\b matches word boundary; [\\b] matches backspace\n  .replace(/\\f/g, '\\\\f').replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r').replace(/\\t/g, '\\\\t').replace(/\\v/g, '\\\\v').replace(/\\0/g, '\\\\0');\n\n  return '\"' + escaped.replace(/\"/g, '\\\\\"') + '\"';\n}","/**\n * Polyfill from <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString>.\n */\nvar pad = function pad(n) {\n  return (n < 10 ? '0' : '') + n;\n};\n\nvar _toISOString = typeof Date.prototype.toISOString === 'function' ? function _toISOString(d) {\n  return d.toISOString();\n} : function _toISOString(d) {\n  return d.getUTCFullYear() + '-' + pad(d.getUTCMonth() + 1) + '-' + pad(d.getUTCDate()) + 'T' + pad(d.getUTCHours()) + ':' + pad(d.getUTCMinutes()) + ':' + pad(d.getUTCSeconds()) + '.' + (d.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) + 'Z';\n};\n\nexport default _toISOString;","import _curry2 from './_curry2.js';\nimport _xfBase from './_xfBase.js';\n\nvar XFilter = /*#__PURE__*/function () {\n  function XFilter(f, xf) {\n    this.xf = xf;\n    this.f = f;\n  }\n  XFilter.prototype['@@transducer/init'] = _xfBase.init;\n  XFilter.prototype['@@transducer/result'] = _xfBase.result;\n  XFilter.prototype['@@transducer/step'] = function (result, input) {\n    return this.f(input) ? this.xf['@@transducer/step'](result, input) : result;\n  };\n\n  return XFilter;\n}();\n\nvar _xfilter = /*#__PURE__*/_curry2(function _xfilter(f, xf) {\n  return new XFilter(f, xf);\n});\nexport default _xfilter;","import _curry2 from './internal/_curry2.js';\nimport _dispatchable from './internal/_dispatchable.js';\nimport _filter from './internal/_filter.js';\nimport _isObject from './internal/_isObject.js';\nimport _reduce from './internal/_reduce.js';\nimport _xfilter from './internal/_xfilter.js';\nimport keys from './keys.js';\n\n/**\n * Takes a predicate and a `Filterable`, and returns a new filterable of the\n * same type containing the members of the given filterable which satisfy the\n * given predicate. Filterable objects include plain objects or any object\n * that has a filter method such as `Array`.\n *\n * Dispatches to the `filter` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Filterable f => (a -> Boolean) -> f a -> f a\n * @param {Function} pred\n * @param {Array} filterable\n * @return {Array} Filterable\n * @see R.reject, R.transduce, R.addIndex\n * @example\n *\n *      const isEven = n => n % 2 === 0;\n *\n *      R.filter(isEven, [1, 2, 3, 4]); //=> [2, 4]\n *\n *      R.filter(isEven, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}\n */\nvar filter = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable(['filter'], _xfilter, function (pred, filterable) {\n  return _isObject(filterable) ? _reduce(function (acc, key) {\n    if (pred(filterable[key])) {\n      acc[key] = filterable[key];\n    }\n    return acc;\n  }, {}, keys(filterable)) :\n  // else\n  _filter(pred, filterable);\n}));\nexport default filter;","export default function _filter(fn, list) {\n  var idx = 0;\n  var len = list.length;\n  var result = [];\n\n  while (idx < len) {\n    if (fn(list[idx])) {\n      result[result.length] = list[idx];\n    }\n    idx += 1;\n  }\n  return result;\n}","import _complement from './internal/_complement.js';\nimport _curry2 from './internal/_curry2.js';\nimport filter from './filter.js';\n\n/**\n * The complement of [`filter`](#filter).\n *\n * Acts as a transducer if a transformer is given in list position. Filterable\n * objects include plain objects or any object that has a filter method such\n * as `Array`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Filterable f => (a -> Boolean) -> f a -> f a\n * @param {Function} pred\n * @param {Array} filterable\n * @return {Array}\n * @see R.filter, R.transduce, R.addIndex\n * @example\n *\n *      const isOdd = (n) => n % 2 === 1;\n *\n *      R.reject(isOdd, [1, 2, 3, 4]); //=> [2, 4]\n *\n *      R.reject(isOdd, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}\n */\nvar reject = /*#__PURE__*/_curry2(function reject(pred, filterable) {\n  return filter(_complement(pred), filterable);\n});\nexport default reject;","export default function _complement(f) {\n  return function () {\n    return !f.apply(this, arguments);\n  };\n}","import _curry1 from './internal/_curry1.js';\nimport _toString from './internal/_toString.js';\n\n/**\n * Returns the string representation of the given value. `eval`'ing the output\n * should result in a value equivalent to the input value. Many of the built-in\n * `toString` methods do not satisfy this requirement.\n *\n * If the given value is an `[object Object]` with a `toString` method other\n * than `Object.prototype.toString`, this method is invoked with no arguments\n * to produce the return value. This means user-defined constructor functions\n * can provide a suitable `toString` method. For example:\n *\n *     function Point(x, y) {\n *       this.x = x;\n *       this.y = y;\n *     }\n *\n *     Point.prototype.toString = function() {\n *       return 'new Point(' + this.x + ', ' + this.y + ')';\n *     };\n *\n *     R.toString(new Point(1, 2)); //=> 'new Point(1, 2)'\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category String\n * @sig * -> String\n * @param {*} val\n * @return {String}\n * @example\n *\n *      R.toString(42); //=> '42'\n *      R.toString('abc'); //=> '\"abc\"'\n *      R.toString([1, 2, 3]); //=> '[1, 2, 3]'\n *      R.toString({foo: 1, bar: 2, baz: 3}); //=> '{\"bar\": 2, \"baz\": 3, \"foo\": 1}'\n *      R.toString(new Date('2001-02-03T04:05:06Z')); //=> 'new Date(\"2001-02-03T04:05:06.000Z\")'\n */\nvar toString = /*#__PURE__*/_curry1(function toString(val) {\n  return _toString(val, []);\n});\nexport default toString;","import _includes from './_includes.js';\nimport _map from './_map.js';\nimport _quote from './_quote.js';\nimport _toISOString from './_toISOString.js';\nimport keys from '../keys.js';\nimport reject from '../reject.js';\n\nexport default function _toString(x, seen) {\n  var recur = function recur(y) {\n    var xs = seen.concat([x]);\n    return _includes(y, xs) ? '<Circular>' : _toString(y, xs);\n  };\n\n  //  mapPairs :: (Object, [String]) -> [String]\n  var mapPairs = function (obj, keys) {\n    return _map(function (k) {\n      return _quote(k) + ': ' + recur(obj[k]);\n    }, keys.slice().sort());\n  };\n\n  switch (Object.prototype.toString.call(x)) {\n    case '[object Arguments]':\n      return '(function() { return arguments; }(' + _map(recur, x).join(', ') + '))';\n    case '[object Array]':\n      return '[' + _map(recur, x).concat(mapPairs(x, reject(function (k) {\n        return (/^\\d+$/.test(k)\n        );\n      }, keys(x)))).join(', ') + ']';\n    case '[object Boolean]':\n      return typeof x === 'object' ? 'new Boolean(' + recur(x.valueOf()) + ')' : x.toString();\n    case '[object Date]':\n      return 'new Date(' + (isNaN(x.valueOf()) ? recur(NaN) : _quote(_toISOString(x))) + ')';\n    case '[object Null]':\n      return 'null';\n    case '[object Number]':\n      return typeof x === 'object' ? 'new Number(' + recur(x.valueOf()) + ')' : 1 / x === -Infinity ? '-0' : x.toString(10);\n    case '[object String]':\n      return typeof x === 'object' ? 'new String(' + recur(x.valueOf()) + ')' : _quote(x);\n    case '[object Undefined]':\n      return 'undefined';\n    default:\n      if (typeof x.toString === 'function') {\n        var repr = x.toString();\n        if (repr !== '[object Object]') {\n          return repr;\n        }\n      }\n      return '{' + mapPairs(x, keys(x)).join(', ') + '}';\n  }\n}","import _curry2 from './internal/_curry2.js';\nimport _isArray from './internal/_isArray.js';\nimport _isFunction from './internal/_isFunction.js';\nimport _isString from './internal/_isString.js';\nimport toString from './toString.js';\n\n/**\n * Returns the result of concatenating the given lists or strings.\n *\n * Note: `R.concat` expects both arguments to be of the same type,\n * unlike the native `Array.prototype.concat` method. It will throw\n * an error if you `concat` an Array with a non-Array value.\n *\n * Dispatches to the `concat` method of the first argument, if present.\n * Can also concatenate two members of a [fantasy-land\n * compatible semigroup](https://github.com/fantasyland/fantasy-land#semigroup).\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [a] -> [a]\n * @sig String -> String -> String\n * @param {Array|String} firstList The first list\n * @param {Array|String} secondList The second list\n * @return {Array|String} A list consisting of the elements of `firstList` followed by the elements of\n * `secondList`.\n *\n * @example\n *\n *      R.concat('ABC', 'DEF'); // 'ABCDEF'\n *      R.concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]\n *      R.concat([], []); //=> []\n */\nvar concat = /*#__PURE__*/_curry2(function concat(a, b) {\n  if (_isArray(a)) {\n    if (_isArray(b)) {\n      return a.concat(b);\n    }\n    throw new TypeError(toString(b) + ' is not an array');\n  }\n  if (_isString(a)) {\n    if (_isString(b)) {\n      return a + b;\n    }\n    throw new TypeError(toString(b) + ' is not a string');\n  }\n  if (a != null && _isFunction(a['fantasy-land/concat'])) {\n    return a['fantasy-land/concat'](b);\n  }\n  if (a != null && _isFunction(a.concat)) {\n    return a.concat(b);\n  }\n  throw new TypeError(toString(a) + ' does not have a method named \"concat\" or \"fantasy-land/concat\"');\n});\nexport default concat;","import add from './add.js';\n\n/**\n * Increments its argument.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Math\n * @sig Number -> Number\n * @param {Number} n\n * @return {Number} n + 1\n * @see R.dec\n * @example\n *\n *      R.inc(42); //=> 43\n */\nvar inc = /*#__PURE__*/add(1);\nexport default inc;","import * as R from 'ramda';\n\nimport {\n  bigIntToUint8Array,\n  stringToUint8,\n  uint8ToBigInt,\n  uint8ToString,\n} from '../utils';\n\nexport const isShortString = R.pipe(\n  R.prop('length'),\n  R.gt(254),\n);\n\nexport const isLongString = R.pipe(\n  isShortString,\n  R.not,\n);\n\nconst padEndBytes = R.pipe(\n  R.of,\n  R.ap([\n    R.identity,\n    R.pipe(\n      R.prop('length'),\n      R.modulo(R.__, 4),\n      R.subtract(4),\n      R.modulo(R.__, 4),\n      R.times(R.always(0)),\n    ),\n  ]),\n  R.flatten,\n);\n\nconst toShortTlString = R.pipe(\n  R.of,\n  R.ap([\n    R.pipe(R.prop('length'), R.of), // first byte is an length,\n    R.identity, // current string\n  ]),\n  R.flatten,\n  padEndBytes,\n);\n\n\nconst toLongTlString = R.pipe(\n  R.of,\n  R.ap([\n    R.pipe(\n      R.prop('length'),\n      R.curryN(2)(bigIntToUint8Array)(R.__, true),\n      R.concat([254]),\n      R.flatten,\n      padEndBytes,\n    ),\n    R.identity,\n  ]),\n  R.flatten,\n  padEndBytes,\n);\n\n\n/**\n * Takes array of bytes and return them as telegram string. Telegram string info:\n *\n * @param {Number[]} arr\n * @returns {Number[]} - update r with length info\n */\nexport const toTlString = R.cond([\n  [isShortString, toShortTlString],\n  [R.T, toLongTlString],\n]);\n\n\nconst fromTlShortString = R.pipe(\n  R.of,\n  R.ap([\n    R.always(1),\n    R.pipe(R.nth(0), R.inc),\n    R.identity,\n  ]),\n  R.apply(R.slice),\n);\n\n/**\n * Parse bytes array to int with little endian notation\n * @type {Function|*}\n */\nconst uint8ToInt = R.pipe(\n  R.flip(R.curryN(2)(uint8ToBigInt))(true),\n  Number,\n);\n\nconst fromTlLongString = R.pipe(\n  R.of,\n  R.ap([\n    R.always(4),\n    R.pipe(R.slice(1, 4), uint8ToInt, R.add(4)),\n    R.identity,\n  ]),\n  R.apply(R.slice),\n);\n\n/**\n * Takes array of bytes that represents\n * @param {Number[]} tlString - serialized telegram string\n */\nexport const fromTlString = R.cond([\n  [R.pipe(R.nth(0), R.gt(254)), fromTlShortString],\n  [R.T, fromTlLongString],\n]);\n\nconst getPaddingCount = R.pipe(\n  R.modulo(R.__, 4),\n  R.subtract(4),\n  R.modulo(R.__, 4),\n);\n\n/**\n * get's string from arrayBuffer\n * @param arrayBuffer\n * @param offset\n * @returns {{incomingString: number[], offset: number}}\n */\nexport function getStringFromArrayBuffer(arrayBuffer, offset = 0) {\n  const stringMarker = new Uint8Array(arrayBuffer, offset);\n  if (stringMarker[0] === 254) {\n    const stringLengthUint = new Uint8Array(arrayBuffer, offset + 1, 3);\n    const stringLength = uint8ToInt(stringLengthUint, true);\n    const incomingString = new Uint8Array(arrayBuffer, offset + 4, stringLength);\n    const paddingCount = getPaddingCount(stringLength);\n    return {\n      incomingString,\n      offset: offset + (4 + stringLength) + paddingCount,\n    };\n  }\n  const stringLength = stringMarker[0];\n  const incomingString = new Uint8Array(arrayBuffer, offset + 1, stringLength);\n  const paddingCount = getPaddingCount(1 + stringLength);\n  return {\n    incomingString,\n    offset: offset + (1 + stringLength) + paddingCount,\n  };\n}\n\nexport const stringToTlString = R.pipe(\n  stringToUint8,\n  toTlString,\n);\n\nexport const tlStringToString = R.pipe(\n  fromTlString,\n  uint8ToString,\n);\n","import * as R from 'ramda';\n\nimport { isWithOffset, uint8ToString } from '../../utils';\nimport { getStringFromArrayBuffer } from '../tlSerialization';\n\nconst tlStringWithOffset = R.unary(R.partialRight(getStringFromArrayBuffer, [0]));\n\nconst getString = R.pipe(\n  R.prop('incomingString'),\n  uint8ToString,\n);\n\nexport default R.cond([\n  [\n    isWithOffset,\n    R.pipe(\n      tlStringWithOffset,\n      (x) => ({\n        value: getString(x),\n        offset: R.prop('offset', x),\n      }),\n    ),\n  ],\n  [R.T, R.pipe(tlStringWithOffset, getString)],\n]);\n","/**\n * @param {string} value\n * @returns {ArrayBuffer}\n */\nimport { stringToTlString } from '../tlSerialization';\nimport { copyBytes } from '../../utils';\n\nexport default function dumpString(value) {\n  const stringBytes = stringToTlString(value);\n  const buffer = new ArrayBuffer(stringBytes.length);\n  const view = new Uint8Array(buffer);\n  copyBytes(stringBytes, view);\n\n  return buffer;\n}\n","import * as R from 'ramda';\n\nimport { dumpInt } from '../int';\nimport { dumpBigInt } from '../bigInt';\nimport { dumpBool } from '../bool';\nimport { dumpString } from '../string';\nimport { VECTOR } from '../../constants';\nimport { getEmptyArrayBuffer, mergeArrayBuffer } from '../../utils';\n\n/**\n * @param {Array<*>} value\n * @returns {ArrayBuffer}\n */\nconst buildVectorPrefixBuffer = R.pipe(\n  R.of,\n  R.ap([R.always(dumpInt(VECTOR)), R.pipe(R.prop('length'), dumpInt)]),\n  R.apply(mergeArrayBuffer),\n);\n\n/**\n *\n * @param {[Function]} dumpFunc  - function to dump vector\n * @param {Array<*>} value - Array to dump\n * @returns {ArrayBuffer}\n */\nexport default function dumpVector(dumpFunc, value) {\n  let getDumpFunc;\n  if (!value) {\n    getDumpFunc = R.cond([\n      [R.is(Boolean), R.always(dumpBool)],\n      [R.is(Number), R.always(dumpInt)],\n      [R.is(BigInt), R.always(dumpBigInt)],\n      [R.is(String), R.always(dumpString)],\n      [R.is(Array), R.always(dumpVector)],\n      [R.T, R.always(getEmptyArrayBuffer)],\n    ]);\n    value = dumpFunc;\n  } else {\n    getDumpFunc = R.always(dumpFunc);\n  }\n\n  const dumpNotEmptyArray = R.pipe(\n    R.of,\n    R.ap([R.pipe(R.nth(0), getDumpFunc), R.identity]),\n    R.apply(R.map),\n  );\n\n  const dumpArray = R.cond([\n    [R.isEmpty, getEmptyArrayBuffer],\n    [R.T, dumpNotEmptyArray],\n  ]);\n\n  return R.pipe(\n    R.of,\n    R.ap([buildVectorPrefixBuffer, dumpArray]),\n    R.flatten,\n    R.reduce(mergeArrayBuffer, getEmptyArrayBuffer()),\n  )(value);\n}\n","import * as R from 'ramda';\n\nimport { buildLoadFunc } from '../../utils';\nimport { loadBigInt } from '../bigInt';\nimport { loadInt } from '../int';\n\nconst loadMsgId = loadBigInt;\nconst loadSeqNo = loadInt;\nconst loadBytes = loadInt;\n\n/**\n * @param {ArrayBuffer} buffer\n * @param {boolean}  [withOffset],\n * @param {Function} load,\n * @returns {{}}\n */\nfunction loadMessage(buffer, withOffset, load) {\n  return buildLoadFunc([\n    ['msgId', loadMsgId],\n    ['seqNo', loadSeqNo],\n    ['bytes', loadBytes],\n    ['body', load],\n  ])(buffer, withOffset);\n}\n\nexport default R.unapply(R.pipe(\n  R.of,\n  R.ap([R.nth(0), R.pipe(R.nth(1), R.equals(true)), R.nth(-1)]),\n  R.apply(loadMessage),\n));\n","import * as R from 'ramda';\n\nimport {\n  CONSTRUCTOR_KEY,\n  MESSAGE_CONTAINER_CONSTRUCTOR,\n  MESSAGE_CONTAINER_TYPE,\n  TYPE_KEY,\n} from '../../constants';\nimport { loadVector } from '../vector';\nimport loadMessage from './loadMessage';\n\n/**\n * Takes message containers buffer and return list of message buffers for them\n * @param {ArrayBuffer} buffer\n * @param {boolean} withOffset\n * @param {Function} load\n * @returns {Array<ArrayBuffer>}\n */\nfunction loadMessageContainer(buffer, withOffset, load) {\n  const loadMsg = R.partialRight(loadMessage, [load]);\n  const { value: messages, offset } = loadVector(loadMsg, buffer, true);\n  const value = {\n    [TYPE_KEY]: MESSAGE_CONTAINER_TYPE,\n    [CONSTRUCTOR_KEY]: MESSAGE_CONTAINER_CONSTRUCTOR,\n    messages,\n  };\n  return withOffset ? { offset: offset + 4, value } : value;\n}\n\nexport default R.unapply(R.pipe(\n  R.of,\n  R.ap([R.nth(0), R.pipe(R.nth(1), R.equals(true)), R.nth(-1)]),\n  R.apply(loadMessageContainer),\n));\n","import * as R from 'ramda';\nimport { dumpInt } from '../int';\nimport { mergeAllArrayBuffers, buildDumpFunc } from '../../utils';\nimport { dumpBigInt } from '../bigInt';\n\nconst dumpMsgId = R.pipe(R.prop('msgId'), dumpBigInt);\nconst dumpSeqNo = R.pipe(R.prop('seqNo'), dumpInt);\n\n\nconst buildDumpBodyFunc = (dumpFunc) => R.pipe(\n  R.prop('body'),\n  dumpFunc,\n  R.of,\n  R.ap([\n    R.pipe(R.prop('byteLength'), dumpInt),\n    R.identity,\n  ]),\n  mergeAllArrayBuffers,\n);\n\n/**\n * @param msg - message object\n * @returns {ArrayBuffer}\n */\nexport default function dumpMessage(msg, dumpFunc) {\n  return buildDumpFunc([\n    dumpMsgId,\n    dumpSeqNo,\n    buildDumpBodyFunc(dumpFunc),\n  ])(msg);\n}\n","import * as R from 'ramda';\nimport { MESSAGE_CONTAINER } from '../../constants';\nimport { dumpInt } from '../int';\nimport { buildDumpFunc, mergeAllArrayBuffers } from '../../utils';\nimport dumpMessage from './dumpMessage';\n\nconst dumpType = R.pipe(R.always(MESSAGE_CONTAINER), dumpInt);\nconst dumpCount = R.pipe(R.path(['messages', 'length']), dumpInt);\n\n/**\n * Dump message container\n * @param {{}} msg\n * @param {Function} dumpFunc\n * @returns {ArrayBuffer}\n */\nexport default function dumpMessageContainer(msg, dumpFunc) {\n  return buildDumpFunc([\n    dumpType,\n    dumpCount,\n    R.pipe(\n      R.prop('messages'),\n      R.map(R.partialRight(dumpMessage, [dumpFunc])),\n      mergeAllArrayBuffers,\n    ),\n  ])(msg);\n}\n","import { buildLoadFunc, buildTypeLoader, buildConstructorLoader } from '../../utils';\nimport { loadBigInt } from '../bigInt';\nimport { loadInt } from '../int';\nimport {\n  BAD_MSG_NOTIFICATION_TYPE,\n  BAD_MSG_NOTIFICATION_CONSTRUCTOR,\n  TYPE_KEY,\n  CONSTRUCTOR_KEY,\n} from '../../constants';\n\nconst loadType = buildTypeLoader(BAD_MSG_NOTIFICATION_TYPE);\nconst loadConstructor = buildConstructorLoader(BAD_MSG_NOTIFICATION_CONSTRUCTOR);\nconst loadBadMsgId = loadBigInt;\nconst loadSeqNo = loadInt;\nconst loadErrorCode = loadInt;\n\n/**\n * Parse bad msg notification with schema:\n * bad_msg_notification#a7eff811 bad_msg_id:long bad_msg_seqno:int error_code:int\n * @param {ArrayBuffer} buffer\n * @returns {{}}\n */\nexport default buildLoadFunc([\n  [TYPE_KEY, loadType],\n  [CONSTRUCTOR_KEY, loadConstructor],\n  ['badMsgId', loadBadMsgId],\n  ['badSeqNo', loadSeqNo],\n  ['errorCode', loadErrorCode],\n]);\n","import * as R from 'ramda';\n\nimport { dumpInt } from '../int';\nimport { dumpBigInt } from '../bigInt';\nimport { buildDumpFunc } from '../../utils';\nimport { BAD_MSG_NOTIFICATION } from '../../constants';\n\n\nconst dumpConstructor = R.always(dumpInt(BAD_MSG_NOTIFICATION));\nconst dumpMsgId = R.pipe(R.prop('badMsgId'), dumpBigInt);\nconst dumpSeqNo = R.pipe(R.prop('badSeqNo'), dumpInt);\nconst dumpErrorCode = R.pipe(R.prop('errorCode'), dumpInt);\n\n/**\n * @param {*} value\n * @returns {ArrayBuffer}\n */\nexport default buildDumpFunc([dumpConstructor, dumpMsgId, dumpSeqNo, dumpErrorCode]);\n","import { buildLoadFunc, buildTypeLoader, buildConstructorLoader } from '../../utils';\nimport { loadBigInt } from '../bigInt';\nimport { loadInt } from '../int';\nimport {\n  BAD_MSG_NOTIFICATION_TYPE,\n  BAD_SERVER_SALT_CONSTRUCTOR,\n  CONSTRUCTOR_KEY,\n  TYPE_KEY,\n} from '../../constants';\n\nconst loadType = buildTypeLoader(BAD_MSG_NOTIFICATION_TYPE);\nconst loadConstructor = buildConstructorLoader(BAD_SERVER_SALT_CONSTRUCTOR);\nconst loadBadMsgId = loadBigInt;\nconst loadBadSeqNo = loadInt;\nconst loadErrorCode = loadInt;\nconst loadNewServerSalt = loadBigInt;\n\n/**\n * @param {ArrayBuffer} buffer\n * @returns {*} - loaded message\n */\nexport default buildLoadFunc([\n  [TYPE_KEY, loadType],\n  [CONSTRUCTOR_KEY, loadConstructor],\n  ['badMsgId', loadBadMsgId],\n  ['badSeqNo', loadBadSeqNo],\n  ['errorCode', loadErrorCode],\n  ['newServerSalt', loadNewServerSalt],\n]);\n","import * as R from 'ramda';\nimport { buildDumpFunc } from '../../utils';\nimport { dumpInt } from '../int';\nimport { BAD_SERVER_SALT } from '../../constants';\nimport { dumpBigInt } from '../bigInt';\n\nconst dumpConstructor = R.always(dumpInt(BAD_SERVER_SALT));\nconst dumpBadMsgId = R.pipe(R.prop('badMsgId'), dumpBigInt);\nconst dumpBadSeqNo = R.pipe(R.prop('badSeqNo'), dumpInt);\nconst dumpErrorCode = R.pipe(R.prop('errorCode'), dumpInt);\nconst dumpNewServerSalt = R.pipe(R.prop('newServerSalt'), dumpBigInt);\n\n/**\n * @param {{*}} value\n * @returns {ArrayBuffer}\n */\nexport default buildDumpFunc([\n  dumpConstructor,\n  dumpBadMsgId,\n  dumpBadSeqNo,\n  dumpErrorCode,\n  dumpNewServerSalt,\n]);\n","import * as R from 'ramda';\nimport { loadVector } from '../vector';\nimport { loadBigInt } from '../bigInt';\nimport {\n  CONSTRUCTOR_KEY, MSGS_ACK_CONSTRUCTOR, MSGS_ACK_TYPE, TYPE_KEY,\n} from '../../constants';\nimport {\n  buildLoadFunc,\n  buildTypeLoader,\n  buildConstructorLoader,\n} from '../../utils';\n\nconst loadType = buildTypeLoader(MSGS_ACK_TYPE);\nconst loadConstructor = buildConstructorLoader(MSGS_ACK_CONSTRUCTOR);\nconst loadMsgIds = R.partial(loadVector, [loadBigInt]);\n\nexport default buildLoadFunc([\n  [TYPE_KEY, loadType],\n  [CONSTRUCTOR_KEY, loadConstructor],\n  ['msgIds', loadMsgIds],\n]);\n","import * as R from 'ramda';\n\nimport { dumpInt } from '../int';\nimport { dumpVector } from '../vector';\nimport { MSGS_ACK } from '../../constants';\nimport { mergeArrayBuffer } from '../../utils';\n\nexport default R.pipe(\n  R.of,\n  R.ap([\n    R.always(dumpInt(MSGS_ACK)),\n    R.pipe(R.prop('msgIds'), dumpVector),\n  ]),\n  R.apply(mergeArrayBuffer),\n);\n","// 016d5cf300000000bc860b5ebdbc1522b57572991235646130343337306165386264323132373800\n// f35c6d01 5e0b86bc00000000 2215bcbd 997275b5\nimport * as R from 'ramda';\n\nimport {\n  CONSTRUCTOR_KEY,\n  RPC_RESULT_CONSTRUCTOR,\n  RPC_RESULT_TYPE,\n  TYPE_KEY,\n} from '../../constants';\nimport { buildLoadFunc, buildConstructorLoader, buildTypeLoader } from '../../utils';\nimport { loadBigInt } from '../bigInt';\n\nconst loadType = buildTypeLoader(RPC_RESULT_TYPE);\nconst loadConstructor = buildConstructorLoader(RPC_RESULT_CONSTRUCTOR);\nconst loadReqMsgId = loadBigInt;\n\n/**\n * Parse rpc result by schema\n * @param {ArrayBuffer} buffer\n * @param {boolean} withOffset\n * @param {Function} loadMessage\n * @return {{\n *   msgId: BigInt,\n *   message: *\n * }}\n */\nfunction loadRpcResult(buffer, withOffset, loadMessage) {\n  return buildLoadFunc([\n    [TYPE_KEY, loadType],\n    [CONSTRUCTOR_KEY, loadConstructor],\n    ['reqMsgId', loadReqMsgId],\n    ['result', loadMessage],\n  ])(buffer, withOffset);\n}\n\nexport default R.unapply(R.pipe(\n  R.of,\n  R.ap([R.nth(0), R.pipe(R.nth(1), R.equals(true)), R.nth(-1)]),\n  R.apply(loadRpcResult),\n));\n","import _curry1 from './internal/_curry1.js';\nimport curryN from './curryN.js';\n\n/**\n * Returns a curried equivalent of the provided function. The curried function\n * has two unusual capabilities. First, its arguments needn't be provided one\n * at a time. If `f` is a ternary function and `g` is `R.curry(f)`, the\n * following are equivalent:\n *\n *   - `g(1)(2)(3)`\n *   - `g(1)(2, 3)`\n *   - `g(1, 2)(3)`\n *   - `g(1, 2, 3)`\n *\n * Secondly, the special placeholder value [`R.__`](#__) may be used to specify\n * \"gaps\", allowing partial application of any combination of arguments,\n * regardless of their positions. If `g` is as above and `_` is [`R.__`](#__),\n * the following are equivalent:\n *\n *   - `g(1, 2, 3)`\n *   - `g(_, 2, 3)(1)`\n *   - `g(_, _, 3)(1)(2)`\n *   - `g(_, _, 3)(1, 2)`\n *   - `g(_, 2)(1)(3)`\n *   - `g(_, 2)(1, 3)`\n *   - `g(_, 2)(_, 3)(1)`\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (* -> a) -> (* -> a)\n * @param {Function} fn The function to curry.\n * @return {Function} A new, curried function.\n * @see R.curryN, R.partial\n * @example\n *\n *      const addFourNumbers = (a, b, c, d) => a + b + c + d;\n *\n *      const curriedAddFourNumbers = R.curry(addFourNumbers);\n *      const f = curriedAddFourNumbers(1, 2);\n *      const g = f(3);\n *      g(4); //=> 10\n */\nvar curry = /*#__PURE__*/_curry1(function curry(fn) {\n  return curryN(fn.length, fn);\n});\nexport default curry;","import * as R from 'ramda';\n\nimport { getEmptyArrayBuffer, mergeArrayBuffer } from '../../utils';\nimport { RPC_RESULT } from '../../constants';\nimport { dumpInt } from '../int';\nimport { dumpBigInt } from '../bigInt';\n\nconst dumpType = R.pipe(R.always(RPC_RESULT), dumpInt);\nconst dumpMsgId = R.pipe(R.prop('msgId'), dumpBigInt);\n\nconst buildDumpResultFunc = R.curry(R.binary(R.pipe))(R.prop('result'));\n\nconst buildDumpFuncs = R.pipe(\n  R.nth(-1),\n  R.of,\n  R.ap([R.always(dumpType), R.always(dumpMsgId), buildDumpResultFunc]),\n);\n\nexport default R.unapply(R.pipe(\n  R.of,\n  R.ap([\n    buildDumpFuncs,\n    R.pipe(R.nth(0), R.of),\n  ]),\n  R.apply(R.ap),\n  R.reduce(mergeArrayBuffer, getEmptyArrayBuffer()),\n));\n","import * as R from 'ramda';\n\nimport { loadVector } from '../vector';\nimport { loadBigInt } from '../bigInt';\nimport {\n  METHOD_KEY, MSGS_STATE_REQ_METHOD, MSGS_STATE_REQ_TYPE, TYPE_KEY,\n} from '../../constants';\nimport { buildLoadFunc, buildTypeLoader, buildMethodLoader } from '../../utils';\n\nconst loadType = buildTypeLoader(MSGS_STATE_REQ_TYPE);\nconst loadMethod = buildMethodLoader(MSGS_STATE_REQ_METHOD);\nconst loadMsgIds = R.partial(loadVector, [loadBigInt]);\n\n/**\n * @param {ArrayBuffer} buffer,\n * @param {Boolean} withOffset\n * @return {*}\n */\nexport default buildLoadFunc([\n  [TYPE_KEY, loadType],\n  [METHOD_KEY, loadMethod],\n  ['msgIds', loadMsgIds],\n]);\n","import * as R from 'ramda';\n\nimport { buildDumpFunc } from '../../utils';\nimport { MSGS_STATE_REQ } from '../../constants';\n\nimport { dumpVector } from '../vector';\nimport { dumpInt } from '../int';\n\nconst dumpConstructor = R.pipe(R.always(MSGS_STATE_REQ), dumpInt);\nconst dumpMsgIds = R.pipe(R.prop('msgIds'), dumpVector);\n\nexport default buildDumpFunc([dumpConstructor, dumpMsgIds]);\n","import * as R from 'ramda';\n\nimport { getStringFromArrayBuffer } from '../tlSerialization';\nimport { isWithOffset } from '../../utils';\n\nconst loadBytes = R.pipe(\n  R.nthArg(0),\n  R.partialRight(getStringFromArrayBuffer, [0]),\n);\n\nconst toArray = (x) => Array.from(x);\n\nconst incomingStringToArray = R.pipe(R.prop('incomingString'), toArray);\n\nconst toWithOffset = R.pipe(\n  R.of,\n  R.ap([incomingStringToArray, R.prop('offset')]),\n  R.zipObj(['value', 'offset']),\n);\n\nexport default R.cond([\n  [isWithOffset, R.pipe(loadBytes, toWithOffset)],\n  [R.T, R.pipe(loadBytes, incomingStringToArray)],\n]);\n","import * as R from 'ramda';\n\nimport { toTlString } from '../tlSerialization';\nimport { uint8ToArrayBuffer } from '../../utils';\n\nexport default R.pipe(\n  toTlString,\n  uint8ToArrayBuffer,\n);\n","import { buildLoadFunc, buildTypeLoader, buildConstructorLoader } from '../../utils';\nimport { loadBigInt } from '../bigInt';\nimport {\n  MSGS_STATE_INFO_CONSTRUCTOR,\n  MSGS_STATE_INFO_TYPE,\n  CONSTRUCTOR_KEY,\n  TYPE_KEY,\n} from '../../constants';\nimport { loadBytes } from '../bytes';\n\n/**\n * @param {ArrayBuffer} buffer\n * @param {Boolean} withOffset\n * @returns {*}\n */\nconst loadType = buildTypeLoader(MSGS_STATE_INFO_TYPE);\nconst loadConstructor = buildConstructorLoader(MSGS_STATE_INFO_CONSTRUCTOR);\nconst loadReqMsgId = loadBigInt;\nconst loadInfo = loadBytes;\n\nexport default buildLoadFunc([\n  [TYPE_KEY, loadType],\n  [CONSTRUCTOR_KEY, loadConstructor],\n  ['reqMsgId', loadReqMsgId],\n  ['info', loadInfo],\n]);\n","import * as R from 'ramda';\n\nimport { dumpInt } from '../int';\nimport { dumpBigInt } from '../bigInt';\nimport { buildDumpFunc } from '../../utils';\nimport { MSGS_STATE_INFO } from '../../constants';\nimport { dumpBytes } from '../bytes';\n\nconst dumpConstructor = R.pipe(R.always(MSGS_STATE_INFO), dumpInt);\nconst dumpReqMsgId = R.pipe(R.prop('reqMsgId'), dumpBigInt);\nconst dumpInfo = R.pipe(R.prop('info'), dumpBytes);\n\nexport default buildDumpFunc([dumpConstructor, dumpReqMsgId, dumpInfo]);\n","import * as R from 'ramda';\n/**\n * @param {ArrayBuffer} buffer\n * @param {Boolean} withOffset\n * @returns {{}}\n */\nimport { loadVector } from '../vector';\nimport { loadBigInt } from '../bigInt';\nimport { loadBytes } from '../bytes';\nimport { buildLoadFunc, buildTypeLoader, buildConstructorLoader } from '../../utils';\nimport {\n  CONSTRUCTOR_KEY,\n  MSGS_ALL_INFO_CONSTRUCTOR,\n  MSGS_ALL_INFO_TYPE,\n  TYPE_KEY,\n} from '../../constants';\n\nconst loadType = buildTypeLoader(MSGS_ALL_INFO_TYPE);\nconst loadConstructor = buildConstructorLoader(MSGS_ALL_INFO_CONSTRUCTOR);\nconst loadMsgIds = R.partial(loadVector, [loadBigInt]);\nconst loadInfo = loadBytes;\n\nexport default buildLoadFunc([\n  [TYPE_KEY, loadType],\n  [CONSTRUCTOR_KEY, loadConstructor],\n  ['msgIds', loadMsgIds],\n  ['info', loadInfo],\n]);\n","import * as R from 'ramda';\n\nimport { MSGS_ALL_INFO } from '../../constants';\nimport { dumpInt } from '../int';\nimport { dumpVector } from '../vector';\nimport { dumpBytes } from '../bytes';\nimport { buildDumpFunc } from '../../utils';\n\nconst dumpConstructor = R.pipe(R.always(MSGS_ALL_INFO), dumpInt);\nconst dumpMsgIds = R.pipe(R.prop('msgIds'), dumpVector);\nconst dumpInfo = R.pipe(R.prop('info'), dumpBytes);\n\nexport default buildDumpFunc([dumpConstructor, dumpMsgIds, dumpInfo]);\n","import { buildTypeLoader, buildConstructorLoader, buildLoadFunc } from '../../utils';\nimport { loadBigInt } from '../bigInt';\nimport { loadInt } from '../int';\nimport {\n  CONSTRUCTOR_KEY,\n  MSG_DETAILED_INFO_CONSTRUCTOR,\n  MSG_DETAILED_INFO_TYPE,\n  TYPE_KEY,\n} from '../../constants';\n\nconst loadType = buildTypeLoader(MSG_DETAILED_INFO_TYPE);\nconst loadConstructor = buildConstructorLoader(MSG_DETAILED_INFO_CONSTRUCTOR);\nconst loadMsgId = loadBigInt;\nconst loadAnswerMsgId = loadBigInt;\nconst loadBytes = loadInt;\nconst loadStatus = loadInt;\n\n/**\n * @param {ArrayBuffer} buffer\n * @returns {{}}\n */\nexport default buildLoadFunc([\n  [TYPE_KEY, loadType],\n  [CONSTRUCTOR_KEY, loadConstructor],\n  ['msgId', loadMsgId],\n  ['answerMsgId', loadAnswerMsgId],\n  ['bytes', loadBytes],\n  ['status', loadStatus],\n]);\n","import * as R from 'ramda';\n\nimport { MSG_DETAILED_INFO } from '../../constants';\nimport { dumpInt } from '../int';\nimport { dumpBigInt } from '../bigInt';\nimport { buildDumpFunc } from '../../utils';\n\nconst dumpConstructor = R.pipe(R.always(MSG_DETAILED_INFO), dumpInt);\nconst dumpMsgId = R.pipe(R.prop('msgId'), dumpBigInt);\nconst dumpAnswerMsgId = R.pipe(R.prop('answerMsgId'), dumpBigInt);\nconst dumpBytes = R.pipe(R.prop('bytes'), dumpInt);\nconst dumpStatus = R.pipe(R.prop('status'), dumpInt);\n\n/**\n * @param {*} value\n * @returns {ArrayBuffer}\n */\nexport default buildDumpFunc([dumpConstructor, dumpMsgId, dumpAnswerMsgId, dumpBytes, dumpStatus]);\n","import {\n  CONSTRUCTOR_KEY,\n  MSG_DETAILED_INFO_TYPE,\n  MSG_NEW_DETAILED_INFO_CONSTRUCTOR,\n  TYPE_KEY,\n} from '../../constants';\nimport { buildLoadFunc, buildTypeLoader, buildConstructorLoader } from '../../utils';\nimport { loadBigInt } from '../bigInt';\nimport { loadInt } from '../int';\n\nconst loadType = buildTypeLoader(MSG_DETAILED_INFO_TYPE);\nconst loadConstructor = buildConstructorLoader(MSG_NEW_DETAILED_INFO_CONSTRUCTOR);\nconst loadAnswerMsgId = loadBigInt;\nconst loadBytes = loadInt;\nconst loadStatus = loadInt;\n\n/**\n * @param {ArrayBuffer} buffer\n * @param {Boolean} withOffset\n * @returns {{}}\n */\nexport default buildLoadFunc([\n  [TYPE_KEY, loadType],\n  [CONSTRUCTOR_KEY, loadConstructor],\n  ['answerMsgId', loadAnswerMsgId],\n  ['bytes', loadBytes],\n  ['status', loadStatus],\n]);\n","import _curry2 from './internal/_curry2.js';\n\n/**\n * Acts as multiple `prop`: array of keys in, array of values out. Preserves\n * order.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig [k] -> {k: v} -> [v]\n * @param {Array} ps The property names to fetch\n * @param {Object} obj The object to query\n * @return {Array} The corresponding values or partially applied function.\n * @example\n *\n *      R.props(['x', 'y'], {x: 1, y: 2}); //=> [1, 2]\n *      R.props(['c', 'a', 'b'], {b: 2, a: 1}); //=> [undefined, 1, 2]\n *\n *      const fullName = R.compose(R.join(' '), R.props(['first', 'last']));\n *      fullName({last: 'Bullet-Tooth', age: 33, first: 'Tony'}); //=> 'Tony Bullet-Tooth'\n */\nvar props = /*#__PURE__*/_curry2(function props(ps, obj) {\n  var len = ps.length;\n  var out = [];\n  var idx = 0;\n\n  while (idx < len) {\n    out[idx] = obj[ps[idx]];\n    idx += 1;\n  }\n\n  return out;\n});\nexport default props;","import * as R from 'ramda';\nimport { MSG_NEW_DETAILED_INFO } from '../../constants';\nimport { dumpInt } from '../int';\nimport { dumpBigInt } from '../bigInt';\nimport { buildDumpFunc } from '../../utils';\n\nconst dumpConstructor = R.pipe(R.always(MSG_NEW_DETAILED_INFO), dumpInt);\nconst dumpAnswerMsgId = R.pipe(R.prop('answerMsgId'), dumpBigInt);\nconst dumpBytes = R.pipe(R.prop('bytes'), dumpInt);\nconst dumpStatus = R.pipe(R.props('state'), dumpInt);\n\n/**\n * @param {*} buffer\n * @returns {ArrayBuffer}\n */\nexport default buildDumpFunc([dumpConstructor, dumpAnswerMsgId, dumpBytes, dumpStatus]);\n","import * as R from 'ramda';\n\nimport { buildLoadFunc, buildTypeLoader, buildMethodLoader } from '../../utils';\nimport { loadBigInt } from '../bigInt';\nimport { loadVector } from '../vector';\nimport {\n  METHOD_KEY,\n  MSG_RESEND_REQ_METHOD,\n  MSG_RESEND_REQ_TYPE,\n  TYPE_KEY,\n} from '../../constants';\n\nconst loadType = buildTypeLoader(MSG_RESEND_REQ_TYPE);\nconst loadMethod = buildMethodLoader(MSG_RESEND_REQ_METHOD);\nconst loadMsgIds = R.partial(loadVector, [loadBigInt]);\n\n/**\n * @param {ArrayBuffer} buffer\n * @param {boolean} withOffset\n * @param {{}}\n */\nexport default buildLoadFunc([\n  [TYPE_KEY, loadType],\n  [METHOD_KEY, loadMethod],\n  ['msgIds', loadMsgIds],\n]);\n","import * as R from 'ramda';\n\nimport { buildDumpFunc } from '../../utils';\nimport { MSG_RESEND_REQ } from '../../constants';\nimport { dumpVector } from '../vector';\nimport { dumpInt } from '../int';\n\nconst dumpFunc = R.pipe(R.always(MSG_RESEND_REQ), dumpInt);\nconst dumpMsgIds = R.pipe(R.prop('msgIds'), dumpVector);\n\n/**\n * @param {*} msg\n * @returns {ArrayBuffer}\n */\nexport default buildDumpFunc([dumpFunc, dumpMsgIds]);\n","import * as R from 'ramda';\n\nimport { buildLoadFunc, buildTypeLoader, buildMethodLoader } from '../../utils';\nimport { loadBigInt } from '../bigInt';\nimport { loadVector } from '../vector';\nimport {\n  METHOD_KEY,\n  MSG_RESEND_ANS_REQ_METHOD,\n  MSG_RESEND_REQ_TYPE,\n  TYPE_KEY,\n} from '../../constants';\n\nconst loadType = buildTypeLoader(MSG_RESEND_REQ_TYPE);\nconst loadMethod = buildMethodLoader(MSG_RESEND_ANS_REQ_METHOD);\nconst loadMsgIds = R.partial(loadVector, [loadBigInt]);\n\n/**\n * @param {ArrayBuffer} buffer\n * @param {boolean} withOffset\n * @param {{}}\n */\nexport default buildLoadFunc([\n  [TYPE_KEY, loadType],\n  [METHOD_KEY, loadMethod],\n  ['msgIds', loadMsgIds],\n]);\n","import * as R from 'ramda';\n\nimport { buildDumpFunc } from '../../utils';\nimport { MSG_RESEND_ANS_REQ } from '../../constants';\nimport { dumpVector } from '../vector';\nimport { dumpInt } from '../int';\n\nconst dumpMethod = R.pipe(R.always(MSG_RESEND_ANS_REQ), dumpInt);\nconst dumpMsgIds = R.pipe(R.prop('msgIds'), dumpVector);\n\n/**\n * @param {*} msg\n * @returns {ArrayBuffer}\n */\nexport default buildDumpFunc([dumpMethod, dumpMsgIds]);\n","import {\n  CONSTRUCTOR_KEY,\n  RPC_ERROR_CONSTRUCTOR,\n  RPC_ERROR_TYPE,\n  TYPE_KEY,\n} from '../../constants';\nimport { loadInt } from '../int';\nimport { loadString } from '../string';\nimport { buildLoadFunc, buildTypeLoader, buildConstructorLoader } from '../../utils';\n\nconst loadType = buildTypeLoader(RPC_ERROR_TYPE);\nconst loadConstructor = buildConstructorLoader(RPC_ERROR_CONSTRUCTOR);\nconst loadErrorCode = loadInt;\nconst loadErrorMessage = loadString;\n\nexport default buildLoadFunc([\n  [TYPE_KEY, loadType],\n  [CONSTRUCTOR_KEY, loadConstructor],\n  ['errorCode', loadErrorCode],\n  ['errorMessage', loadErrorMessage],\n]);\n","import * as R from 'ramda';\nimport { RPC_ERROR } from '../../constants';\nimport { dumpInt } from '../int';\nimport { dumpString } from '../string';\nimport { getEmptyArrayBuffer, mergeArrayBuffer } from '../../utils';\n\nconst dumpType = R.pipe(R.always(RPC_ERROR), dumpInt);\nconst dumpErrorCode = R.pipe(R.prop('errorCode'), dumpInt);\nconst dumpErrorMessage = R.pipe(R.prop('errorMessage'), dumpString);\n\n\n/**\n * Dumps rpc error\n * @param {*} value - rpc error message\n * @returns\n *\n */\nexport default R.pipe(\n  R.of,\n  R.ap([dumpType, dumpErrorCode, dumpErrorMessage]),\n  R.reduce(mergeArrayBuffer, getEmptyArrayBuffer()),\n);\n","import {\n  METHOD_KEY,\n  RPC_DROP_ANSWER_METHOD,\n  RPC_DROP_ANSWER_TYPE,\n  TYPE_KEY,\n} from '../../constants';\nimport { buildTypeLoader, buildLoadFunc, buildMethodLoader } from '../../utils';\nimport { loadBigInt } from '../bigInt';\n\nconst loadType = buildTypeLoader(RPC_DROP_ANSWER_TYPE);\nconst loadMethod = buildMethodLoader(RPC_DROP_ANSWER_METHOD);\nconst loadReqMsgId = loadBigInt;\n\n/**\n * rpc_drop_answer#58e4a740 req_msg_id:long = RpcDropAnswer;\n *\n * @param {ArrayBuffer} buffer\n * @param {boolean}  withOffset\n * @return {*}\n */\nexport default buildLoadFunc([\n  [TYPE_KEY, loadType],\n  [METHOD_KEY, loadMethod],\n  ['reqMsgId', loadReqMsgId],\n]);\n","import * as R from 'ramda';\nimport { RPC_DROP_ANSWER } from '../../constants';\nimport { dumpInt } from '../int';\nimport { dumpBigInt } from '../bigInt';\nimport { buildDumpFunc } from '../../utils';\n\nconst dumpType = R.pipe(R.always(RPC_DROP_ANSWER), dumpInt);\nconst dumpReqMsgId = R.pipe(R.prop('reqMsgId'), dumpBigInt);\n\n/**\n * @param {*} value\n * @returns {ArrayBuffer}\n */\nexport default buildDumpFunc([dumpType, dumpReqMsgId]);\n","import {\n  CONSTRUCTOR_KEY,\n  RPC_ANSWER_UNKNOWN_CONSTRUCTOR,\n  RPC_DROP_ANSWER_TYPE,\n  TYPE_KEY,\n} from '../../constants';\nimport { buildTypeLoader, buildConstructorLoader, buildLoadFunc } from '../../utils';\n\nconst loadType = buildTypeLoader(RPC_DROP_ANSWER_TYPE);\nconst loadConstructor = buildConstructorLoader(RPC_ANSWER_UNKNOWN_CONSTRUCTOR);\n\nexport default buildLoadFunc([\n  [TYPE_KEY, loadType],\n  [CONSTRUCTOR_KEY, loadConstructor],\n]);\n","import * as R from 'ramda';\n\nimport { RPC_ANSWER_UNKNOWN } from '../../constants';\nimport { dumpInt } from '../int';\n\nexport default R.pipe(R.always(RPC_ANSWER_UNKNOWN), dumpInt);\n","import {\n  CONSTRUCTOR_KEY,\n  RPC_ANSWER_DROPPED_RUNNING_CONSTRUCTOR,\n  RPC_DROP_ANSWER_TYPE,\n  TYPE_KEY,\n} from '../../constants';\nimport { buildTypeLoader, buildConstructorLoader, buildLoadFunc } from '../../utils';\n\n\nconst loadType = buildTypeLoader(RPC_DROP_ANSWER_TYPE);\nconst loadConstructor = buildConstructorLoader(RPC_ANSWER_DROPPED_RUNNING_CONSTRUCTOR);\n\nexport default buildLoadFunc([\n  [TYPE_KEY, loadType],\n  [CONSTRUCTOR_KEY, loadConstructor],\n]);\n","import * as R from 'ramda';\n\nimport { RPC_ANSWER_DROPPED_RUNNING } from '../../constants';\nimport { dumpInt } from '../int';\n\nexport default R.pipe(R.always(RPC_ANSWER_DROPPED_RUNNING), dumpInt);\n","import {\n  CONSTRUCTOR_KEY,\n  RPC_ANSWER_DROPPED_CONSTRUCTOR,\n  RPC_DROP_ANSWER_TYPE,\n  TYPE_KEY,\n} from '../../constants';\nimport { buildTypeLoader, buildConstructorLoader, buildLoadFunc } from '../../utils';\nimport { loadBigInt } from '../bigInt';\nimport { loadInt } from '../int';\n\n\nconst loadType = buildTypeLoader(RPC_DROP_ANSWER_TYPE);\nconst loadConstructor = buildConstructorLoader(RPC_ANSWER_DROPPED_CONSTRUCTOR);\nconst loadMsgId = loadBigInt;\nconst loadSeqNo = loadInt;\nconst loadBytes = loadInt;\n\n\n/**\n * rpc_answer_dropped#a43ad8b7 msg_id:long seq_no:int bytes:int = RpcDropAnswer;\n * @param {ArrayBuffer} buffer\n * @param {boolean} [withOffset]\n * @returns {{}}\n */\nexport default buildLoadFunc([\n  [TYPE_KEY, loadType],\n  [CONSTRUCTOR_KEY, loadConstructor],\n  ['msgId', loadMsgId],\n  ['seqNo', loadSeqNo],\n  ['bytes', loadBytes],\n]);\n","import * as R from 'ramda';\n\nimport { RPC_ANSWER_DROPPED } from '../../constants';\nimport { dumpInt } from '../int';\nimport { dumpBigInt } from '../bigInt';\nimport { mergeAllArrayBuffers } from '../../utils';\n\nconst dumpType = R.pipe(R.always(RPC_ANSWER_DROPPED), dumpInt);\nconst dumpMsgId = R.pipe(R.prop('msgId'), dumpBigInt);\nconst dumpSeqNo = R.pipe(R.prop('seqNo'), dumpInt);\nconst dumpBytes = R.pipe(R.prop('bytes'), dumpInt);\n\n/**\n * @param {{}} value\n * @returns {ArrayBuffer}\n */\nexport default R.pipe(\n  R.of,\n  R.ap([dumpType, dumpMsgId, dumpSeqNo, dumpBytes]),\n  mergeAllArrayBuffers,\n);\n","import {\n  FUTURE_SALTS_TYPE,\n  GET_FUTURE_SALTS_METHOD,\n  TYPE_KEY,\n  METHOD_KEY,\n} from '../../constants';\nimport {\n  buildLoadFunc,\n  buildTypeLoader,\n  buildMethodLoader,\n} from '../../utils';\nimport { loadInt } from '../int';\n\n\nconst loadType = buildTypeLoader(FUTURE_SALTS_TYPE);\nconst loadMethod = buildMethodLoader(GET_FUTURE_SALTS_METHOD);\nconst loadNum = loadInt;\n\nexport default buildLoadFunc([\n  [TYPE_KEY, loadType],\n  [METHOD_KEY, loadMethod],\n  ['num', loadNum],\n]);\n","import * as R from 'ramda';\nimport { GET_FUTURE_SALTS } from '../../constants';\nimport { dumpInt } from '../int';\nimport { buildDumpFunc } from '../../utils';\n\n\nconst dumpMethod = R.pipe(R.always(GET_FUTURE_SALTS), dumpInt);\nconst dumpNum = R.pipe(R.prop('num'), dumpInt);\n\n\n/**\n * @returns {ArrayBuffer}\n */\nexport default buildDumpFunc([dumpMethod, dumpNum]);\n","import { buildConstructorLoader, buildLoadFunc, buildTypeLoader } from '../../utils';\nimport {\n  CONSTRUCTOR_KEY,\n  FUTURE_SALT_CONSTRUCTOR,\n  FUTURE_SALTS_TYPE,\n  TYPE_KEY,\n} from '../../constants';\nimport { loadInt } from '../int';\nimport { loadBigInt } from '../bigInt';\n\nconst loadType = buildTypeLoader(FUTURE_SALTS_TYPE);\nconst loadConstructor = buildConstructorLoader(FUTURE_SALT_CONSTRUCTOR);\n\n/**\n * future_salt#0949d9dc valid_since:int valid_until:int salt:long = FutureSalt;\n * @param {ArrayBuffer} buffer\n * @param {boolean} - withOffset\n */\nexport default buildLoadFunc([\n  [TYPE_KEY, loadType],\n  [CONSTRUCTOR_KEY, loadConstructor],\n  ['validSince', loadInt],\n  ['validUntil', loadInt],\n  ['salt', loadBigInt],\n]);\n","import * as R from 'ramda';\n\nimport { buildDumpFunc } from '../../utils';\nimport { FUTURE_SALT } from '../../constants';\nimport { dumpInt } from '../int';\nimport { dumpBigInt } from '../bigInt';\n\nconst dumpConstructor = R.pipe(R.always(FUTURE_SALT), dumpInt);\nconst dumpValidSince = R.pipe(R.prop('validSince'), dumpInt);\nconst dumpValidUntil = R.pipe(R.prop('validUntil'), dumpInt);\nconst dumpSalt = R.pipe(R.prop('salt'), dumpBigInt);\n\nexport default buildDumpFunc([\n  dumpConstructor,\n  dumpValidSince,\n  dumpValidUntil,\n  dumpSalt,\n]);\n","import * as R from 'ramda';\n\nimport { buildConstructorLoader, buildLoadFunc, buildTypeLoader } from '../../utils';\nimport {\n  FUTURE_SALTS_CONSTRUCTOR,\n  TYPE_KEY,\n  CONSTRUCTOR_KEY,\n  FUTURE_SALTS_TYPE,\n} from '../../constants';\nimport { loadBigInt } from '../bigInt';\nimport { loadVector } from '../vector';\nimport { loadFutureSalt } from '../future_salt';\nimport { loadInt } from '../int';\n\nconst loadType = buildTypeLoader(FUTURE_SALTS_TYPE);\nconst loadConstructor = buildConstructorLoader(FUTURE_SALTS_CONSTRUCTOR);\nconst loadReqMsgId = loadBigInt;\nconst loadNow = loadInt;\nconst loadSalts = R.partial(loadVector, [loadFutureSalt]);\n\n/**\n * future_salts#ae500895 req_msg_id:long now:int salts:vector future_salt = FutureSalts;\n * @param {ArrayBuffer} buffer\n * @returns {{}}\n */\nexport default buildLoadFunc([\n  [TYPE_KEY, loadType],\n  [CONSTRUCTOR_KEY, loadConstructor],\n  ['reqMsgId', loadReqMsgId],\n  ['now', loadNow],\n  ['salts', loadSalts],\n]);\n","import * as R from 'ramda';\nimport { FUTURE_SALTS } from '../../constants';\nimport { dumpInt } from '../int';\nimport { dumpBigInt } from '../bigInt';\nimport { buildDumpFunc } from '../../utils';\nimport { dumpVector } from '../vector';\nimport { dumpFutureSalt } from '../future_salt';\n\n\nconst dumpConstructor = R.pipe(R.always(FUTURE_SALTS), dumpInt);\nconst dumpReqMsgId = R.pipe(R.prop('reqMsgId'), dumpBigInt);\nconst dumpNow = R.pipe(R.prop('now'), dumpInt);\nconst dumpSalts = R.pipe(R.prop('salts'), R.partial(dumpVector, [dumpFutureSalt]));\n\n/**\n * @param msg\n * @returns {ArrayBuffer}\n */\nexport default buildDumpFunc([\n  dumpConstructor,\n  dumpReqMsgId,\n  dumpNow,\n  dumpSalts,\n]);\n","import { buildTypeLoader, buildMethodLoader, buildLoadFunc } from '../../utils';\nimport {\n  METHOD_KEY,\n  PING_METHOD,\n  PONG_TYPE,\n  TYPE_KEY,\n} from '../../constants';\nimport { loadBigInt } from '../bigInt';\n\nconst loadType = buildTypeLoader(PONG_TYPE);\nconst loadMethod = buildMethodLoader(PING_METHOD);\nconst loadPingId = loadBigInt;\n\n/**\n * ping#7abe77ec ping_id:long\n * @param {ArrayBuffer} buffer\n * @param {boolean} [withOffset]\n * @returns {{}}\n */\nexport default buildLoadFunc([\n  [TYPE_KEY, loadType],\n  [METHOD_KEY, loadMethod],\n  ['pingId', loadPingId],\n]);\n","import * as R from 'ramda';\n\nimport { buildDumpFunc } from '../../utils';\nimport { PING } from '../../constants';\nimport { dumpInt } from '../int';\nimport { dumpBigInt } from '../bigInt';\n\nconst dumpType = R.pipe(R.always(PING), dumpInt);\nconst dumpPingId = R.pipe(R.prop('pingId'), dumpBigInt);\n\n/**\n * @param {{}} obj\n * @returns {ArrayBuffer}\n */\nexport default buildDumpFunc([dumpType, dumpPingId]);\n","import { buildLoadFunc, buildConstructorLoader, buildTypeLoader } from '../../utils';\nimport {\n  CONSTRUCTOR_KEY,\n  PONG_CONSTRUCTOR,\n  PONG_TYPE,\n  TYPE_KEY,\n} from '../../constants';\nimport { loadBigInt } from '../bigInt';\n\nconst loadType = buildTypeLoader(PONG_TYPE);\nconst loadConstructor = buildConstructorLoader(PONG_CONSTRUCTOR);\nconst loadMsgId = loadBigInt;\nconst loadPingId = loadBigInt;\n\n/**\n * Parses array buffer with pong schema\n * @param {ArrayBuffer} buffer\n */\nexport default buildLoadFunc([\n  [TYPE_KEY, loadType],\n  [CONSTRUCTOR_KEY, loadConstructor],\n  ['msgId', loadMsgId],\n  ['pingId', loadPingId],\n]);\n","import * as R from 'ramda';\n\nimport { buildDumpFunc } from '../../utils';\nimport { PONG } from '../../constants';\nimport { dumpInt } from '../int';\nimport { dumpBigInt } from '../bigInt';\n\nconst dumpType = R.pipe(R.always(PONG), dumpInt);\nconst dumpMsgId = R.pipe(R.prop('msgId'), dumpBigInt);\nconst dumpPingId = R.pipe(R.prop('pingId'), dumpBigInt);\n\nexport default buildDumpFunc([dumpType, dumpMsgId, dumpPingId]);\n","import { buildLoadFunc, buildTypeLoader, buildMethodLoader } from '../../utils';\nimport {\n  METHOD_KEY, PING_DELAY_DISCONNECT_METHOD, PONG_TYPE, TYPE_KEY,\n} from '../../constants';\nimport { loadBigInt } from '../bigInt';\nimport { loadInt } from '../int';\n\n\nconst loadType = buildTypeLoader(PONG_TYPE);\nconst loadMethod = buildMethodLoader(PING_DELAY_DISCONNECT_METHOD);\nconst loadPingId = loadBigInt;\nconst loadDisconnectDelay = loadInt;\n\n/**\n * ping_delay_disconnect#f3427b8c ping_id:long disconnect_delay:int = Pong;\n * @param {ArrayBuffer} buffer\n * @returns {{}}\n */\nexport default buildLoadFunc([\n  [TYPE_KEY, loadType],\n  [METHOD_KEY, loadMethod],\n  ['pingId', loadPingId],\n  ['disconnectDelay', loadDisconnectDelay],\n]);\n","import * as R from 'ramda';\n\nimport { PING_DELAY_DISCONNECT } from '../../constants';\nimport { buildDumpFunc } from '../../utils';\nimport { dumpInt } from '../int';\nimport { dumpBigInt } from '../bigInt';\n\nconst dumpType = R.pipe(R.always(PING_DELAY_DISCONNECT), dumpInt);\nconst dumpPingId = R.pipe(R.prop('pingId'), dumpBigInt);\nconst dumpDisconnectDelay = R.pipe(R.prop('disconnectDelay'), dumpInt);\n\n/**\n * @param msg\n * @returns {ArrayBuffer}\n */\nexport default buildDumpFunc([dumpType, dumpPingId, dumpDisconnectDelay]);\n","import { buildConstructorLoader, buildLoadFunc, buildTypeLoader } from '../../utils';\nimport {\n  CONSTRUCTOR_KEY,\n  DESTROY_SESSION_CONSTRUCTOR,\n  DESTROY_SESSION_TYPE,\n  TYPE_KEY,\n} from '../../constants';\nimport { loadBigInt } from '../bigInt';\n\nconst loadType = buildTypeLoader(DESTROY_SESSION_TYPE);\nconst loadConstructor = buildConstructorLoader(DESTROY_SESSION_CONSTRUCTOR);\nconst loadSessionId = loadBigInt;\n\n/**\n * destroy_session#e7512126 session_id:long = DestroySessionRes;\n * @param {ArrayBuffer} buffer\n * @returns {{}}\n */\nexport default buildLoadFunc([\n  [TYPE_KEY, loadType],\n  [CONSTRUCTOR_KEY, loadConstructor],\n  ['sessionId', loadSessionId],\n]);\n","import * as R from 'ramda';\n\nimport { DESTROY_SESSION } from '../../constants';\nimport { buildDumpFunc } from '../../utils';\nimport { dumpInt } from '../int';\nimport { dumpBigInt } from '../bigInt';\n\nconst dumpConstructor = R.pipe(R.always(DESTROY_SESSION), dumpInt);\nconst dumpSessionId = R.pipe(R.prop('sessionId'), dumpBigInt);\n\n/**\n * @param msg\n * @returns {ArrayBuffer}\n */\nexport default buildDumpFunc([dumpConstructor, dumpSessionId]);\n","import { buildConstructorLoader, buildLoadFunc, buildTypeLoader } from '../../utils';\nimport {\n  CONSTRUCTOR_KEY,\n  DESTROY_SESSION_OK_CONSTRUCTOR,\n  DESTROY_SESSION_TYPE,\n  TYPE_KEY,\n} from '../../constants';\nimport { loadBigInt } from '../bigInt';\n\nconst loadType = buildTypeLoader(DESTROY_SESSION_TYPE);\nconst loadConstructor = buildConstructorLoader(DESTROY_SESSION_OK_CONSTRUCTOR);\nconst loadSessionId = loadBigInt;\n\n/**\n * destroy_session_ok#e22045fc session_id:long = DestroySessionRes;\n * @param {ArrayBuffer} buffer\n * @returns {{}}\n */\nexport default buildLoadFunc([\n  [TYPE_KEY, loadType],\n  [CONSTRUCTOR_KEY, loadConstructor],\n  ['sessionId', loadSessionId],\n]);\n","import * as R from 'ramda';\n\nimport { DESTROY_SESSION_OK } from '../../constants';\nimport { buildDumpFunc } from '../../utils';\nimport { dumpInt } from '../int';\nimport { dumpBigInt } from '../bigInt';\n\nconst dumpConstructor = R.pipe(R.always(DESTROY_SESSION_OK), dumpInt);\nconst dumpSessionId = R.pipe(R.prop('sessionId'), dumpBigInt);\n\n/**\n * @param msg\n * @returns {ArrayBuffer}\n */\nexport default buildDumpFunc([dumpConstructor, dumpSessionId]);\n","import { buildConstructorLoader, buildLoadFunc, buildTypeLoader } from '../../utils';\nimport {\n  CONSTRUCTOR_KEY,\n  DESTROY_SESSION_NONE_CONSTRUCTOR,\n  DESTROY_SESSION_TYPE,\n  TYPE_KEY,\n} from '../../constants';\nimport { loadBigInt } from '../bigInt';\n\nconst loadType = buildTypeLoader(DESTROY_SESSION_TYPE);\nconst loadConstructor = buildConstructorLoader(DESTROY_SESSION_NONE_CONSTRUCTOR);\nconst loadSessionId = loadBigInt;\n\n/**\n * destroy_session_ok#62d350c9 session_id:long = DestroySessionRes;\n * @param {ArrayBuffer} buffer\n * @returns {{}}\n */\nexport default buildLoadFunc([\n  [TYPE_KEY, loadType],\n  [CONSTRUCTOR_KEY, loadConstructor],\n  ['sessionId', loadSessionId],\n]);\n","import * as R from 'ramda';\n\nimport { DESTROY_SESSION_NONE } from '../../constants';\nimport { buildDumpFunc } from '../../utils';\nimport { dumpInt } from '../int';\nimport { dumpBigInt } from '../bigInt';\n\nconst dumpConstructor = R.pipe(R.always(DESTROY_SESSION_NONE), dumpInt);\nconst dumpSessionId = R.pipe(R.prop('sessionId'), dumpBigInt);\n\n/**\n * @param msg\n * @returns {ArrayBuffer}\n */\nexport default buildDumpFunc([dumpConstructor, dumpSessionId]);\n","import { buildConstructorLoader, buildLoadFunc, buildTypeLoader } from '../../utils';\nimport { loadBigInt } from '../bigInt';\nimport {\n  CONSTRUCTOR_KEY,\n  NEW_SESSION_CREATED_CONSTRUCTOR,\n  NEW_SESSION_CREATED_TYPE,\n  TYPE_KEY,\n} from '../../constants';\n\nconst loadType = buildTypeLoader(NEW_SESSION_CREATED_TYPE);\nconst loadConstructor = buildConstructorLoader(NEW_SESSION_CREATED_CONSTRUCTOR);\nconst loadFirstMsgId = loadBigInt;\nconst loadUniqueId = loadBigInt;\nconst loadServerSalt = loadBigInt;\n\n/**\n * Parses array buffer with new session created schema\n * @param {ArrayBuffer} buffer\n * @returns {{ firstMsgId: BigInt, uniqueId: BigInt, serverSalt: BigInt }}\n */\nexport default buildLoadFunc([\n  [TYPE_KEY, loadType],\n  [CONSTRUCTOR_KEY, loadConstructor],\n  ['firstMsgId', loadFirstMsgId],\n  ['uniqueId', loadUniqueId],\n  ['serverSalt', loadServerSalt],\n]);\n","import * as R from 'ramda';\n\nimport { buildDumpFunc } from '../../utils';\nimport { NEW_SESSION_CREATED } from '../../constants';\nimport { dumpInt } from '../int';\nimport { dumpBigInt } from '../bigInt';\n\nconst dumpType = R.pipe(R.always(NEW_SESSION_CREATED), dumpInt);\nconst dumpFirstMsgId = R.pipe(R.prop('firstMsgId'), dumpBigInt);\nconst dumpUniqueId = R.pipe(R.prop('uniqueId'), dumpBigInt);\nconst dumpServerSalt = R.pipe(R.prop('serverSalt'), dumpBigInt);\n\n\nexport default buildDumpFunc([\n  dumpType,\n  dumpFirstMsgId,\n  dumpUniqueId,\n  dumpServerSalt,\n]);\n","import { buildConstructorLoader, buildLoadFunc, buildTypeLoader } from '../../utils';\nimport {\n  CONSTRUCTOR_KEY,\n  HTTP_WAIT_CONSTRUCTOR,\n  HTTP_WAIT_TYPE,\n  TYPE_KEY,\n} from '../../constants';\nimport { loadInt } from '../int';\n\nconst loadType = buildTypeLoader(HTTP_WAIT_TYPE);\nconst loadConstructor = buildConstructorLoader(HTTP_WAIT_CONSTRUCTOR);\nconst loadMaxDelay = loadInt;\nconst loadWaitAfter = loadInt;\nconst loadMaxWait = loadInt;\n\n/**\n * http_wait#9299359f max_delay:int wait_after:int max_wait:int = HttpWait;\n *\n * @param {ArrayBuffer} buffer\n * @returns {{}}\n */\nexport default buildLoadFunc([\n  [TYPE_KEY, loadType],\n  [CONSTRUCTOR_KEY, loadConstructor],\n  ['maxDelay', loadMaxDelay],\n  ['waitAfter', loadWaitAfter],\n  ['maxWait', loadMaxWait],\n]);\n","import * as R from 'ramda';\nimport { dumpInt } from '../int';\nimport { buildDumpFunc } from '../../utils';\nimport { HTTP_WAIT } from '../../constants';\n\n// http_wait#9299359f max_delay:int wait_after:int max_wait:int = HttpWait;\n\nconst dumpConstructor = R.pipe(R.always(HTTP_WAIT), dumpInt);\nconst dumpMaxDelay = R.pipe(R.prop('maxDelay'), dumpInt);\nconst dumpWaitAfter = R.pipe(R.prop('waitAfter'), dumpInt);\nconst dumpMaxWait = R.pipe(R.prop('maxWait'), dumpInt);\n\n/**\n * @param msg\n * @returns {ArrayBuffer}\n */\nexport default buildDumpFunc([\n  dumpConstructor,\n  dumpMaxDelay,\n  dumpWaitAfter,\n  dumpMaxWait,\n]);\n","import _curry2 from './internal/_curry2.js';\n\n/**\n * Multiplies two numbers. Equivalent to `a * b` but curried.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Math\n * @sig Number -> Number -> Number\n * @param {Number} a The first value.\n * @param {Number} b The second value.\n * @return {Number} The result of `a * b`.\n * @see R.divide\n * @example\n *\n *      const double = R.multiply(2);\n *      const triple = R.multiply(3);\n *      double(3);       //=>  6\n *      triple(4);       //=> 12\n *      R.multiply(2, 5);  //=> 10\n */\nvar multiply = /*#__PURE__*/_curry2(function multiply(a, b) {\n  return a * b;\n});\nexport default multiply;","import * as R from 'ramda';\nimport { isWithOffset, withConstantOffset } from '../../utils';\nimport { add, getBase, toBigInt } from '../utils';\n\nfunction loadBytes(buffer) {\n  return Array.from(new Uint8Array(buffer, 0, 16));\n}\n\n/**\n * @param {ArrayBuffer} buffer\n * @returns {BigInt}\n */\nconst loadBigInt128 = R.pipe(\n  loadBytes,\n  R.map(toBigInt),\n  getBase,\n  R.map(R.apply(R.multiply)),\n  R.reduce(add, BigInt(0)),\n);\n\nexport default R.cond([\n  [isWithOffset, withConstantOffset(loadBigInt128, 16)],\n  [R.T, loadBigInt128],\n]);\n","/**\n * @param {BigInt} value\n * @returns {ArrayBuffer}\n */\nexport default function dumpBigInt128(value) {\n  const buffer = new ArrayBuffer(16);\n  const view = new BigUint64Array(buffer);\n  view[0] = value;\n  view[1] = value / (BigInt(256) ** BigInt(8));\n  return buffer;\n}\n","import { buildMethodLoader, buildLoadFunc, buildTypeLoader } from '../../utils';\nimport { loadBigInt128 } from '../bigInt128';\nimport {\n  METHOD_KEY,\n  REQ_PQ_METHOD,\n  RES_PQ_TYPE,\n  TYPE_KEY,\n} from '../../constants';\n\nconst loadType = buildTypeLoader(RES_PQ_TYPE);\nconst loadConstructor = buildMethodLoader(REQ_PQ_METHOD);\nconst loadNonce = loadBigInt128;\n\nexport default buildLoadFunc([\n  [TYPE_KEY, loadType],\n  [METHOD_KEY, loadConstructor],\n  ['nonce', loadNonce],\n]);\n","import * as R from 'ramda';\nimport { buildDumpFunc } from '../../utils';\nimport { REQ_PQ } from '../../constants';\nimport { dumpInt } from '../int';\nimport { dumpBigInt128 } from '../bigInt128';\n\nconst dumpConstructor = R.pipe(R.always(REQ_PQ), dumpInt);\nconst dumpNonce = R.pipe(R.prop('nonce'), dumpBigInt128);\n\nexport default buildDumpFunc([\n  dumpConstructor,\n  dumpNonce,\n]);\n","import _curry2 from './internal/_curry2.js';\nimport _has from './internal/_has.js';\n\n/**\n * Returns whether or not a path exists in an object. Only the object's\n * own properties are checked.\n *\n * @func\n * @memberOf R\n * @since v0.26.0\n * @category Object\n * @typedefn Idx = String | Int\n * @sig [Idx] -> {a} -> Boolean\n * @param {Array} path The path to use.\n * @param {Object} obj The object to check the path in.\n * @return {Boolean} Whether the path exists.\n * @see R.has\n * @example\n *\n *      R.hasPath(['a', 'b'], {a: {b: 2}});         // => true\n *      R.hasPath(['a', 'b'], {a: {b: undefined}}); // => true\n *      R.hasPath(['a', 'b'], {a: {c: 2}});         // => false\n *      R.hasPath(['a', 'b'], {});                  // => false\n */\nvar hasPath = /*#__PURE__*/_curry2(function hasPath(_path, obj) {\n  if (_path.length === 0) {\n    return false;\n  }\n  var val = obj;\n  var idx = 0;\n  while (idx < _path.length) {\n    if (_has(_path[idx], val)) {\n      val = val[_path[idx]];\n      idx += 1;\n    } else {\n      return false;\n    }\n  }\n  return true;\n});\nexport default hasPath;","import _curry2 from './internal/_curry2.js';\nimport hasPath from './hasPath.js';\n\n/**\n * Returns whether or not an object has an own property with the specified name\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category Object\n * @sig s -> {s: x} -> Boolean\n * @param {String} prop The name of the property to check for.\n * @param {Object} obj The object to query.\n * @return {Boolean} Whether the property exists.\n * @example\n *\n *      const hasName = R.has('name');\n *      hasName({name: 'alice'});   //=> true\n *      hasName({name: 'bob'});     //=> true\n *      hasName({});                //=> false\n *\n *      const point = {x: 0, y: 0};\n *      const pointHas = R.has(R.__, point);\n *      pointHas('x');  //=> true\n *      pointHas('y');  //=> true\n *      pointHas('z');  //=> false\n */\nvar has = /*#__PURE__*/_curry2(function has(prop, obj) {\n  return hasPath([prop], obj);\n});\nexport default has;","import _curry3 from './internal/_curry3.js';\n\n// `Identity` is a functor that holds a single value, where `map` simply\n// transforms the held value with the provided function.\nvar Identity = function (x) {\n  return { value: x, map: function (f) {\n      return Identity(f(x));\n    } };\n};\n\n/**\n * Returns the result of \"setting\" the portion of the given data structure\n * focused by the given lens to the result of applying the given function to\n * the focused value.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category Object\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig Lens s a -> (a -> a) -> s -> s\n * @param {Lens} lens\n * @param {*} v\n * @param {*} x\n * @return {*}\n * @see R.prop, R.lensIndex, R.lensProp\n * @example\n *\n *      const headLens = R.lensIndex(0);\n *\n *      R.over(headLens, R.toUpper, ['foo', 'bar', 'baz']); //=> ['FOO', 'bar', 'baz']\n */\nvar over = /*#__PURE__*/_curry3(function over(lens, f, x) {\n  // The value returned by the getter function is first transformed with `f`,\n  // then set as the value of an `Identity`. This is then mapped over with the\n  // setter function of the lens.\n  return lens(function (y) {\n    return Identity(f(y));\n  })(x).value;\n});\nexport default over;","import _curry3 from './internal/_curry3.js';\n\n/**\n * Makes a shallow clone of an object, setting or overriding the specified\n * property with the given value. Note that this copies and flattens prototype\n * properties onto the new object as well. All non-primitive properties are\n * copied by reference.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Object\n * @sig String -> a -> {k: v} -> {k: v}\n * @param {String} prop The property name to set\n * @param {*} val The new value\n * @param {Object} obj The object to clone\n * @return {Object} A new object equivalent to the original except for the changed property.\n * @see R.dissoc, R.pick\n * @example\n *\n *      R.assoc('c', 3, {a: 1, b: 2}); //=> {a: 1, b: 2, c: 3}\n */\nvar assoc = /*#__PURE__*/_curry3(function assoc(prop, val, obj) {\n  var result = {};\n  for (var p in obj) {\n    result[p] = obj[p];\n  }\n  result[prop] = val;\n  return result;\n});\nexport default assoc;","import _curry2 from './internal/_curry2.js';\nimport map from './map.js';\n\n/**\n * Returns a lens for the given getter and setter functions. The getter \"gets\"\n * the value of the focus; the setter \"sets\" the value of the focus. The setter\n * should not mutate the data structure.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Object\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig (s -> a) -> ((a, s) -> s) -> Lens s a\n * @param {Function} getter\n * @param {Function} setter\n * @return {Lens}\n * @see R.view, R.set, R.over, R.lensIndex, R.lensProp\n * @example\n *\n *      const xLens = R.lens(R.prop('x'), R.assoc('x'));\n *\n *      R.view(xLens, {x: 1, y: 2});            //=> 1\n *      R.set(xLens, 4, {x: 1, y: 2});          //=> {x: 4, y: 2}\n *      R.over(xLens, R.negate, {x: 1, y: 2});  //=> {x: -1, y: 2}\n */\nvar lens = /*#__PURE__*/_curry2(function lens(getter, setter) {\n  return function (toFunctorFn) {\n    return function (target) {\n      return map(function (focus) {\n        return setter(focus, target);\n      }, toFunctorFn(getter(target)));\n    };\n  };\n});\nexport default lens;","import _curry1 from './internal/_curry1.js';\nimport assoc from './assoc.js';\nimport lens from './lens.js';\nimport prop from './prop.js';\n\n/**\n * Returns a lens whose focus is the specified property.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category Object\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig String -> Lens s a\n * @param {String} k\n * @return {Lens}\n * @see R.view, R.set, R.over\n * @example\n *\n *      const xLens = R.lensProp('x');\n *\n *      R.view(xLens, {x: 1, y: 2});            //=> 1\n *      R.set(xLens, 4, {x: 1, y: 2});          //=> {x: 4, y: 2}\n *      R.over(xLens, R.negate, {x: 1, y: 2});  //=> {x: -1, y: 2}\n */\nvar lensProp = /*#__PURE__*/_curry1(function lensProp(k) {\n  return lens(prop(k), assoc(k));\n});\nexport default lensProp;","import _curry1 from './internal/_curry1.js';\n\n/**\n * Creates a new object from a list key-value pairs. If a key appears in\n * multiple pairs, the rightmost pair is included in the object.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category List\n * @sig [[k,v]] -> {k: v}\n * @param {Array} pairs An array of two-element arrays that will be the keys and values of the output object.\n * @return {Object} The object made by pairing up `keys` and `values`.\n * @see R.toPairs, R.pair\n * @example\n *\n *      R.fromPairs([['a', 1], ['b', 2], ['c', 3]]); //=> {a: 1, b: 2, c: 3}\n */\nvar fromPairs = /*#__PURE__*/_curry1(function fromPairs(pairs) {\n  var result = {};\n  var idx = 0;\n  while (idx < pairs.length) {\n    result[pairs[idx][0]] = pairs[idx][1];\n    idx += 1;\n  }\n  return result;\n});\nexport default fromPairs;","import _has from './_has.js';\n\n// Based on https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\nfunction _objectAssign(target) {\n  if (target == null) {\n    throw new TypeError('Cannot convert undefined or null to object');\n  }\n\n  var output = Object(target);\n  var idx = 1;\n  var length = arguments.length;\n  while (idx < length) {\n    var source = arguments[idx];\n    if (source != null) {\n      for (var nextKey in source) {\n        if (_has(nextKey, source)) {\n          output[nextKey] = source[nextKey];\n        }\n      }\n    }\n    idx += 1;\n  }\n  return output;\n}\n\nexport default typeof Object.assign === 'function' ? Object.assign : _objectAssign;","import _objectAssign from './internal/_objectAssign.js';\nimport _curry1 from './internal/_curry1.js';\n\n/**\n * Merges a list of objects together into one object.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category List\n * @sig [{k: v}] -> {k: v}\n * @param {Array} list An array of objects\n * @return {Object} A merged object.\n * @see R.reduce\n * @example\n *\n *      R.mergeAll([{foo:1},{bar:2},{baz:3}]); //=> {foo:1,bar:2,baz:3}\n *      R.mergeAll([{foo:1},{foo:2},{bar:2}]); //=> {foo:2,bar:2}\n * @symb R.mergeAll([{ x: 1 }, { y: 2 }, { z: 3 }]) = { x: 1, y: 2, z: 3 }\n */\nvar mergeAll = /*#__PURE__*/_curry1(function mergeAll(list) {\n  return _objectAssign.apply(null, [{}].concat(list));\n});\nexport default mergeAll;","import _curry1 from './internal/_curry1.js';\nimport keys from './keys.js';\n\n/**\n * Returns a list of all the enumerable own properties of the supplied object.\n * Note that the order of the output array is not guaranteed across different\n * JS platforms.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig {k: v} -> [v]\n * @param {Object} obj The object to extract values from\n * @return {Array} An array of the values of the object's own properties.\n * @see R.valuesIn, R.keys\n * @example\n *\n *      R.values({a: 1, b: 2, c: 3}); //=> [1, 2, 3]\n */\nvar values = /*#__PURE__*/_curry1(function values(obj) {\n  var props = keys(obj);\n  var len = props.length;\n  var vals = [];\n  var idx = 0;\n  while (idx < len) {\n    vals[idx] = obj[props[idx]];\n    idx += 1;\n  }\n  return vals;\n});\nexport default values;","import _curry2 from './internal/_curry2.js';\n\n/**\n * Tests a regular expression against a String. Note that this function will\n * return an empty array when there are no matches. This differs from\n * [`String.prototype.match`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match)\n * which returns `null` when there are no matches.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category String\n * @sig RegExp -> String -> [String | Undefined]\n * @param {RegExp} rx A regular expression.\n * @param {String} str The string to match against\n * @return {Array} The list of matches or empty array.\n * @see R.test\n * @example\n *\n *      R.match(/([a-z]a)/g, 'bananas'); //=> ['ba', 'na', 'na']\n *      R.match(/a/, 'b'); //=> []\n *      R.match(/a/, null); //=> TypeError: null does not have a method named \"match\"\n */\nvar match = /*#__PURE__*/_curry2(function match(rx, str) {\n  return str.match(rx) || [];\n});\nexport default match;","import _curry2 from './internal/_curry2.js';\n\n/**\n * Returns `true` if the first argument is less than the second; `false`\n * otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig Ord a => a -> a -> Boolean\n * @param {*} a\n * @param {*} b\n * @return {Boolean}\n * @see R.gt\n * @example\n *\n *      R.lt(2, 1); //=> false\n *      R.lt(2, 2); //=> false\n *      R.lt(2, 3); //=> true\n *      R.lt('a', 'z'); //=> true\n *      R.lt('z', 'a'); //=> false\n */\nvar lt = /*#__PURE__*/_curry2(function lt(a, b) {\n  return a < b;\n});\nexport default lt;","import curry from './curry.js';\n\n/**\n * Returns the result of calling its first argument with the remaining\n * arguments. This is occasionally useful as a converging function for\n * [`R.converge`](#converge): the first branch can produce a function while the\n * remaining branches produce values to be passed to that function as its\n * arguments.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Function\n * @sig (*... -> a),*... -> a\n * @param {Function} fn The function to apply to the remaining arguments.\n * @param {...*} args Any number of positional arguments.\n * @return {*}\n * @see R.apply\n * @example\n *\n *      R.call(R.add, 1, 2); //=> 3\n *\n *      const indentN = R.pipe(R.repeat(' '),\n *                           R.join(''),\n *                           R.replace(/^(?!$)/gm));\n *\n *      const format = R.converge(R.call, [\n *                                  R.pipe(R.prop('indent'), indentN),\n *                                  R.prop('value')\n *                              ]);\n *\n *      format({indent: 2, value: 'foo\\nbar\\nbaz\\n'}); //=> '  foo\\n  bar\\n  baz\\n'\n * @symb R.call(f, a, b) = f(a, b)\n */\nvar call = /*#__PURE__*/curry(function call(fn) {\n  return fn.apply(this, Array.prototype.slice.call(arguments, 1));\n});\nexport default call;","import _curry2 from './internal/_curry2.js';\nimport _isFunction from './internal/_isFunction.js';\nimport curryN from './curryN.js';\nimport toString from './toString.js';\n\n/**\n * Turns a named method with a specified arity into a function that can be\n * called directly supplied with arguments and a target object.\n *\n * The returned function is curried and accepts `arity + 1` parameters where\n * the final parameter is the target object.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig Number -> String -> (a -> b -> ... -> n -> Object -> *)\n * @param {Number} arity Number of arguments the returned function should take\n *        before the target object.\n * @param {String} method Name of the method to call.\n * @return {Function} A new curried function.\n * @see R.construct\n * @example\n *\n *      const sliceFrom = R.invoker(1, 'slice');\n *      sliceFrom(6, 'abcdefghijklm'); //=> 'ghijklm'\n *      const sliceFrom6 = R.invoker(2, 'slice')(6);\n *      sliceFrom6(8, 'abcdefghijklm'); //=> 'gh'\n * @symb R.invoker(0, 'method')(o) = o['method']()\n * @symb R.invoker(1, 'method')(a, o) = o['method'](a)\n * @symb R.invoker(2, 'method')(a, b, o) = o['method'](a, b)\n */\nvar invoker = /*#__PURE__*/_curry2(function invoker(arity, method) {\n  return curryN(arity + 1, function () {\n    var target = arguments[arity];\n    if (target != null && _isFunction(target[method])) {\n      return target[method].apply(target, Array.prototype.slice.call(arguments, 0, arity));\n    }\n    throw new TypeError(toString(target) + ' does not have a method named \"' + method + '\"');\n  });\n});\nexport default invoker;","import invoker from './invoker.js';\n\n/**\n * Splits a string into an array of strings based on the given\n * separator.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category String\n * @sig (String | RegExp) -> String -> [String]\n * @param {String|RegExp} sep The pattern.\n * @param {String} str The string to separate into an array.\n * @return {Array} The array of strings from `str` separated by `str`.\n * @see R.join\n * @example\n *\n *      const pathComponents = R.split('/');\n *      R.tail(pathComponents('/usr/local/bin/node')); //=> ['usr', 'local', 'bin', 'node']\n *\n *      R.split('.', 'a.b.c.xyz.d'); //=> ['a', 'b', 'c', 'xyz', 'd']\n */\nvar split = /*#__PURE__*/invoker(1, 'split');\nexport default split;","import _curry1 from './internal/_curry1.js';\nimport _isString from './internal/_isString.js';\n\n/**\n * Returns a new list or string with the elements or characters in reverse\n * order.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [a]\n * @sig String -> String\n * @param {Array|String} list\n * @return {Array|String}\n * @example\n *\n *      R.reverse([1, 2, 3]);  //=> [3, 2, 1]\n *      R.reverse([1, 2]);     //=> [2, 1]\n *      R.reverse([1]);        //=> [1]\n *      R.reverse([]);         //=> []\n *\n *      R.reverse('abc');      //=> 'cba'\n *      R.reverse('ab');       //=> 'ba'\n *      R.reverse('a');        //=> 'a'\n *      R.reverse('');         //=> ''\n */\nvar reverse = /*#__PURE__*/_curry1(function reverse(list) {\n  return _isString(list) ? list.split('').reverse().join('') : Array.prototype.slice.call(list, 0).reverse();\n});\nexport default reverse;","import invoker from './invoker.js';\n\n/**\n * Returns a string made by inserting the `separator` between each element and\n * concatenating all the elements into a single string.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig String -> [a] -> String\n * @param {Number|String} separator The string used to separate the elements.\n * @param {Array} xs The elements to join into a string.\n * @return {String} str The string made by concatenating `xs` with `separator`.\n * @see R.split\n * @example\n *\n *      const spacer = R.join(' ');\n *      spacer(['a', 2, 3.4]);   //=> 'a 2 3.4'\n *      R.join('|', [1, 2, 3]);    //=> '1|2|3'\n */\nvar join = /*#__PURE__*/invoker(1, 'join');\nexport default join;","import * as R from 'ramda';\nimport { getConstructor } from '../utils';\nimport { CONSTRUCTOR_KEY, METHOD_KEY, TYPE_KEY } from '../../constants';\n\nfunction memoize(func) {\n  const memo = {};\n  /* eslint-disable */\n  const slice = Array.prototype.slice;\n  /* eslint-enable */\n\n  return function wrapper(...funcargs) {\n    const args = slice.call(funcargs);\n\n    if (args in memo) {\n      return memo[args];\n    }\n    memo[args] = func.apply(this, args);\n    return memo[args];\n  };\n}\n\n\n/**\n * Converts int 32 value to unsigned int 32 value without changing bytes\n * @param {Number} number\n * @returns {Number} unsigned value\n */\nexport function intToUint(number) {\n  const buffer = new ArrayBuffer(4);\n  const intView = new Int32Array(buffer);\n  intView[0] = number;\n  return (new Uint32Array(buffer))[0];\n}\n\n\nconst parseId = R.pipe(\n  R.partialRight(parseInt, [10]),\n  intToUint,\n);\n\n/**\n * Use unsigned int value as ids instead of signed int in schema\n */\nconst updateSchemaWithUintId = R.over(R.lensProp('id'), parseId);\n\n/**\n * builds schema map\n * @param {Array<{id: Number, [method]}>}\n */\nconst buildMap = memoize(R.pipe(\n  R.map(\n    R.pipe(\n      R.of,\n      R.ap([R.pipe(R.prop('id'), parseId), updateSchemaWithUintId]),\n    ),\n  ),\n  R.fromPairs,\n));\n\n/**\n * Takes schema and builds map that allows search constructors by id\n * @param {{constructors: *, method: *}} schema - schema for parsing\n */\nconst buildConstructorsMap = memoize(R.pipe(\n  R.prop('constructors'),\n  buildMap,\n));\n\n/**\n * Takes schema and builds map that allows search methods by id\n * @param {{constructors: *, method: *}} schema - schema for parsing\n */\nconst buildMethodsMap = memoize(R.pipe(\n  R.prop('methods'),\n  buildMap,\n));\n\n/**\n * Takes global schema and builds map that allows search item by id\n * @param {{constructors: *, method: *}} schema - schema for parsing\n */\nconst buildSchemaIdMap = memoize(R.pipe(\n  R.of,\n  R.ap([buildMethodsMap, buildConstructorsMap]),\n  R.mergeAll,\n));\n\n\n/**\n * Tries to find schema to load object by id(unsigned int)\n * @param {{constructors: *, method: *}} schema - schema for parsing\n * @param {number} id - number of type to parse schema\n *\n * @returns {[{constructor: boolean, method: boolean, schema: *}]}\n */\nexport const getParseSchemaById = R.unapply(\n  R.pipe(\n    R.of,\n    R.ap([R.nth(1), R.pipe(R.nth(0), buildSchemaIdMap)]),\n    R.apply(R.prop),\n  ),\n);\n\n/**\n * Takes schema and returns function that will tell can schema parse array buffer or not\n * @type {(function(...[*]=))|*}\n */\nexport const isFromSchemaFactory = R.pipe(\n  buildSchemaIdMap,\n  (x) => R.pipe(getConstructor, R.has(R.__, x)),\n);\n\n\nexport const isMethodObject = R.has(METHOD_KEY);\n\nexport const isConstuctorObject = R.has(CONSTRUCTOR_KEY);\n\nexport const isMethodOf = R.propEq(METHOD_KEY);\n\nexport const isObjectOf = R.propEq(CONSTRUCTOR_KEY);\n\n\n/**\n * Takes schema and return map for methods\n * @param {{constructors: *, methods: *}} schema - layer to build method schema\n * @return {{[string]: *}}\n */\nexport const buildMethodsSchemaMap = R.pipe(\n  R.prop('methods'),\n  R.map(R.pipe(R.of, R.ap([R.prop('method'), updateSchemaWithUintId]))),\n  R.fromPairs,\n);\n\n/**\n * Takes schema and return map for constructors\n * @param {{constructors: *, methods: *}} schema - layer to build constructors schema\n * @return {{[string]: *}}\n */\nexport const buildConstructorsSchemaMap = R.pipe(\n  R.prop('constructors'),\n  R.map(R.pipe(R.of, R.ap([R.prop('predicate'), updateSchemaWithUintId]))),\n  R.fromPairs,\n);\n\n/**\n * Returns all constructors/methods that could be loaded/dumped\n * @type {(function(...[*]=))|*}\n */\nexport const getAvailableTypes = R.pipe(\n  R.of,\n  R.ap([\n    R.pipe(buildMethodsSchemaMap, R.values, R.map(R.prop('type'))),\n    R.pipe(buildConstructorsSchemaMap, R.values, R.map(R.prop('type'))),\n  ]),\n  R.flatten,\n  (x) => new Set(x),\n);\n\nexport const isDumpingTypeFactory = R.pipe(\n  getAvailableTypes,\n  (x) => (type) => x.has(type),\n);\n\n\n/**\n * @param {{constructors: *, methods: *}} schema - layer to build method schema\n * @param {string} methodName - method name\n * @returns {*} - schema for current name\n */\nexport const getSchemaForMethod = R.unapply(R.pipe(\n  R.of,\n  R.ap([\n    R.nth(1),\n    R.pipe(R.nth(0), buildMethodsSchemaMap),\n  ]),\n  R.apply(R.prop),\n));\n\n/**\n * @param {{constructors: *, methods: *}} schema - layer to build method schema\n * @param {string} methodName - method name\n * @returns {*} - schema for current name\n */\nexport const getSchemaForConstructor = R.unapply(R.pipe(\n  R.of,\n  R.ap([\n    R.nth(1),\n    R.pipe(R.nth(0), buildConstructorsSchemaMap),\n  ]),\n  R.apply(R.prop),\n));\n\nconst matchVector = R.match(/Vector<(\\w+)>/);\n\nexport const isVector = R.pipe(\n  matchVector,\n  R.length,\n  R.lt(0),\n);\n\nexport const getVectorType = R.pipe(\n  matchVector,\n  R.nth(1),\n);\n\nexport const getMsgType = R.prop(TYPE_KEY);\n\n/**\n * @param {{constructors: *, methods: *}} schema - that should be used to parse message\n * @param {*} msg - object that should be dumped\n */\nexport const isMsgCouldBeDump = R.unapply(\n  R.pipe(\n    R.of,\n    R.ap([\n      R.pipe(R.nth(0), isDumpingTypeFactory),\n      R.pipe(R.nth(1), getMsgType),\n    ]),\n    R.apply(R.call),\n  ),\n);\n\n\n/**\n * @param {Number} number\n * @returns {Array<boolean>} 32 sized array of boolean values\n */\nexport const loadFlag = R.pipe(\n  (x) => x.toString(2).padStart(32, '0'),\n  R.split(''),\n  R.map(R.pipe(R.partialRight(parseInt, [2]), Boolean)),\n  R.reverse,\n);\n\n/**\n * @param {Array<boolean>} flags - 32 sized array of boolean values\n * @returns {Number}\n */\nexport const dumpFlag = R.pipe(\n  R.map((x) => +x),\n  R.reverse,\n  R.join(''),\n  R.partialRight(parseInt, [2]),\n);\n\n/**\n * Checks has obj schema conditional field or not\n */\nexport const hasConditionalField = R.pipe(\n  R.prop('params'),\n  R.filter(R.propEq('type', '#')),\n  R.prop('length'),\n  R.lt(0),\n);\n\nexport const flagOptionMatch = R.match(/flags\\.(\\d+)\\?(\\w+)/);\n\nexport const isFlagOption = R.pipe(\n  flagOptionMatch,\n  R.prop('length'),\n  R.lt(0),\n);\n","import * as R from 'ramda';\n\nimport { loadString } from '../string';\nimport { loadInt } from '../int';\nimport { loadBigInt } from '../bigInt';\nimport { loadBool } from '../bool';\nimport { loadVector } from '../vector';\nimport { loadBytes } from '../bytes';\n\nimport {\n  flagOptionMatch,\n  getParseSchemaById,\n  getVectorType,\n  hasConditionalField, isFlagOption,\n  isVector,\n  loadFlag,\n} from './utils';\nimport { getConstructor } from '../utils';\nimport {\n  buildLoadFunc,\n  sliceBuffer,\n  withConstantOffset,\n} from '../../utils';\nimport { CONSTRUCTOR_KEY, METHOD_KEY, TYPE_KEY } from '../../constants';\n\nconst getSchemaFromBufferArray = R.unapply(R.pipe(\n  R.of,\n  R.ap([R.nth(0), R.pipe(R.nth(1), R.pipe(getConstructor))]),\n  R.apply(getParseSchemaById),\n));\n\nconst bareTypeLoaders = {\n  bool: loadBool,\n  Bool: loadBool,\n  int: loadInt,\n  long: loadBigInt,\n  bytes: loadBytes,\n  string: loadString,\n};\n\nconst isBareType = R.has(R.__, bareTypeLoaders);\nconst getBareTypeLoader = R.prop(R.__, bareTypeLoaders);\n\nconst getTypePair = R.pipe(\n  R.of,\n  R.ap([\n    R.always(TYPE_KEY),\n    R.pipe(\n      R.prop('type'),\n      R.always,\n      R.partialRight(withConstantOffset, [4]),\n    ),\n  ]),\n);\n\nconst getObjectConstructorPair = R.cond([\n  [\n    R.has('predicate'),\n    R.pipe(\n      R.of,\n      R.ap([\n        R.always(CONSTRUCTOR_KEY),\n        R.pipe(\n          R.prop('predicate'),\n          R.always,\n          R.partialRight(withConstantOffset, [0]),\n        ),\n      ]),\n    ),\n  ],\n  [\n    R.T,\n    R.pipe(\n      R.of,\n      R.ap([\n        R.always(METHOD_KEY),\n        R.pipe(\n          R.prop('method'),\n          R.always,\n          R.partialRight(withConstantOffset, [0]),\n        ),\n      ]),\n    ),\n  ],\n]);\n\n\n/**\n * Loads object from buffer array by schema. First of all tries to find how to parse array buffer by\n * first 4 bytes (int 32). Searches way to load it in both constructors and methods ten\n * load param by param. if param has got bare type (int, string, bool) then load them.\n * if param is complex type then load with recursive, same for vector types\n * @param {{constructors: *, methods: *}} schema\n * @param {ArrayBuffer} buffer\n * @param {boolean} withOffset\n */\nfunction loadBySchema(schema, buffer, withOffset) {\n  function getLoaderForType(type) {\n    const load = R.partial(loadBySchema, [schema]);\n    return R.cond([\n      [isBareType, getBareTypeLoader],\n      [isVector, R.pipe(getVectorType, getLoaderForType, R.of, R.partial(loadVector))],\n      [R.equals('Vector'), R.always(R.partial(loadVector, [load]))],\n      [R.T, R.always(load)],\n    ])(type);\n  }\n\n  /**\n   * Takes schema to build load function, returns list of pairs with name of attribute and function\n   * to load it\n   * @param {*} schema - how load object\n   * @returns {Array<[string, Function]>}\n   */\n  const getLoadPairs = R.pipe(\n    R.prop('params'),\n    R.map(\n      R.pipe(\n        R.of,\n        R.ap([\n          R.prop('name'),\n          R.pipe(\n            R.prop('type'),\n            getLoaderForType,\n          ),\n        ]),\n      ),\n    ),\n  );\n\n  const buildSimpleLoader = R.pipe(\n    R.of,\n    R.ap([getTypePair, getObjectConstructorPair, getLoadPairs]),\n    (x) => [x[0], x[1], ...x[2]],\n    buildLoadFunc,\n  );\n\n  /**\n   * Loads with flag\n   * TODO: write in functional style\n   * @param {*} objSchema object to load array buffer\n   * @param {ArrayBuffer} objBuffer array buffer that should be loaded\n   * @param {boolean} withObjOffset - offset\n   * @returns {{}}\n   */\n  function loadWithFlag(objSchema, objBuffer, withObjOffset) {\n    let value = {};\n    let flags;\n    let currentBuffer;\n    let commonOffset = 0;\n\n    const { value: typeData, offset: baseOffset } = buildLoadFunc([\n      getTypePair(objSchema),\n      getObjectConstructorPair(objSchema),\n    ])(objBuffer, true);\n\n    commonOffset += baseOffset;\n    value = { ...value, ...typeData };\n\n    currentBuffer = sliceBuffer(objBuffer, commonOffset);\n    const params = R.prop('params', objSchema);\n\n    for (let i = 0; i < params.length; i += 1) {\n      const { name, type } = params[i];\n      if (type === '#') {\n        const { value: flagInt, offset: currentOffset } = loadInt(currentBuffer, true);\n        commonOffset += currentOffset;\n        flags = loadFlag(flagInt);\n        currentBuffer = sliceBuffer(currentBuffer, currentOffset);\n      } else if (isFlagOption(type)) {\n        const data = flagOptionMatch(type);\n        const flagId = parseInt(data[1], 10);\n        const currentType = data[2];\n\n        if (currentType === 'true') {\n          value = { ...value, [name]: flags[flagId] };\n        } else if (flags[flagId]) {\n          const loader = getLoaderForType(currentType);\n          const { value: param, offset: currentOffset } = loader(currentBuffer, true);\n          value = { ...value, [name]: param };\n          commonOffset += currentOffset;\n          currentBuffer = sliceBuffer(currentBuffer, currentOffset);\n        }\n      } else {\n        const loader = getLoaderForType(type);\n        const { value: param, offset: currentOffset } = loader(currentBuffer, true);\n        value = { ...value, [name]: param };\n        commonOffset += currentOffset;\n        currentBuffer = sliceBuffer(currentBuffer, currentOffset);\n      }\n    }\n\n    return withObjOffset ? { value, offset: commonOffset } : value;\n  }\n\n  const getLoadFuncs = R.pipe(\n    R.partial(getSchemaFromBufferArray, [schema]),\n    R.cond([\n      [hasConditionalField, R.pipe(R.of, R.partial(loadWithFlag))],\n      [R.T, buildSimpleLoader],\n    ]),\n  );\n\n  return getLoadFuncs(buffer)(buffer, withOffset);\n}\n\nexport default loadBySchema;\n","import * as R from 'ramda';\n\nimport {\n  isMethodObject,\n  isConstuctorObject,\n  getSchemaForMethod,\n  getSchemaForConstructor,\n  isVector,\n  getVectorType,\n  isDumpingTypeFactory,\n  hasConditionalField,\n  isFlagOption,\n  flagOptionMatch,\n  dumpFlag,\n} from './utils';\nimport { getEmptyArrayBuffer, buildDumpFunc, mergeAllArrayBuffers } from '../../utils';\nimport { CONSTRUCTOR_KEY, METHOD_KEY } from '../../constants';\nimport { dumpInt } from '../int';\nimport { dumpBool } from '../bool';\nimport { dumpBigInt } from '../bigInt';\nimport { dumpString } from '../string';\nimport { dumpVector } from '../vector';\nimport { dumpBytes } from '../bytes';\n\n/**\n * Dumps message object into array buffer\n * @param {{constructors: *, methods: *}} schema - schema that should be used for dumping objects\n * @param message\n * @returns {ArrayBuffer}\n */\nexport default function dumpBySchema(schema, message) {\n  /**\n   * @param {string} type\n   */\n  function getDumpFunction(type) {\n    return R.cond([\n      [R.equals('bool'), R.always(dumpBool)],\n      [R.equals('Bool'), R.always(dumpBool)],\n      [R.equals('int'), R.always(dumpInt)],\n      [R.equals('long'), R.always(dumpBigInt)],\n      [R.equals('string'), R.always(dumpString)],\n      [R.equals('bytes'), R.always(dumpBytes)],\n      [R.equals('!X'), R.always(R.partial(dumpBySchema, [schema]))],\n      [\n        isVector,\n        R.pipe(\n          getVectorType,\n          getDumpFunction,\n          R.of,\n          R.partial(dumpVector),\n        ),\n      ],\n      [isDumpingTypeFactory(schema), R.always(R.partial(dumpBySchema, [schema]))],\n      [R.T, R.always(getEmptyArrayBuffer)],\n    ])(type);\n  }\n\n  /**\n   * Builds function to dump param\n   * @param {{name: string, type: string}} param - param of message that should be dumped\n   * @returns {Function}\n   */\n  const buildDumpAttrFunc = R.pipe(\n    R.of,\n    R.ap([\n      R.pipe(R.prop('name'), R.prop),\n      R.pipe(R.prop('type'), getDumpFunction),\n    ]),\n    R.apply(R.binary(R.pipe)),\n  );\n\n  const dumpId = R.pipe(R.prop('id'), dumpInt, R.always);\n\n  /**\n   * Builds function by schema\n   * @param {*} objSchema\n   * @returns {Function} function to dump object\n   */\n  function buildDumpBySchemaFunc(objSchema) {\n    const buildPlainDump = R.pipe(\n      R.of,\n      R.ap([\n        dumpId,\n        R.pipe(\n          R.prop('params'),\n          R.map(buildDumpAttrFunc),\n        ),\n      ]),\n      R.flatten,\n      buildDumpFunc,\n    );\n\n    function dumpWithFlag(obj) {\n      const buffers = [dumpId(objSchema)(obj)];\n      let flagId = 0;\n      const flags = (new Array(32)).fill(false);\n\n      const params = R.prop('params', objSchema);\n\n      for (let i = 0; i < params.length; i += 1) {\n        const { name, type } = params[i];\n        if (type === '#') {\n          buffers.push(new ArrayBuffer());\n          flagId = i;\n        } else if (isFlagOption(type)) {\n          if (R.has(name, obj) && R.prop(name, obj) !== undefined) {\n            const match = flagOptionMatch(type);\n            flags[parseInt(match[1], 10)] = true;\n\n            const dumpType = match[2] === 'true' ? 'True' : match[2]; // dirty thing need to check\n\n            buffers.push(getDumpFunction(dumpType)(R.prop(name, obj)));\n          }\n        } else {\n          buffers.push(getDumpFunction(type)(R.prop(name, obj)));\n        }\n      }\n\n      buffers[flagId] = dumpInt(dumpFlag(flags));\n      return mergeAllArrayBuffers([\n        dumpId(objSchema)(obj),\n        ...buffers,\n      ]);\n    }\n\n    return R.cond([\n      [hasConditionalField, R.always(dumpWithFlag)],\n      [R.T, buildPlainDump],\n    ])(objSchema);\n  }\n\n  return R.unapply(\n    R.pipe(\n      R.cond([\n        [\n          R.pipe(R.nth(1), isMethodObject),\n          R.pipe(\n            R.of,\n            R.ap([\n              R.pipe(\n                R.of,\n                R.ap([R.nth(0), R.pipe(R.nth(1), R.prop(METHOD_KEY))]),\n                R.apply(getSchemaForMethod),\n                buildDumpBySchemaFunc,\n              ),\n              R.nth(1),\n            ]),\n            R.apply(R.call),\n          ),\n        ],\n        [\n          R.pipe(R.nth(1), isConstuctorObject),\n          R.pipe(\n            R.of,\n            R.ap([\n              R.pipe(\n                R.of,\n                R.ap([R.nth(0), R.pipe(R.nth(1), R.prop(CONSTRUCTOR_KEY))]),\n                R.apply(getSchemaForConstructor),\n                buildDumpBySchemaFunc,\n              ),\n              R.nth(1),\n            ]),\n            R.apply(R.call),\n          ),\n        ],\n      ]),\n    ),\n  )(schema, message);\n}\n","import pako from 'pako';\n\nimport { loadBytes } from './bytes';\nimport { hexToArrayBuffer, sliceBuffer, uint8ArrayToHex } from '../utils';\n\nexport default function unzipMessage(x, withOffset, parseMessage) {\n  const { value: zippedValue, offset } = loadBytes(sliceBuffer(x, 4), true);\n  const unzippedBuffer = hexToArrayBuffer(uint8ArrayToHex(pako.inflate(zippedValue)));\n  const value = parseMessage(unzippedBuffer);\n  return withOffset ? ({ value, offset: offset + 4 }) : value;\n}\n","import * as R from 'ramda';\n\nimport { buildConstructorLoader, buildLoadFunc, buildTypeLoader } from '../../utils';\nimport {\n  TYPE_KEY, CONSTRUCTOR_KEY, RES_PQ_CONSTRUCTOR, RES_PQ_TYPE,\n} from '../../constants';\nimport { loadBigInt128 } from '../bigInt128';\nimport { loadBytes } from '../bytes';\nimport { loadVector } from '../vector';\nimport { loadBigInt } from '../bigInt';\n\nconst loadType = buildTypeLoader(RES_PQ_TYPE);\nconst loadConstructor = buildConstructorLoader(RES_PQ_CONSTRUCTOR);\nconst loadNonce = loadBigInt128;\nconst loadServerNonce = loadBigInt128;\nconst loadPQ = loadBytes;\nconst loadFingerprints = R.partial(loadVector, [loadBigInt]);\n\nexport default buildLoadFunc([\n  [TYPE_KEY, loadType],\n  [CONSTRUCTOR_KEY, loadConstructor],\n  ['nonce', loadNonce],\n  ['server_nonce', loadServerNonce],\n  ['pq', loadPQ],\n  ['fingerprints', loadFingerprints],\n]);\n","import * as R from 'ramda';\nimport { buildDumpFunc } from '../../utils';\nimport { RES_PQ } from '../../constants';\nimport { dumpInt } from '../int';\nimport { dumpBigInt128 } from '../bigInt128';\nimport { dumpBytes } from '../bytes';\nimport { dumpBigInt } from '../bigInt';\nimport { dumpVector } from '../vector';\n\nconst dumpConstructor = R.pipe(R.always(RES_PQ), dumpInt);\nconst dumpNonce = R.pipe(R.prop('nonce'), dumpBigInt128);\nconst dumpServerNonce = R.pipe(R.prop('server_nonce'), dumpBigInt128);\nconst dumpPQ = R.pipe(R.prop('pq'), dumpBytes);\nconst dumpFingerprints = R.pipe(R.prop('fingerprints'), R.partial(dumpVector, [dumpBigInt]));\n\nexport default buildDumpFunc([\n  dumpConstructor,\n  dumpNonce,\n  dumpServerNonce,\n  dumpPQ,\n  dumpFingerprints,\n]);\n","import * as R from 'ramda';\nimport { isWithOffset, withConstantOffset } from '../../utils';\nimport { add, getBase, toBigInt } from '../utils';\n\nfunction loadBytes(buffer) {\n  return Array.from(new Uint8Array(buffer, 0, 32));\n}\n\n/**\n * @param {ArrayBuffer} buffer\n * @returns {BigInt}\n */\nconst loadBigInt256 = R.pipe(\n  loadBytes,\n  R.map(toBigInt),\n  getBase,\n  R.map(R.apply(R.multiply)),\n  R.reduce(add, BigInt(0)),\n);\n\nexport default R.cond([\n  [isWithOffset, withConstantOffset(loadBigInt256, 32)],\n  [R.T, loadBigInt256],\n]);\n","/**\n * @param {BigInt} value\n * @returns {ArrayBuffer}\n */\nexport default function dumpBigInt256(value) {\n  const buffer = new ArrayBuffer(32);\n  const view = new BigUint64Array(buffer);\n  view[0] = value;\n  view[1] = value / (BigInt(256) ** BigInt(8));\n  view[2] = value / (BigInt(256) ** BigInt(16));\n  view[3] = value / (BigInt(256) ** BigInt(24));\n  return buffer;\n}\n","import { buildConstructorLoader, buildLoadFunc, buildTypeLoader } from '../../utils';\nimport {\n  CONSTRUCTOR_KEY,\n  PQ_INNER_DATA_CONSTRUCTOR,\n  PQ_INNER_DATA_TYPE,\n  TYPE_KEY,\n} from '../../constants';\nimport { loadBytes } from '../bytes';\nimport { loadBigInt128 } from '../bigInt128';\nimport { loadBigInt256 } from '../bigInt256';\n\nconst loadType = buildTypeLoader(PQ_INNER_DATA_TYPE);\nconst loadConstructor = buildConstructorLoader(PQ_INNER_DATA_CONSTRUCTOR);\nconst loadPQ = loadBytes;\nconst loadP = loadBytes;\nconst loadQ = loadBytes;\nconst loadNonce = loadBigInt128;\nconst loadServerNonce = loadBigInt128;\nconst loadNewNonce = loadBigInt256;\n\nexport default buildLoadFunc([\n  [TYPE_KEY, loadType],\n  [CONSTRUCTOR_KEY, loadConstructor],\n  ['pq', loadPQ],\n  ['p', loadP],\n  ['q', loadQ],\n  ['nonce', loadNonce],\n  ['server_nonce', loadServerNonce],\n  ['new_nonce', loadNewNonce],\n]);\n","import * as R from 'ramda';\n\nimport { buildDumpFunc } from '../../utils';\nimport { PQ_INNER_DATA } from '../../constants';\nimport { dumpInt } from '../int';\nimport { dumpBytes } from '../bytes';\nimport { dumpBigInt128 } from '../bigInt128';\nimport { dumpBigInt256 } from '../bigInt256';\n\n\nconst dumpConstructor = R.pipe(R.always(PQ_INNER_DATA), dumpInt);\nconst dumpPQ = R.pipe(R.prop('pq'), dumpBytes);\nconst dumpP = R.pipe(R.prop('p'), dumpBytes);\nconst dumpQ = R.pipe(R.prop('q'), dumpBytes);\nconst dumpNonce = R.pipe(R.prop('nonce'), dumpBigInt128);\nconst dumpServerNonce = R.pipe(R.prop('server_nonce'), dumpBigInt128);\nconst dumpNewNonce = R.pipe(R.prop('new_nonce'), dumpBigInt256);\n\nexport default buildDumpFunc([\n  dumpConstructor,\n  dumpPQ,\n  dumpP,\n  dumpQ,\n  dumpNonce,\n  dumpServerNonce,\n  dumpNewNonce,\n]);\n","import { buildConstructorLoader, buildLoadFunc, buildTypeLoader } from '../../utils';\nimport {\n  CONSTRUCTOR_KEY,\n  PQ_INNER_DATA_TEMP_CONSTRUCTOR,\n  PQ_INNER_DATA_TYPE,\n  TYPE_KEY,\n} from '../../constants';\nimport { loadBytes } from '../bytes';\nimport { loadBigInt128 } from '../bigInt128';\nimport { loadBigInt256 } from '../bigInt256';\nimport { loadInt } from '../int';\n\nconst loadType = buildTypeLoader(PQ_INNER_DATA_TYPE);\nconst loadConstructor = buildConstructorLoader(PQ_INNER_DATA_TEMP_CONSTRUCTOR);\nconst loadPQ = loadBytes;\nconst loadP = loadBytes;\nconst loadQ = loadBytes;\nconst loadNonce = loadBigInt128;\nconst loadServerNonce = loadBigInt128;\nconst loadNewNonce = loadBigInt256;\nconst loadExpiresIn = loadInt;\n\nexport default buildLoadFunc([\n  [TYPE_KEY, loadType],\n  [CONSTRUCTOR_KEY, loadConstructor],\n  ['pq', loadPQ],\n  ['p', loadP],\n  ['q', loadQ],\n  ['nonce', loadNonce],\n  ['server_nonce', loadServerNonce],\n  ['new_nonce', loadNewNonce],\n  ['expires_in', loadExpiresIn],\n]);\n","import * as R from 'ramda';\n\nimport { buildDumpFunc } from '../../utils';\nimport { PQ_INNER_DATA_TEMP } from '../../constants';\nimport { dumpInt } from '../int';\nimport { dumpBytes } from '../bytes';\nimport { dumpBigInt128 } from '../bigInt128';\nimport { dumpBigInt256 } from '../bigInt256';\n\n\nconst dumpConstructor = R.pipe(R.always(PQ_INNER_DATA_TEMP), dumpInt);\nconst dumpPQ = R.pipe(R.prop('pq'), dumpBytes);\nconst dumpP = R.pipe(R.prop('p'), dumpBytes);\nconst dumpQ = R.pipe(R.prop('q'), dumpBytes);\nconst dumpNonce = R.pipe(R.prop('nonce'), dumpBigInt128);\nconst dumpServerNonce = R.pipe(R.prop('server_nonce'), dumpBigInt128);\nconst dumpNewNonce = R.pipe(R.prop('new_nonce'), dumpBigInt256);\nconst dumpExpiresIn = R.pipe(R.prop('expires_in'), dumpInt);\n\nexport default buildDumpFunc([\n  dumpConstructor,\n  dumpPQ,\n  dumpP,\n  dumpQ,\n  dumpNonce,\n  dumpServerNonce,\n  dumpNewNonce,\n  dumpExpiresIn,\n]);\n","import { buildLoadFunc, buildTypeLoader, buildMethodLoader } from '../../utils';\nimport {\n  METHOD_KEY,\n  SERVER_DH_PARAMS_TYPE,\n  REQ_DH_PARAMS_METHOD,\n  TYPE_KEY,\n} from '../../constants';\nimport { loadBigInt128 } from '../bigInt128';\nimport { loadBytes } from '../bytes';\nimport { loadBigInt } from '../bigInt';\n\nconst loadType = buildTypeLoader(SERVER_DH_PARAMS_TYPE);\nconst loadMethod = buildMethodLoader(REQ_DH_PARAMS_METHOD);\nconst loadNonce = loadBigInt128;\nconst loadServerNonce = loadBigInt128;\nconst loadP = loadBytes;\nconst loadQ = loadBytes;\nconst loadFingerprint = loadBigInt;\nconst loadEncryptedData = loadBytes;\n\nexport default buildLoadFunc([\n  [TYPE_KEY, loadType],\n  [METHOD_KEY, loadMethod],\n  ['nonce', loadNonce],\n  ['server_nonce', loadServerNonce],\n  ['p', loadP],\n  ['q', loadQ],\n  ['fingerprint', loadFingerprint],\n  ['encrypted_data', loadEncryptedData],\n]);\n","import * as R from 'ramda';\n\nimport { buildDumpFunc } from '../../utils';\nimport { REQ_DH_PARAMS } from '../../constants';\nimport { dumpInt } from '../int';\nimport { dumpBigInt128 } from '../bigInt128';\nimport { dumpBytes } from '../bytes';\nimport { dumpBigInt } from '../bigInt';\n\nconst dumpMethod = R.pipe(R.always(REQ_DH_PARAMS), dumpInt);\nconst dumpNonce = R.pipe(R.prop('nonce'), dumpBigInt128);\nconst dumpServerNonce = R.pipe(R.prop('server_nonce'), dumpBigInt128);\nconst dumpP = R.pipe(R.prop('p'), dumpBytes);\nconst dumpQ = R.pipe(R.prop('q'), dumpBytes);\nconst dumpFingerprint = R.pipe(R.prop('fingerprint'), dumpBigInt);\nconst dumpEncryptedData = R.pipe(R.prop('encrypted_data'), dumpBytes);\n\nexport default buildDumpFunc([\n  dumpMethod,\n  dumpNonce,\n  dumpServerNonce,\n  dumpP,\n  dumpQ,\n  dumpFingerprint,\n  dumpEncryptedData,\n]);\n","import { buildConstructorLoader, buildLoadFunc, buildTypeLoader } from '../../utils';\nimport {\n  CONSTRUCTOR_KEY,\n  SERVER_DH_PARAMS_FAIL_CONSTRUCTOR,\n  SERVER_DH_PARAMS_TYPE,\n  TYPE_KEY,\n} from '../../constants';\nimport { loadBigInt128 } from '../bigInt128';\n\nconst loadType = buildTypeLoader(SERVER_DH_PARAMS_TYPE);\nconst loadConstructor = buildConstructorLoader(SERVER_DH_PARAMS_FAIL_CONSTRUCTOR);\nconst loadNonce = loadBigInt128;\nconst loadServerNonce = loadBigInt128;\nconst loadNewNonceHash = loadBigInt128;\n\nexport default buildLoadFunc([\n  [TYPE_KEY, loadType],\n  [CONSTRUCTOR_KEY, loadConstructor],\n  ['nonce', loadNonce],\n  ['server_nonce', loadServerNonce],\n  ['new_nonce_hash', loadNewNonceHash],\n]);\n","import * as R from 'ramda';\nimport { buildDumpFunc } from '../../utils';\nimport { SERVER_DH_PARAMS_FAIL } from '../../constants';\nimport { dumpInt } from '../int';\nimport { dumpBigInt128 } from '../bigInt128';\n\nconst dumpConstructor = R.pipe(R.always(SERVER_DH_PARAMS_FAIL), dumpInt);\nconst dumpNonce = R.pipe(R.prop('nonce'), dumpBigInt128);\nconst dumpServerNonce = R.pipe(R.prop('server_nonce'), dumpBigInt128);\nconst dumpNewNonceHash = R.pipe(R.prop('new_nonce_hash'), dumpBigInt128);\n\nexport default buildDumpFunc([\n  dumpConstructor,\n  dumpNonce,\n  dumpServerNonce,\n  dumpNewNonceHash,\n]);\n","import { buildConstructorLoader, buildLoadFunc, buildTypeLoader } from '../../utils';\nimport {\n  CONSTRUCTOR_KEY,\n  SERVER_DH_PARAMS_OK_CONSTRUCTOR,\n  SERVER_DH_PARAMS_TYPE,\n  TYPE_KEY,\n} from '../../constants';\nimport { loadBigInt128 } from '../bigInt128';\nimport { loadBytes } from '../bytes';\n\nconst loadType = buildTypeLoader(SERVER_DH_PARAMS_TYPE);\nconst loadConstructor = buildConstructorLoader(SERVER_DH_PARAMS_OK_CONSTRUCTOR);\nconst loadNonce = loadBigInt128;\nconst loadServerNonce = loadBigInt128;\nconst loadEncryptedAnswer = loadBytes;\n\nexport default buildLoadFunc([\n  [TYPE_KEY, loadType],\n  [CONSTRUCTOR_KEY, loadConstructor],\n  ['nonce', loadNonce],\n  ['server_nonce', loadServerNonce],\n  ['encrypted_answer', loadEncryptedAnswer],\n]);\n","import * as R from 'ramda';\n\nimport { buildDumpFunc } from '../../utils';\nimport { dumpInt } from '../int';\nimport { SERVER_DH_PARAMS_OK } from '../../constants';\nimport { dumpBigInt128 } from '../bigInt128';\nimport { dumpBytes } from '../bytes';\n\nconst dumpConstructor = R.pipe(R.always(SERVER_DH_PARAMS_OK), dumpInt);\nconst dumpNonce = R.pipe(R.prop('nonce'), dumpBigInt128);\nconst dumpServerNonce = R.pipe(R.prop('server_nonce'), dumpBigInt128);\nconst dumpEncryptedAnswer = R.pipe(R.prop('encrypted_answer'), dumpBytes);\n\nexport default buildDumpFunc([\n  dumpConstructor,\n  dumpNonce,\n  dumpServerNonce,\n  dumpEncryptedAnswer,\n]);\n","import { buildConstructorLoader, buildLoadFunc, buildTypeLoader } from '../../utils';\nimport {\n  CONSTRUCTOR_KEY,\n  SERVER_DH_INNER_DATA_CONSTRUCTOR,\n  SERVER_DH_INNER_DATA_TYPE,\n  TYPE_KEY,\n} from '../../constants';\nimport { loadBigInt128 } from '../bigInt128';\nimport { loadInt } from '../int';\nimport { loadBytes } from '../bytes';\n\nconst loadType = buildTypeLoader(SERVER_DH_INNER_DATA_TYPE);\nconst loadConstructor = buildConstructorLoader(SERVER_DH_INNER_DATA_CONSTRUCTOR);\nconst loadNonce = loadBigInt128;\nconst loadServerNonce = loadBigInt128;\nconst loadG = loadInt;\nconst loadDHPrime = loadBytes;\nconst loadGA = loadBytes;\nconst loadServerTime = loadInt;\n\nexport default buildLoadFunc([\n  [TYPE_KEY, loadType],\n  [CONSTRUCTOR_KEY, loadConstructor],\n  ['nonce', loadNonce],\n  ['server_nonce', loadServerNonce],\n  ['g', loadG],\n  ['dh_prime', loadDHPrime],\n  ['g_a', loadGA],\n  ['server_time', loadServerTime],\n]);\n","import * as R from 'ramda';\nimport { buildDumpFunc } from '../../utils';\nimport { SERVER_DH_INNER_DATA } from '../../constants';\nimport { dumpBigInt128 } from '../bigInt128';\nimport { dumpInt } from '../int';\nimport { dumpBytes } from '../bytes';\n\nconst dumpConstructor = R.pipe(R.always(SERVER_DH_INNER_DATA), dumpInt);\nconst dumpNonce = R.pipe(R.prop('nonce'), dumpBigInt128);\nconst dumpServerNonce = R.pipe(R.prop('server_nonce'), dumpBigInt128);\nconst dumpG = R.pipe(R.prop('g'), dumpInt);\nconst dumpDHPrime = R.pipe(R.prop('dh_prime'), dumpBytes);\nconst dumpGA = R.pipe(R.prop('g_a'), dumpBytes);\nconst dumpServerTime = R.pipe(R.prop('server_time'), dumpInt);\n\n\nexport default buildDumpFunc([\n  dumpConstructor,\n  dumpNonce,\n  dumpServerNonce,\n  dumpG,\n  dumpDHPrime,\n  dumpGA,\n  dumpServerTime,\n]);\n","import { buildConstructorLoader, buildLoadFunc, buildTypeLoader } from '../../utils';\nimport {\n  CLIENT_DH_INNER_DATA_CONSTRUCTOR,\n  CLIENT_DH_INNER_DATA_TYPE, CONSTRUCTOR_KEY, TYPE_KEY,\n} from '../../constants';\nimport { loadBigInt128 } from '../bigInt128';\nimport { loadBytes } from '../bytes';\nimport { loadBigInt } from '../bigInt';\n\nconst loadType = buildTypeLoader(CLIENT_DH_INNER_DATA_TYPE);\nconst loadConstructor = buildConstructorLoader(CLIENT_DH_INNER_DATA_CONSTRUCTOR);\nconst loadNonce = loadBigInt128;\nconst loadServerNonce = loadBigInt128;\nconst loadRetryId = loadBigInt;\nconst loadGB = loadBytes;\n\nexport default buildLoadFunc([\n  [TYPE_KEY, loadType],\n  [CONSTRUCTOR_KEY, loadConstructor],\n  ['nonce', loadNonce],\n  ['server_nonce', loadServerNonce],\n  ['retry_id', loadRetryId],\n  ['g_b', loadGB],\n]);\n","import * as R from 'ramda';\n\nimport { buildDumpFunc } from '../../utils';\nimport { CLIENT_DH_INNER_DATA } from '../../constants';\nimport { dumpInt } from '../int';\nimport { dumpBigInt128 } from '../bigInt128';\nimport { dumpBigInt } from '../bigInt';\nimport { dumpBytes } from '../bytes';\n\nconst dumpConstructor = R.pipe(R.always(CLIENT_DH_INNER_DATA), dumpInt);\nconst dumpNonce = R.pipe(R.prop('nonce'), dumpBigInt128);\nconst dumpServerNonce = R.pipe(R.prop('server_nonce'), dumpBigInt128);\nconst dumpRetryId = R.pipe(R.prop('retry_id'), dumpBigInt);\nconst dumpGB = R.pipe(R.prop('g_b'), dumpBytes);\n\nexport default buildDumpFunc([\n  dumpConstructor,\n  dumpNonce,\n  dumpServerNonce,\n  dumpRetryId,\n  dumpGB,\n]);\n","import { buildMethodLoader, buildLoadFunc, buildTypeLoader } from '../../utils';\nimport {\n  METHOD_KEY,\n  SET_CLIENT_DH_PARAMS_ANSWER_TYPE,\n  SET_CLIENT_DH_PARAMS_METHOD,\n  TYPE_KEY,\n} from '../../constants';\nimport { loadBigInt128 } from '../bigInt128';\nimport { loadBytes } from '../bytes';\n\nconst loadType = buildTypeLoader(SET_CLIENT_DH_PARAMS_ANSWER_TYPE);\nconst loadMethod = buildMethodLoader(SET_CLIENT_DH_PARAMS_METHOD);\nconst loadNonce = loadBigInt128;\nconst loadServerNonce = loadBigInt128;\nconst loadEncryptedData = loadBytes;\n\nexport default buildLoadFunc([\n  [TYPE_KEY, loadType],\n  [METHOD_KEY, loadMethod],\n  ['nonce', loadNonce],\n  ['server_nonce', loadServerNonce],\n  ['encrypted_data', loadEncryptedData],\n]);\n","import * as R from 'ramda';\nimport { buildDumpFunc } from '../../utils';\nimport { SET_CLIENT_DH_PARAMS } from '../../constants';\nimport { dumpInt } from '../int';\nimport { dumpBigInt128 } from '../bigInt128';\nimport { dumpBytes } from '../bytes';\n\nconst dumpMethod = R.pipe(R.always(SET_CLIENT_DH_PARAMS), dumpInt);\nconst dumpNonce = R.pipe(R.prop('nonce'), dumpBigInt128);\nconst dumpServerNonce = R.pipe(R.prop('server_nonce'), dumpBigInt128);\nconst dumpEncryptedData = R.pipe(R.prop('encrypted_data'), dumpBytes);\n\nexport default buildDumpFunc([\n  dumpMethod,\n  dumpNonce,\n  dumpServerNonce,\n  dumpEncryptedData,\n]);\n","import { buildConstructorLoader, buildLoadFunc, buildTypeLoader } from '../../utils';\nimport {\n  CONSTRUCTOR_KEY,\n  DH_GEN_OK_CONSTRUCTOR,\n  SET_CLIENT_DH_PARAMS_ANSWER_TYPE,\n  TYPE_KEY,\n} from '../../constants';\nimport { loadBigInt128 } from '../bigInt128';\n\nconst loadType = buildTypeLoader(SET_CLIENT_DH_PARAMS_ANSWER_TYPE);\nconst loadConstructor = buildConstructorLoader(DH_GEN_OK_CONSTRUCTOR);\nconst loadNonce = loadBigInt128;\nconst loadServerNonce = loadBigInt128;\nconst loadNewNonceHash1 = loadBigInt128;\n\nexport default buildLoadFunc([\n  [TYPE_KEY, loadType],\n  [CONSTRUCTOR_KEY, loadConstructor],\n  ['nonce', loadNonce],\n  ['server_nonce', loadServerNonce],\n  ['new_nonce_hash1', loadNewNonceHash1],\n]);\n","import * as R from 'ramda';\nimport { buildDumpFunc } from '../../utils';\nimport { DH_GEN_OK } from '../../constants';\nimport { dumpInt } from '../int';\nimport { dumpBigInt128 } from '../bigInt128';\n\nconst dumpConstructor = R.pipe(R.always(DH_GEN_OK), dumpInt);\nconst dumpNonce = R.pipe(R.prop('nonce'), dumpBigInt128);\nconst dumpServerNonce = R.pipe(R.prop('server_nonce'), dumpBigInt128);\nconst dumpNewNonceHash1 = R.pipe(R.prop('new_nonce_hash1'), dumpBigInt128);\n\nexport default buildDumpFunc([\n  dumpConstructor,\n  dumpNonce,\n  dumpServerNonce,\n  dumpNewNonceHash1,\n]);\n","import { buildConstructorLoader, buildLoadFunc, buildTypeLoader } from '../../utils';\nimport {\n  CONSTRUCTOR_KEY,\n  DH_GEN_RETRY_CONSTRUCTOR,\n  SET_CLIENT_DH_PARAMS_ANSWER_TYPE,\n  TYPE_KEY,\n} from '../../constants';\nimport { loadBigInt128 } from '../bigInt128';\n\nconst loadType = buildTypeLoader(SET_CLIENT_DH_PARAMS_ANSWER_TYPE);\nconst loadConstructor = buildConstructorLoader(DH_GEN_RETRY_CONSTRUCTOR);\nconst loadNonce = loadBigInt128;\nconst loadServerNonce = loadBigInt128;\nconst loadNewNonceHash2 = loadBigInt128;\n\nexport default buildLoadFunc([\n  [TYPE_KEY, loadType],\n  [CONSTRUCTOR_KEY, loadConstructor],\n  ['nonce', loadNonce],\n  ['server_nonce', loadServerNonce],\n  ['new_nonce_hash2', loadNewNonceHash2],\n]);\n","import * as R from 'ramda';\nimport { buildDumpFunc } from '../../utils';\nimport { DH_GEN_RETRY } from '../../constants';\nimport { dumpInt } from '../int';\nimport { dumpBigInt128 } from '../bigInt128';\n\nconst dumpConstructor = R.pipe(R.always(DH_GEN_RETRY), dumpInt);\nconst dumpNonce = R.pipe(R.prop('nonce'), dumpBigInt128);\nconst dumpServerNonce = R.pipe(R.prop('server_nonce'), dumpBigInt128);\nconst dumpNewNonceHash2 = R.pipe(R.prop('new_nonce_hash2'), dumpBigInt128);\n\nexport default buildDumpFunc([\n  dumpConstructor,\n  dumpNonce,\n  dumpServerNonce,\n  dumpNewNonceHash2,\n]);\n","import { buildConstructorLoader, buildLoadFunc, buildTypeLoader } from '../../utils';\nimport {\n  CONSTRUCTOR_KEY,\n  DH_GEN_FAIL_CONSTRUCTOR,\n  SET_CLIENT_DH_PARAMS_ANSWER_TYPE,\n  TYPE_KEY,\n} from '../../constants';\nimport { loadBigInt128 } from '../bigInt128';\n\nconst loadType = buildTypeLoader(SET_CLIENT_DH_PARAMS_ANSWER_TYPE);\nconst loadConstructor = buildConstructorLoader(DH_GEN_FAIL_CONSTRUCTOR);\nconst loadNonce = loadBigInt128;\nconst loadServerNonce = loadBigInt128;\nconst loadNewNonceHash3 = loadBigInt128;\n\nexport default buildLoadFunc([\n  [TYPE_KEY, loadType],\n  [CONSTRUCTOR_KEY, loadConstructor],\n  ['nonce', loadNonce],\n  ['server_nonce', loadServerNonce],\n  ['new_nonce_hash3', loadNewNonceHash3],\n]);\n","import * as R from 'ramda';\nimport { buildDumpFunc } from '../../utils';\nimport { DH_GEN_FAIL } from '../../constants';\nimport { dumpInt } from '../int';\nimport { dumpBigInt128 } from '../bigInt128';\n\nconst dumpConstructor = R.pipe(R.always(DH_GEN_FAIL), dumpInt);\nconst dumpNonce = R.pipe(R.prop('nonce'), dumpBigInt128);\nconst dumpServerNonce = R.pipe(R.prop('server_nonce'), dumpBigInt128);\nconst dumpNewNonceHash3 = R.pipe(R.prop('new_nonce_hash3'), dumpBigInt128);\n\nexport default buildDumpFunc([\n  dumpConstructor,\n  dumpNonce,\n  dumpServerNonce,\n  dumpNewNonceHash3,\n]);\n","import * as R from 'ramda';\n\nimport { numberToHex, dumpArrayBuffer } from '../utils';\n\nimport {\n  isPong,\n  isNewSessionCreated,\n  isMessageContainer,\n  isBadMsgNotification,\n  isMsgsAck,\n  getConstructor,\n  isRpcResult,\n  isBadServerSalt,\n  isMsgsStateReq,\n  isMsgsStateInfo,\n  isMsgsAllInfo,\n  isMsgDetailedInfo,\n  isMsgNewDetailedInfo,\n  isMsgResendReq,\n  isMsgResendAnsReq,\n  isRpcError,\n  isRpcDropAnswer,\n  isRpcAnswerUnknown,\n  isRpcAnswerDroppedRunning,\n  isRpcAnswerDropped,\n  isGetFutureSalts,\n  isFutureSalt,\n  isFutureSalts,\n  isPing,\n  isPingDelayDisconnect,\n  isDestroySession,\n  isDestroySessionOk,\n  isDestroySessionNone,\n  isHttpWait,\n  isGzipped,\n  isReqPQ,\n  isResPQ,\n  isPQInnerData,\n  isPQInnerDataTemp,\n  isReqDhParams,\n  isServerDHParamsFail,\n  isServerDHParamsOk,\n  isServerDHInnerData,\n  isClienDHInnerData,\n  isSetClientDHParams, isDHGenOk, isDHGenRetry, isDHGenFail,\n} from './utils';\nimport { loadMessageContainer } from './msg_container';\nimport { loadBadMsgNotification } from './bad_msg_notification';\nimport { loadBadServerSalt } from './bad_server_salt';\nimport { loadMsgsAck } from './msgs_ack';\nimport { loadRpcResult } from './rpc_result';\nimport { loadMsgsStateReq } from './msgs_state_req';\nimport { loadMsgsStateInfo } from './msgs_state_info';\nimport { loadMsgsAllInfo } from './msgs_all_info';\nimport { loadMsgDetailedInfo } from './msg_detailed_info';\nimport { loadMsgNewDetailedInfo } from './msg_new_detailed_info';\nimport { loadMsgResendReq } from './msg_resend_req';\nimport { loadMsgResendAnsReq } from './msg_resend_ans_req';\nimport { loadRpcError } from './rpc_error';\nimport { loadRpcDropAnswer } from './rpc_drop_answer';\nimport { loadRpcAnswerUnknown } from './rpc_answer_unknown';\nimport { loadRpcAnswerDroppedRunning } from './rpc_answer_dropped_running';\nimport { loadRpcAnswerDropped } from './rpc_answer_dropped';\nimport { loadGetFutureSalts } from './get_future_salts';\nimport { loadFutureSalt } from './future_salt';\nimport { loadFutureSalts } from './future_salts';\nimport { loadPing } from './ping';\nimport { loadPong } from './pong';\nimport { loadPingDelayDisconnect } from './ping_delay_disconnect';\nimport { loadDestroySession } from './destory_session';\nimport { loadDestroySessionOk } from './destory_session_ok';\nimport { loadDestroySessionNone } from './destory_session_none';\nimport { loadNewSessionCreated } from './new_session_created';\nimport { loadHttpWait } from './http_wait';\nimport { loadReqPQ } from './req_pq';\nimport { loadBySchema, isFromSchemaFactory } from './schema';\nimport unzipMessage from './unzipMessage';\nimport { loadResPQ } from './res_pq';\nimport { loadPQInnerData } from './p_q_inner_data';\nimport { loadPQInnerDataTemp } from './p_q_inner_data_temp';\nimport { loadReqDHParams } from './req_DH_params';\nimport { loadServerDHParamsFail } from './server_DH_params_fail';\nimport { loadServerDHParamsOk } from './server_DH_params_ok';\nimport { loadServerDHInnerData } from './server_DH_inner_data';\nimport { loadClientDHInnerData } from './client_DH_inner_data';\nimport { loadSetClientDHParams } from './set_client_DH_params';\nimport { loadDHGenOk } from './dh_gen_ok';\nimport { loadDHGenRetry } from './dh_gen_retry';\nimport { loadDHGenFail } from './dh_gen_fail';\n\n/**\n * Writes warning message into console and returns null\n * @param {ArrayBuffer} buffer;\n * @returns {null}\n */\nconst parseUnexpectedMessage = R.pipe(\n  R.nthArg(0),\n  R.of,\n  R.ap([\n    R.pipe(getConstructor, numberToHex),\n    dumpArrayBuffer,\n  ]),\n  (x) => {\n    console.warn(`Unexpected message constructor: ${x[0]}`);\n    console.warn(x[1]);\n  },\n  R.always(null),\n);\n\n/**\n * Takes array buffer of encoded message and returns message as parsed object or\n * list of parsed objects\n * @param {{constructors: *, methods: *}} schema - schema that should be used for dumping objects\n * @param {ArrayBuffer} buffer\n * @param {boolean} [withOffset]\n * @returns {Array<*> | *}\n */\nexport default function loadMessage(schema, buffer, withOffset) {\n  const load = R.partial(loadMessage, [schema]);\n  return R.cond([\n    [isGzipped, R.partialRight(unzipMessage, [load])],\n    [isHttpWait, loadHttpWait],\n    [isPong, loadPong],\n    [isPing, loadPing],\n    [isPingDelayDisconnect, loadPingDelayDisconnect],\n    [isNewSessionCreated, loadNewSessionCreated],\n    [isBadMsgNotification, loadBadMsgNotification],\n    [isMsgsAck, loadMsgsAck],\n    [isBadServerSalt, loadBadServerSalt],\n    [isMsgsStateReq, loadMsgsStateReq],\n    [isMsgsStateInfo, loadMsgsStateInfo],\n    [isMsgsAllInfo, loadMsgsAllInfo],\n    [isMsgDetailedInfo, loadMsgDetailedInfo],\n    [isMsgNewDetailedInfo, loadMsgNewDetailedInfo],\n    [isMsgResendReq, loadMsgResendReq],\n    [isMsgResendAnsReq, loadMsgResendAnsReq],\n    [isRpcError, loadRpcError],\n    [isRpcDropAnswer, loadRpcDropAnswer],\n    [isRpcAnswerUnknown, loadRpcAnswerUnknown],\n    [isRpcAnswerDroppedRunning, loadRpcAnswerDroppedRunning],\n    [isRpcAnswerDropped, loadRpcAnswerDropped],\n    [isGetFutureSalts, loadGetFutureSalts],\n    [isFutureSalt, loadFutureSalt],\n    [isFutureSalts, loadFutureSalts],\n    [isRpcResult, R.partialRight(loadRpcResult, [load])],\n    [isDestroySession, loadDestroySession],\n    [isDestroySessionOk, loadDestroySessionOk],\n    [isDestroySessionNone, loadDestroySessionNone],\n    [isMessageContainer, R.partialRight(loadMessageContainer, [load])],\n    [isReqPQ, loadReqPQ],\n    [isResPQ, loadResPQ],\n    [isPQInnerData, loadPQInnerData],\n    [isPQInnerDataTemp, loadPQInnerDataTemp],\n    [isReqDhParams, loadReqDHParams],\n    [isServerDHParamsFail, loadServerDHParamsFail],\n    [isServerDHParamsOk, loadServerDHParamsOk],\n    [isServerDHInnerData, loadServerDHInnerData],\n    [isClienDHInnerData, loadClientDHInnerData],\n    [isSetClientDHParams, loadSetClientDHParams],\n    [isDHGenOk, loadDHGenOk],\n    [isDHGenRetry, loadDHGenRetry],\n    [isDHGenFail, loadDHGenFail],\n    [isFromSchemaFactory(schema), R.partial(loadBySchema, [schema])],\n    [R.T, parseUnexpectedMessage],\n  ])(buffer, withOffset);\n}\n","import * as R from 'ramda';\n\nimport { dumpBadMsgNotification } from './bad_msg_notification';\nimport {\n  BAD_MSG_NOTIFICATION_CONSTRUCTOR,\n  BAD_SERVER_SALT_CONSTRUCTOR,\n  DESTROY_SESSION_NONE_CONSTRUCTOR,\n  DESTROY_SESSION_OK_CONSTRUCTOR,\n  DESTROY_SESSION_CONSTRUCTOR,\n  FUTURE_SALT_CONSTRUCTOR,\n  FUTURE_SALTS_CONSTRUCTOR,\n  GET_FUTURE_SALTS_METHOD,\n  HTTP_WAIT_CONSTRUCTOR,\n  MESSAGE_CONTAINER_CONSTRUCTOR,\n  MSG_DETAILED_INFO_CONSTRUCTOR,\n  MSG_NEW_DETAILED_INFO_CONSTRUCTOR,\n  MSG_RESEND_ANS_REQ_METHOD,\n  MSG_RESEND_REQ_METHOD,\n  MSGS_ACK_CONSTRUCTOR,\n  MSGS_ALL_INFO_CONSTRUCTOR,\n  MSGS_STATE_INFO_CONSTRUCTOR,\n  MSGS_STATE_REQ_METHOD,\n  NEW_SESSION_CREATED_CONSTRUCTOR,\n  PING_DELAY_DISCONNECT_METHOD,\n  PING_METHOD,\n  PONG_CONSTRUCTOR,\n  RPC_ANSWER_DROPPED_RUNNING_CONSTRUCTOR,\n  RPC_ANSWER_DROPPED_CONSTRUCTOR,\n  RPC_ANSWER_UNKNOWN_CONSTRUCTOR,\n  RPC_DROP_ANSWER_METHOD,\n  RPC_ERROR_CONSTRUCTOR,\n  RPC_RESULT_CONSTRUCTOR,\n  REQ_PQ_METHOD,\n  RES_PQ_CONSTRUCTOR,\n  PQ_INNER_DATA_CONSTRUCTOR,\n  PQ_INNER_DATA_TEMP_CONSTRUCTOR,\n  REQ_DH_PARAMS_METHOD,\n  SERVER_DH_PARAMS_FAIL_CONSTRUCTOR,\n  SERVER_DH_PARAMS_OK_CONSTRUCTOR,\n  SERVER_DH_INNER_DATA_CONSTRUCTOR,\n  CLIENT_DH_INNER_DATA_CONSTRUCTOR,\n  SET_CLIENT_DH_PARAMS_METHOD,\n  DH_GEN_OK_CONSTRUCTOR,\n  DH_GEN_RETRY_CONSTRUCTOR, DH_GEN_FAIL_CONSTRUCTOR,\n} from '../constants';\nimport { dumpBadServerSalt } from './bad_server_salt';\nimport { dumpDestroySession } from './destory_session';\nimport { dumpDestroySessionNone } from './destory_session_none';\nimport { dumpDestroySessionOk } from './destory_session_ok';\nimport { dumpFutureSalt } from './future_salt';\nimport { dumpFutureSalts } from './future_salts';\nimport { dumpGetFutureSalts } from './get_future_salts';\nimport { dumpHttpWait } from './http_wait';\nimport { dumpMessageContainer } from './msg_container';\nimport { dumpMsgDetailedInfo } from './msg_detailed_info';\nimport { dumpMsgNewDetailedInfo } from './msg_new_detailed_info';\nimport { dumpMsgResendAnsReq } from './msg_resend_ans_req';\nimport { dumpMsgResendReq } from './msg_resend_req';\nimport { dumpMsgsAck } from './msgs_ack';\nimport { dumpMsgsAllInfo } from './msgs_all_info';\nimport { dumpMsgsStateInfo } from './msgs_state_info';\nimport { dumpMsgsStateReq } from './msgs_state_req';\nimport { dumpNewSessionCreated } from './new_session_created';\nimport { dumpPing } from './ping';\nimport { dumpPingDelayDisconnect } from './ping_delay_disconnect';\nimport { dumpPong } from './pong';\nimport { dumpRpcAnswerDropped } from './rpc_answer_dropped';\nimport { dumpRpcAnswerDroppedRunning } from './rpc_answer_dropped_running';\nimport { dumpRpcAnswerUnknown } from './rpc_answer_unknown';\nimport { dumpRpcDropAnswer } from './rpc_drop_answer';\nimport { dumpRpcError } from './rpc_error';\nimport { dumpRpcResult } from './rpc_result';\nimport { dumpBySchema, isMsgCouldBeDump } from './schema';\nimport { isMessageOf, isMethodOf } from './utils';\nimport { dumpReqPQ } from './req_pq';\nimport { dumpResPQ } from './res_pq';\nimport { dumpPQInnerData } from './p_q_inner_data';\nimport { dumpPQInnerDataTemp } from './p_q_inner_data_temp';\nimport { dumpReqDHParams } from './req_DH_params';\nimport { dumpServerDHParamsFail } from './server_DH_params_fail';\nimport { dumpServerDHParamsOk } from './server_DH_params_ok';\nimport { dumpServerDHInnerData } from './server_DH_inner_data';\nimport { dumpClientDHInnerData } from './client_DH_inner_data';\nimport { dumpSetClientDHParams } from './set_client_DH_params';\nimport { dumpDHGenOk } from './dh_gen_ok';\nimport { dumpDHGenRetry } from './dh_gen_retry';\nimport { dumpDHGenFail } from './dh_gen_fail';\n\n\n/**\n * Dumps unexpected message as empty array. print error to console\n * @param x\n * @returns {ArrayBuffer}\n */\nexport const dumpUnexpectedMessage = (x) => {\n  console.error('Can\\'t dump unexpected message:', x);\n  return new ArrayBuffer();\n};\n\n/**\n * Dumps any mt-proto message to array buffer\n * @param {{constructors: *, methods: *}} schema - schema that should be used for dumping objects\n * @param {*} msg\n * @returns {ArrayBuffer}\n */\nexport default function dumpMessage(schema, msg) {\n  const dump = R.partial(dumpMessage, [schema]);\n\n  return R.cond([\n    [isMessageOf(BAD_MSG_NOTIFICATION_CONSTRUCTOR), dumpBadMsgNotification],\n    [isMessageOf(BAD_SERVER_SALT_CONSTRUCTOR), dumpBadServerSalt],\n    [isMessageOf(DESTROY_SESSION_CONSTRUCTOR), dumpDestroySession],\n    [isMessageOf(DESTROY_SESSION_NONE_CONSTRUCTOR), dumpDestroySessionNone],\n    [isMessageOf(DESTROY_SESSION_OK_CONSTRUCTOR), dumpDestroySessionOk],\n    [isMessageOf(FUTURE_SALT_CONSTRUCTOR), dumpFutureSalt],\n    [isMessageOf(FUTURE_SALTS_CONSTRUCTOR), dumpFutureSalts],\n    [isMethodOf(GET_FUTURE_SALTS_METHOD), dumpGetFutureSalts],\n    [isMessageOf(HTTP_WAIT_CONSTRUCTOR), dumpHttpWait],\n    [isMessageOf(MESSAGE_CONTAINER_CONSTRUCTOR), R.partialRight(dumpMessageContainer, [dump])],\n    [isMessageOf(MSG_DETAILED_INFO_CONSTRUCTOR), dumpMsgDetailedInfo],\n    [isMessageOf(MSG_NEW_DETAILED_INFO_CONSTRUCTOR), dumpMsgNewDetailedInfo],\n    [isMethodOf(MSG_RESEND_ANS_REQ_METHOD), dumpMsgResendAnsReq],\n    [isMethodOf(MSG_RESEND_REQ_METHOD), dumpMsgResendReq],\n    [isMessageOf(MSGS_ACK_CONSTRUCTOR), dumpMsgsAck],\n    [isMessageOf(MSGS_ALL_INFO_CONSTRUCTOR), dumpMsgsAllInfo],\n    [isMessageOf(MSGS_STATE_INFO_CONSTRUCTOR), dumpMsgsStateInfo],\n    [isMethodOf(MSGS_STATE_REQ_METHOD), dumpMsgsStateReq],\n    [isMessageOf(NEW_SESSION_CREATED_CONSTRUCTOR), dumpNewSessionCreated],\n    [isMethodOf(PING_METHOD), dumpPing],\n    [isMethodOf(PING_DELAY_DISCONNECT_METHOD), dumpPingDelayDisconnect],\n    [isMessageOf(PONG_CONSTRUCTOR), dumpPong],\n    [isMessageOf(RPC_ANSWER_DROPPED_CONSTRUCTOR), dumpRpcAnswerDropped],\n    [isMessageOf(RPC_ANSWER_DROPPED_RUNNING_CONSTRUCTOR), dumpRpcAnswerDroppedRunning],\n    [isMessageOf(RPC_ANSWER_UNKNOWN_CONSTRUCTOR), dumpRpcAnswerUnknown],\n    [isMethodOf(RPC_DROP_ANSWER_METHOD), dumpRpcDropAnswer],\n    [isMessageOf(RPC_ERROR_CONSTRUCTOR), dumpRpcError],\n    [isMessageOf(RPC_RESULT_CONSTRUCTOR), R.partialRight(dumpRpcResult, [dump])],\n    [isMethodOf(REQ_PQ_METHOD), dumpReqPQ],\n    [isMessageOf(RES_PQ_CONSTRUCTOR), dumpResPQ],\n    [isMessageOf(PQ_INNER_DATA_CONSTRUCTOR), dumpPQInnerData],\n    [isMessageOf(PQ_INNER_DATA_TEMP_CONSTRUCTOR), dumpPQInnerDataTemp],\n    [isMethodOf(REQ_DH_PARAMS_METHOD), dumpReqDHParams],\n    [isMessageOf(SERVER_DH_PARAMS_FAIL_CONSTRUCTOR), dumpServerDHParamsFail],\n    [isMessageOf(SERVER_DH_PARAMS_OK_CONSTRUCTOR), dumpServerDHParamsOk],\n    [isMessageOf(SERVER_DH_INNER_DATA_CONSTRUCTOR), dumpServerDHInnerData],\n    [isMessageOf(CLIENT_DH_INNER_DATA_CONSTRUCTOR), dumpClientDHInnerData],\n    [isMethodOf(SET_CLIENT_DH_PARAMS_METHOD), dumpSetClientDHParams],\n    [isMessageOf(DH_GEN_OK_CONSTRUCTOR), dumpDHGenOk],\n    [isMessageOf(DH_GEN_RETRY_CONSTRUCTOR), dumpDHGenRetry],\n    [isMessageOf(DH_GEN_FAIL_CONSTRUCTOR), dumpDHGenFail],\n    [R.partial(isMsgCouldBeDump, [schema]), R.partial(dumpBySchema, [schema])],\n    [R.T, dumpUnexpectedMessage],\n  ])(msg);\n}\n","import * as R from 'ramda';\n\nimport { getSchemaForConstructor } from './utils';\nimport { CONSTRUCTOR_KEY, TYPE_KEY } from '../../constants';\n\n\nconst buildGetTypePairFunc = R.pipe(\n  R.prop('type'),\n  R.of,\n  R.ap([\n    R.always(TYPE_KEY),\n    R.identity,\n  ]),\n  R.always,\n);\n\nconst buildGetPredicatePairFunc = R.pipe(\n  R.prop('predicate'),\n  R.of,\n  R.ap([\n    R.always(CONSTRUCTOR_KEY),\n    R.identity,\n  ]),\n  R.always,\n);\n\n\n/**\n * Builds object that could be dumped as method call\n * @param {{constructors: *, methods: *}} schema\n * @param {string} predicate\n * @param {*} params\n */\nexport default R.unapply(R.pipe(\n  R.of,\n  R.ap([\n    R.pipe(\n      R.of,\n      R.ap([\n        R.nth(0),\n        R.nth(1),\n      ]),\n      R.apply(getSchemaForConstructor),\n      R.cond([\n        [\n          Boolean,\n          R.pipe(\n            R.of,\n            R.ap([\n              buildGetTypePairFunc,\n              buildGetPredicatePairFunc,\n              R.pipe(\n                R.prop('params'),\n                R.map(R.pipe(\n                  R.prop('name'),\n                  R.of,\n                  R.ap([\n                    R.always,\n                    R.prop,\n                  ]),\n                  R.ap,\n                  (func) => R.pipe(R.of, func),\n                )),\n              ),\n            ]),\n            R.flatten,\n            R.ap,\n            (func) => R.pipe(R.of, func, R.fromPairs),\n          ),\n        ],\n        [R.T, R.always],\n      ]),\n    ),\n    R.pipe(R.nth(2)),\n  ]),\n  R.apply(R.call),\n));\n","import * as R from 'ramda';\nimport { getSchemaForMethod } from './utils';\nimport { METHOD_KEY, TYPE_KEY } from '../../constants';\n\n\nconst buildGetTypePairFunc = R.pipe(\n  R.prop('type'),\n  R.of,\n  R.ap([\n    R.always(TYPE_KEY),\n    R.identity,\n  ]),\n  R.always,\n);\n\nconst buildGetMethodPairFunc = R.pipe(\n  R.prop('method'),\n  R.of,\n  R.ap([\n    R.always(METHOD_KEY),\n    R.identity,\n  ]),\n  R.always,\n);\n\n/**\n * Builds object that could be dumped as method call\n * @param {{constructors: *, methods: *}} schema\n * @param {string} methodName\n * @param {*} params\n */\nexport default R.unapply(R.pipe(\n  R.of,\n  R.ap([\n    R.pipe(\n      R.of,\n      R.ap([\n        R.nth(0),\n        R.nth(1),\n      ]),\n      R.apply(getSchemaForMethod),\n      R.cond([\n        [\n          Boolean,\n          R.pipe(\n            R.of,\n            R.ap([\n              buildGetTypePairFunc,\n              buildGetMethodPairFunc,\n              R.pipe(\n                R.prop('params'),\n                R.map(R.pipe(\n                  R.prop('name'),\n                  R.of,\n                  R.ap([\n                    R.always,\n                    R.prop,\n                  ]),\n                  R.ap,\n                  (func) => R.pipe(R.of, func),\n                )),\n              ),\n            ]),\n            R.flatten,\n            R.ap,\n            (func) => R.pipe(R.of, func, R.fromPairs),\n          ),\n        ],\n        [R.T, R.always],\n      ]),\n    ),\n    R.pipe(R.nth(2)),\n  ]),\n  R.apply(R.call),\n));\n","import _curry3 from './internal/_curry3.js';\n\n/**\n * Replace a substring or regex match in a string with a replacement.\n *\n * The first two parameters correspond to the parameters of the\n * `String.prototype.replace()` function, so the second parameter can also be a\n * function.\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category String\n * @sig RegExp|String -> String -> String -> String\n * @param {RegExp|String} pattern A regular expression or a substring to match.\n * @param {String} replacement The string to replace the matches with.\n * @param {String} str The String to do the search and replacement in.\n * @return {String} The result.\n * @example\n *\n *      R.replace('foo', 'bar', 'foo foo foo'); //=> 'bar foo foo'\n *      R.replace(/foo/, 'bar', 'foo foo foo'); //=> 'bar foo foo'\n *\n *      // Use the \"g\" (global) flag to replace all occurrences:\n *      R.replace(/foo/g, 'bar', 'foo foo foo'); //=> 'bar bar bar'\n */\nvar replace = /*#__PURE__*/_curry3(function replace(regex, replacement, str) {\n  return str.replace(regex, replacement);\n});\nexport default replace;","import _curry2 from './internal/_curry2.js';\n\n/**\n * Returns the second argument if it is not `null`, `undefined` or `NaN`;\n * otherwise the first argument is returned.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category Logic\n * @sig a -> b -> a | b\n * @param {a} default The default value.\n * @param {b} val `val` will be returned instead of `default` unless `val` is `null`, `undefined` or `NaN`.\n * @return {*} The second value if it is not `null`, `undefined` or `NaN`, otherwise the default value\n * @example\n *\n *      const defaultTo42 = R.defaultTo(42);\n *\n *      defaultTo42(null);  //=> 42\n *      defaultTo42(undefined);  //=> 42\n *      defaultTo42(false);  //=> false\n *      defaultTo42('Ramda');  //=> 'Ramda'\n *      // parseInt('string') results in NaN\n *      defaultTo42(parseInt('string')); //=> 42\n */\nvar defaultTo = /*#__PURE__*/_curry2(function defaultTo(d, v) {\n  return v == null || v !== v ? d : v;\n});\nexport default defaultTo;","import _curry3 from './internal/_curry3.js';\nimport defaultTo from './defaultTo.js';\nimport path from './path.js';\n\n/**\n * If the given, non-null object has a value at the given path, returns the\n * value at that path. Otherwise returns the provided default value.\n *\n * @func\n * @memberOf R\n * @since v0.18.0\n * @category Object\n * @typedefn Idx = String | Int\n * @sig a -> [Idx] -> {a} -> a\n * @param {*} d The default value.\n * @param {Array} p The path to use.\n * @param {Object} obj The object to retrieve the nested property from.\n * @return {*} The data at `path` of the supplied object or the default value.\n * @example\n *\n *      R.pathOr('N/A', ['a', 'b'], {a: {b: 2}}); //=> 2\n *      R.pathOr('N/A', ['a', 'b'], {c: {b: 2}}); //=> \"N/A\"\n */\nvar pathOr = /*#__PURE__*/_curry3(function pathOr(d, p, obj) {\n  return defaultTo(d, path(p, obj));\n});\nexport default pathOr;","import * as R from 'ramda';\nimport {\n  applyAll,\n  arrayBufferToUint8Array,\n  getFirstByte,\n  getNBit, maskNumber, sliceBuffer,\n  uint8ToBigInt,\n} from '../../utils';\n\nconst bigIntSubtract = (x, y) => x - y;\n\nconst isNegative = R.pipe(\n  getFirstByte,\n  R.partialRight(getNBit, [7]),\n  Boolean,\n);\n\n/**\n * Get's x value from array buffer with rules from asn1 standart\n * @param {ArrayBuffer} buffer - encode array buffer\n * @returns {BigInt}\n */\nconst getXValue = R.pipe(\n  applyAll([\n    R.pipe(getFirstByte, R.partial(maskNumber, [0b01111111])),\n    R.pipe(R.partialRight(sliceBuffer, [1]), arrayBufferToUint8Array),\n  ]),\n  R.flatten,\n  uint8ToBigInt,\n);\n\nconst getYValue = R.pipe(\n  applyAll([\n    R.pipe(\n      getFirstByte,\n      R.partial(maskNumber, [0b10000000]),\n    ),\n    R.pipe(\n      R.prop('byteLength'),\n      R.partialRight(R.subtract, [1]),\n      R.times(R.always(0)),\n    ),\n  ]),\n  R.flatten,\n  uint8ToBigInt,\n);\n\nconst getPositiveInt = getXValue;\nconst getNegativeInt = R.pipe(\n  applyAll([getXValue, getYValue]),\n  R.apply((bigIntSubtract)),\n);\n\nexport default R.cond([\n  [isNegative, getNegativeInt],\n  [R.T, getPositiveInt],\n]);\n","import * as R from 'ramda';\n\nexport default R.pipe(\n  R.prop('blockId'),\n  R.equals(2),\n);\n","import _concat from './internal/_concat.js';\nimport _curry1 from './internal/_curry1.js';\nimport curryN from './curryN.js';\n\n/**\n * Creates a new list iteration function from an existing one by adding two new\n * parameters to its callback function: the current index, and the entire list.\n *\n * This would turn, for instance, [`R.map`](#map) function into one that\n * more closely resembles `Array.prototype.map`. Note that this will only work\n * for functions in which the iteration callback function is the first\n * parameter, and where the list is the last parameter. (This latter might be\n * unimportant if the list parameter is not used.)\n *\n * @func\n * @memberOf R\n * @since v0.15.0\n * @category Function\n * @category List\n * @sig ((a ... -> b) ... -> [a] -> *) -> ((a ..., Int, [a] -> b) ... -> [a] -> *)\n * @param {Function} fn A list iteration function that does not pass index or list to its callback\n * @return {Function} An altered list iteration function that passes (item, index, list) to its callback\n * @example\n *\n *      const mapIndexed = R.addIndex(R.map);\n *      mapIndexed((val, idx) => idx + '-' + val, ['f', 'o', 'o', 'b', 'a', 'r']);\n *      //=> ['0-f', '1-o', '2-o', '3-b', '4-a', '5-r']\n */\nvar addIndex = /*#__PURE__*/_curry1(function addIndex(fn) {\n  return curryN(fn.length, function () {\n    var idx = 0;\n    var origFn = arguments[0];\n    var list = arguments[arguments.length - 1];\n    var args = Array.prototype.slice.call(arguments, 0);\n    args[0] = function () {\n      var result = origFn.apply(this, _concat(arguments, [idx, list]));\n      idx += 1;\n      return result;\n    };\n    return fn.apply(this, args);\n  });\n});\nexport default addIndex;","import _concat from './internal/_concat.js';\nimport _curry2 from './internal/_curry2.js';\n\n/**\n * Returns a new list with the given element at the front, followed by the\n * contents of the list.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig a -> [a] -> [a]\n * @param {*} el The item to add to the head of the output list.\n * @param {Array} list The array to add to the tail of the output list.\n * @return {Array} A new array.\n * @see R.append\n * @example\n *\n *      R.prepend('fee', ['fi', 'fo', 'fum']); //=> ['fee', 'fi', 'fo', 'fum']\n */\nvar prepend = /*#__PURE__*/_curry2(function prepend(el, list) {\n  return _concat([el], list);\n});\nexport default prepend;","import take from '../take.js';\n\nexport default function dropLast(n, xs) {\n  return take(n < xs.length ? xs.length - n : 0, xs);\n}","import _curry2 from './_curry2.js';\nimport _xfBase from './_xfBase.js';\n\nvar XDropLast = /*#__PURE__*/function () {\n  function XDropLast(n, xf) {\n    this.xf = xf;\n    this.pos = 0;\n    this.full = false;\n    this.acc = new Array(n);\n  }\n  XDropLast.prototype['@@transducer/init'] = _xfBase.init;\n  XDropLast.prototype['@@transducer/result'] = function (result) {\n    this.acc = null;\n    return this.xf['@@transducer/result'](result);\n  };\n  XDropLast.prototype['@@transducer/step'] = function (result, input) {\n    if (this.full) {\n      result = this.xf['@@transducer/step'](result, this.acc[this.pos]);\n    }\n    this.store(input);\n    return result;\n  };\n  XDropLast.prototype.store = function (input) {\n    this.acc[this.pos] = input;\n    this.pos += 1;\n    if (this.pos === this.acc.length) {\n      this.pos = 0;\n      this.full = true;\n    }\n  };\n\n  return XDropLast;\n}();\n\nvar _xdropLast = /*#__PURE__*/_curry2(function _xdropLast(n, xf) {\n  return new XDropLast(n, xf);\n});\nexport default _xdropLast;","import _curry2 from './internal/_curry2.js';\nimport _dispatchable from './internal/_dispatchable.js';\nimport _dropLast from './internal/_dropLast.js';\nimport _xdropLast from './internal/_xdropLast.js';\n\n/**\n * Returns a list containing all but the last `n` elements of the given `list`.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig Number -> [a] -> [a]\n * @sig Number -> String -> String\n * @param {Number} n The number of elements of `list` to skip.\n * @param {Array} list The list of elements to consider.\n * @return {Array} A copy of the list with only the first `list.length - n` elements\n * @see R.takeLast, R.drop, R.dropWhile, R.dropLastWhile\n * @example\n *\n *      R.dropLast(1, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']\n *      R.dropLast(2, ['foo', 'bar', 'baz']); //=> ['foo']\n *      R.dropLast(3, ['foo', 'bar', 'baz']); //=> []\n *      R.dropLast(4, ['foo', 'bar', 'baz']); //=> []\n *      R.dropLast(3, 'ramda');               //=> 'ra'\n */\nvar dropLast = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable([], _xdropLast, _dropLast));\nexport default dropLast;","import _curry2 from './internal/_curry2.js';\n\n/**\n * Returns `true` if the first argument is greater than or equal to the second;\n * `false` otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig Ord a => a -> a -> Boolean\n * @param {Number} a\n * @param {Number} b\n * @return {Boolean}\n * @see R.lte\n * @example\n *\n *      R.gte(2, 1); //=> true\n *      R.gte(2, 2); //=> true\n *      R.gte(2, 3); //=> false\n *      R.gte('a', 'z'); //=> false\n *      R.gte('z', 'a'); //=> true\n */\nvar gte = /*#__PURE__*/_curry2(function gte(a, b) {\n  return a >= b;\n});\nexport default gte;","import _curry2 from './_curry2.js';\nimport _xfBase from './_xfBase.js';\n\nvar XDrop = /*#__PURE__*/function () {\n  function XDrop(n, xf) {\n    this.xf = xf;\n    this.n = n;\n  }\n  XDrop.prototype['@@transducer/init'] = _xfBase.init;\n  XDrop.prototype['@@transducer/result'] = _xfBase.result;\n  XDrop.prototype['@@transducer/step'] = function (result, input) {\n    if (this.n > 0) {\n      this.n -= 1;\n      return result;\n    }\n    return this.xf['@@transducer/step'](result, input);\n  };\n\n  return XDrop;\n}();\n\nvar _xdrop = /*#__PURE__*/_curry2(function _xdrop(n, xf) {\n  return new XDrop(n, xf);\n});\nexport default _xdrop;","import _curry2 from './internal/_curry2.js';\nimport _dispatchable from './internal/_dispatchable.js';\nimport _xdrop from './internal/_xdrop.js';\nimport slice from './slice.js';\n\n/**\n * Returns all but the first `n` elements of the given list, string, or\n * transducer/transformer (or object with a `drop` method).\n *\n * Dispatches to the `drop` method of the second argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Number -> [a] -> [a]\n * @sig Number -> String -> String\n * @param {Number} n\n * @param {*} list\n * @return {*} A copy of list without the first `n` elements\n * @see R.take, R.transduce, R.dropLast, R.dropWhile\n * @example\n *\n *      R.drop(1, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']\n *      R.drop(2, ['foo', 'bar', 'baz']); //=> ['baz']\n *      R.drop(3, ['foo', 'bar', 'baz']); //=> []\n *      R.drop(4, ['foo', 'bar', 'baz']); //=> []\n *      R.drop(3, 'ramda');               //=> 'da'\n */\nvar drop = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable(['drop'], _xdrop, function drop(n, xs) {\n  return slice(Math.max(0, n), Infinity, xs);\n}));\nexport default drop;","import * as R from 'ramda';\nimport {\n  applyAll,\n  arrayBufferToUint8Array,\n  getNBit,\n  maskNumber,\n  sliceBuffer,\n} from '../../utils';\n\n/**\n * Split array buffer by number. end value byte is a byte where 7th bit equals to 0\n * @param {ArrayBuffer} buffer - encoded asn1 value\n * @returns {Array<Number>} - list of ids of integer value\n */\nconst getSplitIdx = R.pipe(\n  arrayBufferToUint8Array,\n  (x) => Array.from(x),\n  R.map(R.partialRight(getNBit, [7])),\n  R.addIndex(R.map)((x, y) => [x, y]),\n  R.filter(R.pipe(R.nth(0), R.equals(0))),\n  R.map(R.nth(1)),\n);\n\n/**\n * Gets range of every number in array buffer\n * @param {ArrayBuffer} buffer - encoded asn1 value\n * @returns {Array<[Number, Number]>}\n */\nconst getIntRange = R.pipe(\n  getSplitIdx,\n  applyAll([\n    R.pipe(R.map(R.inc), R.prepend(0), R.dropLast(1)),\n    R.pipe(R.map(R.inc)),\n  ]),\n  R.apply(R.zip),\n);\n\n/**\n * Build slice function to split array to encoded numbers\n * @param {ArrayBuffer} buffer - encoded asn1 value\n * @returns {Array<Function>} - list of functions that could split array\n */\nconst buildSliceFuncList = R.pipe(\n  getIntRange,\n  R.map((range) => R.partialRight(sliceBuffer, range)),\n);\n\n/**\n * Read SID number from array buffer.\n * Compute SID number as int with base 127\n * @param {ArrayBuffer}\n * @returns {BigInt}\n */\nconst readSIDNumber = R.pipe(\n  arrayBufferToUint8Array,\n  (x) => Array.from(x),\n  R.map(R.partial(maskNumber, [0b01111111])),\n  R.map(BigInt),\n  R.reduce(\n    (a, b) => a * BigInt(128) + b,\n    BigInt(0),\n  ),\n);\n\nconst subtractBigInt = (x, y) => x - y;\n\n/**\n * Read SID 1 and 2 numbers from array buffer by rules for asn1\n * @param {ArrayBuffer}\n * @returns {[BigInt, BigInt]}\n */\nconst readSID1and2Numbers = R.pipe(\n  readSIDNumber,\n  R.cond([\n    [\n      R.gte(39),\n      applyAll([\n        R.always(BigInt('0')),\n        R.identity,\n      ]),\n    ],\n    [\n      R.gte(79),\n      applyAll([\n        R.always(BigInt('1')),\n        R.partialRight(R.subtract, [BigInt(40)]),\n      ]),\n    ],\n    [\n      R.T,\n      applyAll([\n        R.always(BigInt('2')),\n        R.partialRight(subtractBigInt, [BigInt(80)]),\n      ]),\n    ],\n  ]),\n);\n\n/**\n * Reads SID numbers as big int from asn1 buffer1\n * @param {ArrayBuffer}\n * @returns {Array<BigInt>}\n */\nconst readSIDNumbers = R.pipe(\n  applyAll([\n    R.pipe(R.nth(0), readSID1and2Numbers),\n    R.pipe(\n      R.drop(1),\n      R.map(readSIDNumber),\n    ),\n  ]),\n  R.flatten,\n);\n\nconst splitToOIDBuffers = R.pipe(\n  applyAll([\n    buildSliceFuncList,\n    R.of,\n  ]),\n  R.apply(R.ap),\n);\n\nexport default R.pipe(\n  splitToOIDBuffers,\n  readSIDNumbers,\n  R.map(R.toString),\n  R.join('.'),\n);\n","import * as R from 'ramda';\n\nexport default R.pipe(\n  R.prop('blockId'),\n  R.equals(6),\n);\n","import * as R from 'ramda';\n\nexport default R.always(null);\n","import * as R from 'ramda';\n\nexport default R.pipe(\n  R.prop('blockId'),\n  R.equals(5),\n);\n","import * as R from 'ramda';\nimport { getFirstByte } from '../../utils';\n\nexport default R.pipe(\n  getFirstByte,\n  Boolean,\n);\n","import * as R from 'ramda';\n\nexport default R.pipe(\n  R.prop('blockId'),\n  R.equals(1),\n);\n","import * as R from 'ramda';\n\nimport {\n  applyAll,\n  arrayBufferToUint8Array,\n  byteToStrBase2,\n  getNBit,\n  toArray,\n} from '../../utils';\n\nexport default class BitString {\n  /**\n   * @param {ArrayBuffer} buffer\n   * @param {Number} padding\n   */\n  constructor(buffer, padding) {\n    this.buffer = buffer;\n    this.padding = padding;\n  }\n\n  /**\n   * @param {Number} nth - nth bit that should be read use higher-to-lower direction\n   * @returns {Number|undefined}\n   */\n  getBit(nth) {\n    if (nth < 0 || nth >= this.size) {\n      return undefined;\n    }\n    const l2hIdx = this.size - (nth + 1);\n    const currentByte = Math.floor(l2hIdx / 8);\n    const currentBitId = 7 - (l2hIdx % 8);\n    const uint8 = new Uint8Array(this.buffer);\n    return getNBit(uint8[currentByte], currentBitId);\n  }\n\n  /**\n   * @returns {Number} - size in bites\n   */\n  get size() {\n    return this.buffer.byteLength * 8 - this.padding;\n  }\n\n  toString() {\n    return R.pipe(\n      applyAll([\n        R.nth(0),\n        R.pipe(\n          R.nth(1),\n          arrayBufferToUint8Array,\n          toArray,\n          R.map(byteToStrBase2),\n          R.join(''),\n        ),\n      ]),\n      R.apply(R.dropLast),\n    )([this.padding, this.buffer]);\n  }\n\n  /**\n   * @returns {ArrayBuffer} - array buffer of current bitstring\n   */\n  toArrayBuffer() {\n    return this.buffer;\n  }\n}\n","import * as R from 'ramda';\nimport { applyAll, getFirstByte, sliceBuffer } from '../../utils';\nimport BitString from './BitString';\n\nconst getBitPadding = getFirstByte;\n\nexport default R.pipe(\n  applyAll([\n    R.partialRight(sliceBuffer, [1]),\n    getBitPadding,\n  ]),\n  ([buffer, padding]) => new BitString(buffer, padding),\n);\n","import * as R from 'ramda';\n\nexport default R.pipe(\n  R.prop('blockId'),\n  R.equals(3),\n);\n","import _concat from './internal/_concat.js';\nimport _curry2 from './internal/_curry2.js';\n\n/**\n * Returns a new list containing the contents of the given list, followed by\n * the given element.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig a -> [a] -> [a]\n * @param {*} el The element to add to the end of the new list.\n * @param {Array} list The list of elements to add a new item to.\n *        list.\n * @return {Array} A new list containing the elements of the old list followed by `el`.\n * @see R.prepend\n * @example\n *\n *      R.append('tests', ['write', 'more']); //=> ['write', 'more', 'tests']\n *      R.append('tests', []); //=> ['tests']\n *      R.append(['tests'], ['write', 'more']); //=> ['write', 'more', ['tests']]\n */\nvar append = /*#__PURE__*/_curry2(function append(el, list) {\n  return _concat(list, [el]);\n});\nexport default append;","import * as R from 'ramda';\nimport { applyAll, sliceBuffer } from '../../utils';\n\nconst isEmptyBuffer = R.pipe(\n  R.prop('byteLength'),\n  R.equals(0),\n);\n\n/**\n * @param {ArrayBuffer} buffer - buffer of current sequence\n * @param {Function} decode - common decode function\n * @returns {Array<*>} - list of decoded values\n */\nexport default function decodeSequence(buffer, decode) {\n  function decodeBuffer(result, currentBuffer) {\n    return R.cond([\n      [isEmptyBuffer, R.always(result)],\n      [\n        R.T,\n        R.pipe(\n          applyAll([\n            R.partialRight(decode, [true]),\n            R.identity,\n          ]),\n          applyAll([\n            R.pipe( // Append decoded value to result array\n              R.nth(0),\n              R.prop('value'),\n              R.append(R.__, result),\n            ),\n            R.pipe(\n              applyAll([ // Slice decoded value\n                R.nth(1),\n                R.pipe(R.nth(0), R.prop('offset')),\n              ]),\n              R.apply(sliceBuffer),\n            ),\n          ]),\n          R.apply(decodeBuffer),\n        ),\n      ],\n    ])(currentBuffer);\n  }\n\n  return decodeBuffer([], buffer);\n}\n","import * as R from 'ramda';\n\nexport default R.pipe(\n  R.prop('blockId'),\n  R.equals(16),\n);\n","import * as R from 'ramda';\nimport {\n  shiftRightNBit,\n  getNBit,\n  maskNumber,\n  withConstantOffset,\n  getFirstByte,\n  arrayBufferToUint8Array, sliceBuffer, applyAll, addWithOffsetArg,\n} from '../utils';\nimport { decodeInt, isIntHeader } from './integer';\nimport { decodeOID, isOIDHeader } from './OID';\nimport { decodeNull, isNullHeader } from './null';\nimport { decodeBoolean, isBooleanHeader } from './boolean';\nimport { decodeBitStringHeader, isBitStringHeader } from './BitString';\nimport { decodeSequence, isSequenceHeader } from './sequence';\n\nconst UNIVERSAL = 'UNIVERSAL';\nconst APPLICATION = 'APPLICATION';\nconst CONTEXT_SPECIFIC = 'CONTEXT-SPECIFIC';\nconst PRIVATE = 'PRIVATE';\n\n/**\n * Gets block class\n * @param {ArrayBuffer} buffer - asn1 buffer\n * @returns {str} - block class\n */\nexport const getBlockClass = R.pipe(\n  getFirstByte,\n  R.partialRight(shiftRightNBit, [6]),\n  R.cond([\n    [R.equals(0), R.always(UNIVERSAL)],\n    [R.equals(1), R.always(APPLICATION)],\n    [R.equals(2), R.always(CONTEXT_SPECIFIC)],\n    [R.equals(3), R.always(PRIVATE)],\n  ]),\n);\n\n/**\n * Gets is asn1 value block multivalue\n * @param {ArrayBuffer} buffer - asn1 buffer\n * @returns {str}\n */\nexport const isMultiBlock = R.pipe(\n  getFirstByte,\n  R.partialRight(getNBit, [5]),\n  Boolean,\n);\n\n/**\n * @param {ArrayBuffer} - asn1 array buffer\n * @returns {Number}\n */\nexport const getSimpleBlockId = R.pipe(\n  getFirstByte,\n  R.partial(maskNumber, [0b00011111]),\n);\n\n/**\n * Comblex blockId on asn1 encoded as:\n * sequence of bytes. where 8th bit is a flag to get next byte or not.\n * for computing key use other 7 bits\n * @param {ArrayBuffer} buffer\n * @returns {Number}\n */\nexport function getComplexBlockId(buffer) {\n  const uint8Arr = arrayBufferToUint8Array(buffer);\n  function readBlockId(value, offset) {\n    const byte = uint8Arr[offset];\n    const currentValue = value * 127 + maskNumber(byte, 0b01111111);\n    if (maskNumber(byte, 0b10000000)) {\n      return readBlockId(currentValue, offset + 1);\n    }\n    return {\n      value: currentValue,\n      offset: offset + 1,\n    };\n  }\n  return readBlockId(0, 1);\n}\n\n/**\n * @param {ArrayBuffer} - asn1 array buffer\n * @returns {Boolean}\n */\nexport const isComplexBlockId = R.pipe(\n  getSimpleBlockId,\n  R.equals(31),\n);\n\n/**\n * @param {ArrayBuffer} - asn1 array buffer\n * @returns {{ value: Number, offset: Number }}\n */\nexport const getBlockId = R.cond([\n  [\n    isComplexBlockId,\n    getComplexBlockId,\n  ],\n  [\n    R.T,\n    withConstantOffset(getSimpleBlockId, 1),\n  ],\n]);\n\nexport const getBlockIdName = R.cond([\n  [R.equals(1), R.always('boolean')],\n  [R.equals(2), R.always('int')],\n  [R.equals(3), R.always('BitString')],\n  [R.equals(4), R.always('OctetString')],\n  [R.equals(5), R.always('null')],\n  [R.equals(6), R.always('OID')],\n  [R.equals(9), R.always('real')],\n  [R.equals(16), R.always('sequence')],\n  [R.T, R.always('unknown')],\n]);\n\n/**\n * @param {ArrayBuffer} buffer\n * @returns {Boolean}\n */\nconst isSeveralByteLength = R.pipe(\n  getFirstByte,\n  R.partial(maskNumber, [0b10000000]),\n  Boolean,\n);\n\n/**\n * @param {ArrayBuffer} buffer\n * @returns {Number}\n */\nconst getSeveralByteLength = R.pipe(\n  R.of,\n  R.ap([\n    R.identity,\n    R.pipe(getFirstByte, R.partial(maskNumber, [0b01111111])),\n  ]),\n  R.of,\n  R.ap([\n    R.pipe(\n      R.of,\n      R.ap([\n        R.nth(0),\n        R.always(1),\n        R.pipe(R.nth(1), R.add(1)),\n      ]),\n      R.apply(sliceBuffer),\n      arrayBufferToUint8Array,\n      R.reduce(\n        (a, b) => a * 256 + b,\n        0,\n      ),\n    ),\n    R.pipe(R.nth(1), R.add(1)),\n  ]),\n  R.zipObj(['value', 'offset']),\n);\n\n/**\n * Get's length from buffer\n * @param {ArrayBuffer} buffer\n * @return {{ value: Number, offset: Number }}\n */\nexport const getBlockLength = R.cond([\n  [\n    isSeveralByteLength,\n    getSeveralByteLength,\n  ],\n  [\n    R.T,\n    withConstantOffset(getFirstByte, 1),\n  ],\n]);\n\n\n/**\n * Takes block header info and full asn1 array buffer, returns length\n * @param {{ offset: Number, value: * }} header - asn1 header\n * @param {ArrayBuffer} buffer - asn1 buffer\n */\nconst getBlockLengthFromBufferWithHeader = R.pipe(\n  applyAll([\n    R.nth(1),\n    R.pipe(R.nth(0), R.prop('offset')),\n  ]),\n  R.apply(sliceBuffer),\n  getBlockLength,\n);\n\n\n/**\n * @param {{ offset: Number, value: * }} head - asn1 header info\n * @param {{ offset: Number, value: Number }} length - asn1 block length info\n * @returns {Number} - offset of header and length block for asn1 buffer\n */\nconst getHeaderAndLengthBlockOffset = R.unapply(R.pipe(\n  applyAll([\n    R.pipe(R.nth(0), R.prop('offset')),\n    R.pipe(R.nth(1), R.prop('offset')),\n  ]),\n  R.sum,\n));\n\n/**\n * @param {{ offset: Number, value: * }} head - asn1 header info\n * @param {{ offset: Number, value: Number }} length - asn1 block length info\n * @returns {Number} - total length of whole asn1 block\n */\nconst getTotalBlockLength = R.unapply(R.pipe(\n  applyAll([\n    R.pipe(R.nth(0), R.prop('offset')),\n    R.pipe(R.nth(1), R.prop('offset')),\n    R.pipe(R.nth(1), R.prop('value')),\n  ]),\n  R.sum,\n));\n\n/**\n * @param {{ offset: Number, value: * }} head - asn1 header info\n * @param {{ offset: Number, value: Number }} length - asn1 block length info\n * @param {ArrayBuffer} buffer - asn1 buffer\n * @returns {ArrayBuffer} - asn1 encoded value without header and length blocks\n */\nconst cutValueBuffer = R.unapply(R.pipe(\n  applyAll([\n    R.nth(2),\n    R.apply(getHeaderAndLengthBlockOffset),\n    R.apply(getTotalBlockLength),\n  ]),\n  R.apply(sliceBuffer),\n));\n\n/**\n * Reads header of asn1 block.\n *\n * @param {ArrayBuffer} buffer\n *\n * @returns {{\n *   value: {\n *     blockClass: str,\n *     blockId: int,\n *     blockIdName,\n *   },\n *   offset: Number\n * }} - values of block header, and offset of header\n *\n */\nexport function decodeBlockHeader(buffer) {\n  const { offset, value: blockId } = getBlockId(buffer);\n  return {\n    offset,\n    value: {\n      blockId,\n      blockClass: getBlockClass(buffer),\n      blockIdName: getBlockIdName(blockId),\n      multiValue: isMultiBlock(buffer),\n    },\n  };\n}\n\nfunction notifyThatAsn1BufferCannotBeenDecoded(header, buffer) {\n  console.warn('Can`t decode asn1 buffer');\n  console.warn('Header value: ', header);\n  console.warn('Plain buffer value', buffer);\n}\n\n/**\n * Decode asn1 value to js object\n * @param {ArrayBuffer} buffer - asn1 encoded buffer\n * @param {Boolean} withOffset - returns offset of decoded buffer or not\n * @returns {*} - js object that has been encrypted\n */\nexport function decode(buffer, withOffset) {\n  const getValueDecoder = R.cond([\n    [isBooleanHeader, R.always(decodeBoolean)],\n    [isIntHeader, R.always(decodeInt)],\n    [isBitStringHeader, R.always(decodeBitStringHeader)],\n    [isNullHeader, R.always(decodeNull)],\n    [isOIDHeader, R.always(decodeOID)],\n    [isSequenceHeader, R.always(R.partialRight(decodeSequence, [decode]))],\n    [R.T, R.curry(notifyThatAsn1BufferCannotBeenDecoded)],\n  ]);\n\n  const decodeBuffer = addWithOffsetArg(R.pipe(\n    applyAll([\n      decodeBlockHeader,\n      R.identity,\n    ]),\n    applyAll([\n      R.nth(0),\n      getBlockLengthFromBufferWithHeader,\n      R.nth(1),\n    ]),\n    applyAll([ // gets block header, buffer only with current value, and total offset\n      R.pipe(\n        applyAll([\n          R.pipe(R.nth(0), R.prop('value'), getValueDecoder),\n          R.apply(cutValueBuffer),\n        ]),\n        R.apply(R.call),\n      ),\n      R.apply(getTotalBlockLength),\n    ]),\n    R.zipObj(['value', 'offset']),\n  ));\n\n  return decodeBuffer(buffer, withOffset);\n}\n","import * as R from 'ramda';\n\nimport { uint8ToArrayBuffer } from './utils';\nimport { decode as decodeAsn1 } from './asn1';\n\nconst getArrayBufferFromPem = R.pipe(\n  R.replace('-----BEGIN RSA PUBLIC KEY-----', ''),\n  R.replace('-----END RSA PUBLIC KEY-----', ''),\n  R.replace('-----BEGIN PUBLIC KEY-----', ''),\n  R.replace('-----END PUBLIC KEY-----', ''),\n  R.replace('\\r\\n', ''),\n  R.replace('\\n', ''),\n  atob,\n  R.split(''),\n  R.map((x) => x.charCodeAt(0)),\n  uint8ToArrayBuffer,\n);\n\nconst isNeedToDecodeInnerValue = R.pipe(\n  R.pathOr('', [0, 0]),\n  R.equals('1.2.840.113549.1.1.1'),\n);\n\n/**\n * Reads string from pem string, that will be decoded with asn1 algorithm\n * @param {string} pemStr\n * @return {{e: bigint, n: bigint}}\n */\nexport default R.pipe(\n  getArrayBufferFromPem,\n  decodeAsn1,\n  R.cond([\n    [isNeedToDecodeInnerValue, R.pipe(R.nth(1), R.prop('buffer'), decodeAsn1)],\n    [R.T, R.identity],\n  ]),\n  R.zipObj(['n', 'e']),\n);\n","/**\n * Gets a uint32 from string in big-endian order order\n */\nfunction s2i(str, pos) {\n    return (str.charCodeAt(pos) << 24\n        ^ str.charCodeAt(pos + 1) << 16\n        ^ str.charCodeAt(pos + 2) << 8\n        ^ str.charCodeAt(pos + 3));\n}\n/**\n * Returns a uint32 as a string in big-endian order order\n */\nfunction i2s(data) {\n    return (String.fromCharCode((data >> 24) & 0xFF)\n        + String.fromCharCode((data >> 16) & 0xFF)\n        + String.fromCharCode((data >> 8) & 0xFF)\n        + String.fromCharCode(data & 0xFF));\n}\n/**\n * Returns a uint32 as a hex-string in big-endian order order\n */\nfunction i2h(data) {\n    return (\"00000000\" + data.toString(16)).slice(-8);\n}\n\n/**\n * Creates new SHA-1 state\n */\nfunction init(h) {\n    if (!h)\n        h = new Uint32Array(5);\n    // SHA-1 state contains five 32-bit integers\n    h[0] = 0x67452301;\n    h[1] = 0xEFCDAB89;\n    h[2] = 0x98BADCFE;\n    h[3] = 0x10325476;\n    h[4] = 0xC3D2E1F0;\n    return h;\n}\n/** Array to use to store round words. */\nvar words = new Uint32Array(80);\n/**\n * Perform round function\n */\nfunction round(state, data) {\n    var i = 0;\n    var t = 0;\n    var f = 0;\n    // initialize hash value for this chunk\n    var a = state[0];\n    var b = state[1];\n    var c = state[2];\n    var d = state[3];\n    var e = state[4];\n    // round 1\n    for (i = 0; i < 16; i += 1) {\n        words[i] = data[i];\n        f = d ^ (b & (c ^ d));\n        t = ((a << 5) | (a >>> 27)) + f + e + 0x5A827999 + words[i];\n        e = d;\n        d = c;\n        c = ((b << 30) | (b >>> 2)) >>> 0;\n        b = a;\n        a = t;\n    }\n    for (; i < 20; i += 1) {\n        t = (words[i - 3] ^ words[i - 8] ^ words[i - 14] ^ words[i - 16]);\n        t = (t << 1) | (t >>> 31);\n        words[i] = t;\n        f = d ^ (b & (c ^ d));\n        t = ((a << 5) | (a >>> 27)) + f + e + 0x5A827999 + t;\n        e = d;\n        d = c;\n        // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug\n        c = ((b << 30) | (b >>> 2)) >>> 0;\n        b = a;\n        a = t;\n    }\n    // round 2\n    for (; i < 32; i += 1) {\n        t = (words[i - 3] ^ words[i - 8] ^ words[i - 14] ^ words[i - 16]);\n        t = (t << 1) | (t >>> 31);\n        words[i] = t;\n        f = b ^ c ^ d;\n        t = ((a << 5) | (a >>> 27)) + f + e + 0x6ED9EBA1 + t;\n        e = d;\n        d = c;\n        // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug\n        c = ((b << 30) | (b >>> 2)) >>> 0;\n        b = a;\n        a = t;\n    }\n    for (; i < 40; i += 1) {\n        t = (words[i - 6] ^ words[i - 16] ^ words[i - 28] ^ words[i - 32]);\n        t = (t << 2) | (t >>> 30);\n        words[i] = t;\n        f = b ^ c ^ d;\n        t = ((a << 5) | (a >>> 27)) + f + e + 0x6ED9EBA1 + t;\n        e = d;\n        d = c;\n        // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug\n        c = ((b << 30) | (b >>> 2)) >>> 0;\n        b = a;\n        a = t;\n    }\n    // round 3\n    for (; i < 60; i += 1) {\n        t = (words[i - 6] ^ words[i - 16] ^ words[i - 28] ^ words[i - 32]);\n        t = (t << 2) | (t >>> 30);\n        words[i] = t;\n        f = (b & c) | (d & (b ^ c));\n        t = ((a << 5) | (a >>> 27)) + f + e + 0x8F1BBCDC + t;\n        e = d;\n        d = c;\n        // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug\n        c = ((b << 30) | (b >>> 2)) >>> 0;\n        b = a;\n        a = t;\n    }\n    // round 4\n    for (; i < 80; i += 1) {\n        t = (words[i - 6] ^ words[i - 16] ^ words[i - 28] ^ words[i - 32]);\n        t = (t << 2) | (t >>> 30);\n        words[i] = t;\n        f = b ^ c ^ d;\n        t = ((a << 5) | (a >>> 27)) + f + e + 0xCA62C1D6 + t;\n        e = d;\n        d = c;\n        // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug\n        c = ((b << 30) | (b >>> 2)) >>> 0;\n        b = a;\n        a = t;\n    }\n    // update hash state\n    state[0] += a;\n    state[1] += b;\n    state[2] += c;\n    state[3] += d;\n    state[4] += e;\n}\n/**\n * Pre-processing round buffer for string input\n */\nfunction preprocess(str, buf, state, offset) {\n    if (offset === void 0) { offset = 0; }\n    while (str.length >= 64) {\n        for (var i = offset; i < 16; i++)\n            buf[i] = s2i(str, i * 4);\n        str = str.slice(64 - offset * 4);\n        offset = 0;\n        round(state, buf);\n    }\n    return str;\n}\n/**\n * Process input buffer\n */\nfunction process(input, buf, state, offset) {\n    if (offset === void 0) { offset = 0; }\n    while (input.length >= buf.length - offset) {\n        for (var i = 0; i < buf.length - offset; i++)\n            buf[offset + i] = input[i];\n        input = input.subarray(buf.length - offset);\n        offset = 0;\n        round(state, buf);\n    }\n    if (input.length > 0) {\n        for (var i = 0; i < input.length; i++)\n            buf[offset + i] = input[i];\n        offset += input.length;\n    }\n    return offset;\n}\n/**\n * Repeatable part\n */\nfunction finish(len, buf, state, offset) {\n    if (offset === void 0) { offset = 0; }\n    var len64hi = (len / 0x100000000) >>> 0;\n    var len64lo = len >>> 0;\n    for (var i = offset + 1; i < buf.length; i++)\n        buf[i] = 0;\n    if (offset >= 14) {\n        round(state, buf);\n        for (var i = 0; i < buf.length; i++)\n            buf[i] = 0;\n    }\n    buf[14] = (len64hi << 3) + ((len64lo << 3) / 0x100000000 >>> 0);\n    buf[15] = len64lo << 3;\n    round(state, buf);\n}\n/**\n * Adds padding to message\n */\nfunction finalizestr(chunk, len, buf, state, offset) {\n    if (offset === void 0) { offset = 0; }\n    for (; chunk.length >= 4; offset++) {\n        buf[offset] = s2i(chunk, 0);\n        chunk = chunk.slice(4);\n    }\n    if (offset >= 16) {\n        round(state, buf);\n        offset = 0;\n    }\n    buf[offset] = s2i(chunk + \"\\u0080\\0\\0\\0\", 0);\n    finish(len, buf, state, offset);\n}\n/**\n * Adds padding to buffer\n */\nfunction finalize(len, buf, state, offset) {\n    if (offset === void 0) { offset = 0; }\n    buf[offset] = 0x80000000;\n    finish(len, buf, state, offset);\n}\nfunction out(state, format) {\n    if (format === void 0) { format = 'array'; }\n    switch (format) {\n        case 'hex': return (i2h(state[0])\n            + i2h(state[1])\n            + i2h(state[2])\n            + i2h(state[3])\n            + i2h(state[4]));\n        case 'binary': return (i2s(state[0])\n            + i2s(state[1])\n            + i2s(state[2])\n            + i2s(state[3])\n            + i2s(state[4]));\n        default: return state;\n    }\n}\n/**\n * Stream handler for hashing\n */\nvar Stream = /** @class */ (function () {\n    function Stream(buf) {\n        this.buffer = new Uint32Array(16);\n        this.state = init(buf);\n        this.length = 0;\n        this.offset = 0;\n        this.tail = '';\n    }\n    Stream.prototype.update = function (chunk) {\n        if (typeof chunk === 'string') {\n            this.length += chunk.length;\n            this.tail = preprocess(this.tail + chunk, this.buffer, this.state, this.offset);\n            this.offset = 0;\n        }\n        else {\n            if (this.tail.length > 0)\n                throw new Error('Unable to update hash-stream with array');\n            this.length += chunk.length * 4;\n            this.offset = process(chunk, this.buffer, this.state, this.offset);\n        }\n        return this;\n    };\n    Stream.prototype.digest = function (format) {\n        if (format === void 0) { format = 'array'; }\n        if (this.tail.length > 0) {\n            finalizestr(this.tail, this.length, this.buffer, this.state, this.offset);\n        }\n        else {\n            finalize(this.length, this.buffer, this.state, this.offset);\n        }\n        return out(this.state, format);\n    };\n    Stream.prototype.clear = function () {\n        this.state = init();\n        this.length = 0;\n        this.offset = 0;\n        this.tail = '';\n    };\n    return Stream;\n}());\nfunction sha1(message, format) {\n    if (format === void 0) { format = 'array'; }\n    var buf = new Uint32Array(16);\n    var state = init();\n    if (typeof message === 'string')\n        finalizestr(preprocess(message, buf, state), message.length, buf, state);\n    else\n        finalize(message.length * 4, buf, state, process(message, buf, state));\n    return out(state, format);\n}\n/**\n * Hash with stream constructor\n */\nsha1.stream = function (buf) { return new Stream(buf); };\nsha1.blockLength = 64;\nsha1.digestLength = 20;\n\nexport default sha1;\n","/**\n * Gets a uint32 from string in big-endian order order\n */\nfunction s2i(str, pos) {\n    return (str.charCodeAt(pos) << 24\n        ^ str.charCodeAt(pos + 1) << 16\n        ^ str.charCodeAt(pos + 2) << 8\n        ^ str.charCodeAt(pos + 3));\n}\n/**\n * Returns a uint32 as a string in big-endian order order\n */\nfunction i2s(data) {\n    return (String.fromCharCode((data >> 24) & 0xFF)\n        + String.fromCharCode((data >> 16) & 0xFF)\n        + String.fromCharCode((data >> 8) & 0xFF)\n        + String.fromCharCode(data & 0xFF));\n}\n/**\n * Returns a uint32 as a hex-string in big-endian order order\n */\nfunction i2h(data) {\n    return (\"00000000\" + data.toString(16)).slice(-8);\n}\n\n/**\n * Creates new SHA-256 state\n */\nfunction init(h) {\n    if (!h)\n        h = new Uint32Array(8);\n    // SHA-256 state contains eight 32-bit integers\n    h[0] = 0x6A09E667;\n    h[1] = 0xBB67AE85;\n    h[2] = 0x3C6EF372;\n    h[3] = 0xA54FF53A;\n    h[4] = 0x510E527F;\n    h[5] = 0x9B05688C;\n    h[6] = 0x1F83D9AB;\n    h[7] = 0x5BE0CD19;\n    return h;\n}\n/** Array to use to store round words. */\nvar words = new Uint32Array(64);\n/** K table for SHA-256 */\nvar _k = new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,\n    0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,\n    0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n    0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,\n    0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,\n    0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,\n    0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,\n    0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2,\n]);\n/**\n * Perform round function\n */\nfunction round(state, data) {\n    // initialize hash value for this chunk\n    var a = state[0];\n    var b = state[1];\n    var c = state[2];\n    var d = state[3];\n    var e = state[4];\n    var f = state[5];\n    var g = state[6];\n    var h = state[7];\n    words.set(data);\n    for (var i = 16; i < 64; i += 1) {\n        // XOR word 2 words ago rot right 17, rot right 19, shft right 10\n        var t1 = words[i - 2];\n        t1 = ((t1 >>> 17) | (t1 << 15))\n            ^ ((t1 >>> 19) | (t1 << 13))\n            ^ (t1 >>> 10);\n        // XOR word 15 words ago rot right 7, rot right 18, shft right 3\n        var t2 = words[i - 15];\n        t2 = ((t2 >>> 7) | (t2 << 25))\n            ^ ((t2 >>> 18) | (t2 << 14))\n            ^ (t2 >>> 3);\n        // sum(t1, word 7 ago, t2, word 16 ago) modulo 2^32\n        words[i] = (t1 + words[i - 7] + t2 + words[i - 16]);\n    }\n    // Round Function\n    for (var i = 0; i < 64; i += 1) {\n        // Sum1(e)\n        var s1 = ((e >>> 6) | (e << 26))\n            ^ ((e >>> 11) | (e << 21))\n            ^ ((e >>> 25) | (e << 7));\n        // Ch(e, f, g) (optimized the same way as SHA-1)\n        var ch = g ^ (e & (f ^ g));\n        // Sum0(a)\n        var s0 = ((a >>> 2) | (a << 30))\n            ^ ((a >>> 13) | (a << 19))\n            ^ ((a >>> 22) | (a << 10));\n        // Maj(a, b, c) (optimized the same way as SHA-1)\n        var maj = (a & b) | (c & (a ^ b));\n        // main algorithm\n        var t1 = h + s1 + ch + _k[i] + words[i];\n        var t2 = s0 + maj;\n        h = g;\n        g = f;\n        f = e;\n        e = (d + t1) | 0;\n        d = c;\n        c = b;\n        b = a;\n        a = (t1 + t2) | 0;\n    }\n    // update hash state\n    state[0] += a;\n    state[1] += b;\n    state[2] += c;\n    state[3] += d;\n    state[4] += e;\n    state[5] += f;\n    state[6] += g;\n    state[7] += h;\n}\n/**\n * Pre-processing round buffer for string input\n */\nfunction preprocess(str, buf, state, offset) {\n    if (offset === void 0) { offset = 0; }\n    while (str.length >= 64) {\n        for (var i = offset; i < 16; i++)\n            buf[i] = s2i(str, i * 4);\n        str = str.slice(64 - offset * 4);\n        offset = 0;\n        round(state, buf);\n    }\n    return str;\n}\n/**\n * Process input buffer\n */\nfunction process(input, buf, state, offset) {\n    if (offset === void 0) { offset = 0; }\n    while (input.length >= buf.length - offset) {\n        buf.set(input.subarray(0, buf.length - offset), offset);\n        input = input.subarray(buf.length - offset);\n        offset = 0;\n        round(state, buf);\n    }\n    if (input.length > 0) {\n        buf.set(input, offset);\n        offset += input.length;\n    }\n    return offset;\n}\n/**\n * Repeatable part\n */\nfunction finish(len, buf, state, offset) {\n    if (offset === void 0) { offset = 0; }\n    var len64hi = (len / 0x100000000) >>> 0;\n    var len64lo = len >>> 0;\n    for (var i = offset + 1; i < buf.length; i++)\n        buf[i] = 0;\n    if (offset >= 14) {\n        round(state, buf);\n        for (var i = 0; i < buf.length; i++)\n            buf[i] = 0;\n    }\n    buf[14] = (len64hi << 3) | (len64hi >>> 28);\n    buf[15] = len64lo << 3;\n    round(state, buf);\n}\n/**\n * Adds padding to message\n */\nfunction finalizestr(chunk, len, buf, state, offset) {\n    if (offset === void 0) { offset = 0; }\n    for (; chunk.length >= 4; offset++) {\n        buf[offset] = s2i(chunk, 0);\n        chunk = chunk.slice(4);\n    }\n    if (offset >= 16) {\n        round(state, buf);\n        offset = 0;\n    }\n    buf[offset] = s2i(chunk + \"\\u0080\\0\\0\\0\", 0);\n    finish(len, buf, state, offset);\n}\n/**\n * Adds padding to buffer\n */\nfunction finalize(len, buf, state, offset) {\n    if (offset === void 0) { offset = 0; }\n    buf[offset] = 0x80000000;\n    finish(len, buf, state, offset);\n}\nfunction out(state, format) {\n    if (format === void 0) { format = 'array'; }\n    switch (format) {\n        case 'hex': return (i2h(state[0])\n            + i2h(state[1])\n            + i2h(state[2])\n            + i2h(state[3])\n            + i2h(state[4])\n            + i2h(state[5])\n            + i2h(state[6])\n            + i2h(state[7]));\n        case 'binary': return (i2s(state[0])\n            + i2s(state[1])\n            + i2s(state[2])\n            + i2s(state[3])\n            + i2s(state[4])\n            + i2s(state[5])\n            + i2s(state[6])\n            + i2s(state[7]));\n        default: return state;\n    }\n}\n/**\n * Stream handler for hashing\n */\nvar Stream = /** @class */ (function () {\n    function Stream(buf) {\n        this.buffer = new Uint32Array(16);\n        this.state = init(buf);\n        this.length = 0;\n        this.offset = 0;\n        this.tail = '';\n    }\n    Stream.prototype.update = function (chunk) {\n        if (typeof chunk === 'string') {\n            this.length += chunk.length;\n            this.tail = preprocess(this.tail + chunk, this.buffer, this.state, this.offset);\n            this.offset = 0;\n        }\n        else {\n            if (this.tail.length > 0)\n                throw new Error('Unable to update hash-stream with array');\n            this.length += chunk.length * 4;\n            this.offset = process(chunk, this.buffer, this.state, this.offset);\n        }\n        return this;\n    };\n    Stream.prototype.digest = function (format) {\n        if (format === void 0) { format = 'array'; }\n        if (this.tail.length > 0) {\n            finalizestr(this.tail, this.length, this.buffer, this.state, this.offset);\n        }\n        else {\n            finalize(this.length, this.buffer, this.state, this.offset);\n        }\n        return out(this.state, format);\n    };\n    Stream.prototype.clear = function () {\n        this.state = init();\n        this.length = 0;\n        this.offset = 0;\n        this.tail = '';\n    };\n    return Stream;\n}());\nfunction sha256(message, format) {\n    if (format === void 0) { format = 'array'; }\n    var buf = new Uint32Array(16);\n    var state = init();\n    if (typeof message === 'string')\n        finalizestr(preprocess(message, buf, state), message.length, buf, state);\n    else\n        finalize(message.length * 4, buf, state, process(message, buf, state));\n    return out(state, format);\n}\n/**\n * Hash with stream constructor\n */\nsha256.stream = function (buf) { return new Stream(buf); };\nsha256.blockLength = 64;\nsha256.digestLength = 32;\n\nexport default sha256;\n","import * as R from 'ramda';\nimport sha1_ from '@cryptography/sha1';\nimport sha256_ from '@cryptography/sha256';\n\nimport {\n  arrayBufferToUint8Array,\n  hexToArrayBuffer,\n} from './utils';\n\nconst prepareData = R.pipe(\n  R.cond([\n    [R.is(ArrayBuffer), arrayBufferToUint8Array],\n    [R.is(Uint8Array), R.identity],\n  ]),\n  (x) => Array.from(x),\n  R.map((buf) => String.fromCharCode(buf)),\n  R.join(''),\n);\n\n/**\n * Returns\n * @param {ArrayBuffer|forge.util.ByteBuffer} data\n * @returns {ArrayBuffer}\n */\nexport const sha1 = R.pipe(\n  prepareData,\n  R.partialRight(sha1_, ['hex']),\n  hexToArrayBuffer,\n);\n\n/**\n * Returns\n * @param {ArrayBuffer|forge.util.ByteBuffer} data\n * @returns {ArrayBuffer}\n */\nexport const sha256 = R.pipe(\n  prepareData,\n  R.partialRight(sha256_, ['hex']),\n  hexToArrayBuffer,\n);\n","import * as R from 'ramda';\n\nimport {\n  applyAll,\n  arrayBufferToUint8Array,\n  bigIntToUint8Array,\n  toArray, uint8ArrayToHex,\n  uint8ToArrayBuffer,\n} from './utils';\nimport { toTlString } from './tl/tlSerialization';\nimport readPublicKey from './readPublicKey';\nimport { sha1 } from './sha';\n\nconst pems = [`\n-----BEGIN RSA PUBLIC KEY-----\nMIIBCgKCAQEAwVACPi9w23mF3tBkdZz+zwrzKOaaQdr01vAbU4E1pvkfj4sqDsm6\nlyDONS789sVoD/xCS9Y0hkkC3gtL1tSfTlgCMOOul9lcixlEKzwKENj1Yz/s7daS\nan9tqw3bfUV/nqgbhGX81v/+7RFAEd+RwFnK7a+XYl9sluzHRyVVaTTveB2GazTw\nEfzk2DWgkBluml8OREmvfraX3bkHZJTKX4EQSjBbbdJ2ZXIsRrYOXfaA+xayEGB+\n8hdlLmAjbCVfaigxX0CDqWeR1yFL9kwd9P0NsZRPsmoqVwMbMu7mStFai6aIhc3n\nSlv8kg9qv1m6XHVQY3PnEw+QQtqSIXklHwIDAQAB\n-----END RSA PUBLIC KEY-----\n`, `\n-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAruw2yP/BCcsJliRoW5eB\nVBVle9dtjJw+OYED160Wybum9SXtBBLXriwt4rROd9csv0t0OHCaTmRqBcQ0J8fx\nhN6/cpR1GWgOZRUAiQxoMnlt0R93LCX/j1dnVa/gVbCjdSxpbrfY2g2L4frzjJvd\nl84Kd9ORYjDEAyFnEA7dD556OptgLQQ2e2iVNq8NZLYTzLp5YpOdO1doK+ttrltg\ngTCy5SrKeLoCPPbOgGsdxJxyz5KKcZnSLj16yE5HvJQn0CNpRdENvRUXe6tBP78O\n39oJ8BTHp9oIjd6XWXAsp2CvK45Ol8wFXGF710w9lwCGNbmNxNYhtIkdqfsEcwR5\nJwIDAQAB\n-----END PUBLIC KEY-----\n`, `\n-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvfLHfYH2r9R70w8prHbl\nWt/nDkh+XkgpflqQVcnAfSuTtO05lNPspQmL8Y2XjVT4t8cT6xAkdgfmmvnvRPOO\nKPi0OfJXoRVylFzAQG/j83u5K3kRLbae7fLccVhKZhY46lvsueI1hQdLgNV9n1cQ\n3TDS2pQOCtovG4eDl9wacrXOJTG2990VjgnIKNA0UMoP+KF03qzryqIt3oTvZq03\nDyWdGK+AZjgBLaDKSnC6qD2cFY81UryRWOab8zKkWAnhw2kFpcqhI0jdV5QaSCEx\nvnsjVaX0Y1N0870931/5Jb9ICe4nweZ9kSDF/gip3kWLG0o8XQpChDfyvsqB9OLV\n/wIDAQAB\n-----END PUBLIC KEY-----\n`, `\n-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAs/ditzm+mPND6xkhzwFI\nz6J/968CtkcSE/7Z2qAJiXbmZ3UDJPGrzqTDHkO30R8VeRM/Kz2f4nR05GIFiITl\n4bEjvpy7xqRDspJcCFIOcyXm8abVDhF+th6knSU0yLtNKuQVP6voMrnt9MV1X92L\nGZQLgdHZbPQz0Z5qIpaKhdyA8DEvWWvSUwwc+yi1/gGaybwlzZwqXYoPOhwMebzK\nUk0xW14htcJrRrq+PXXQbRzTMynseCoPIoke0dtCodbA3qQxQovE16q9zz4Otv2k\n4j63cz53J+mhkVWAeWxVGI0lltJmWtEYK6er8VqqWot3nqmWMXogrgRLggv/Nbbo\noQIDAQAB\n-----END PUBLIC KEY-----\n`, `\n-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvmpxVY7ld/8DAjz6F6q0\n5shjg8/4p6047bn6/m8yPy1RBsvIyvuDuGnP/RzPEhzXQ9UJ5Ynmh2XJZgHoE9xb\nnfxL5BXHplJhMtADXKM9bWB11PU1Eioc3+AXBB8QiNFBn2XI5UkO5hPhbb9mJpjA\n9Uhw8EdfqJP8QetVsI/xrCEbwEXe0xvifRLJbY08/Gp66KpQvy7g8w7VB8wlgePe\nxW3pT13Ap6vuC+mQuJPyiHvSxjEKHgqePji9NP3tJUFQjcECqcm0yV7/2d0t/pbC\nm+ZH1sadZspQCEPPrtbkQBlvHb4OLiIWPGHKSMeRFvp3IWcmdJqXahxLCUS1Eh6M\nAQIDAQAB\n-----END PUBLIC KEY-----\n`];\n\n\nconst bigIntToTLString = R.pipe(\n  bigIntToUint8Array,\n  toTlString,\n);\n\n/**\n * @param {{n: BigInt, e: BigInt}} - rsa public key,\n * @returns {string} - hex representation of fingerprint\n */\nconst buildFingerPrint = R.pipe(\n  applyAll([\n    R.pipe(R.prop('n'), bigIntToTLString),\n    R.pipe(R.prop('e'), bigIntToTLString),\n  ]),\n  R.flatten,\n  uint8ToArrayBuffer,\n  sha1,\n  arrayBufferToUint8Array,\n  toArray,\n  R.reverse,\n  R.take(8),\n  uint8ArrayToHex,\n);\n\nconst publicKeyMap = R.pipe(\n  R.map(\n    R.pipe(\n      readPublicKey,\n      applyAll([\n        buildFingerPrint,\n        R.identity,\n      ]),\n    ),\n  ),\n  R.fromPairs,\n)(pems);\n\n/**\n * Gets finger print and return publicKey that should be used;\n * @param {BigInt} fingerprint\n * @returns - publicKey object;\n */\nexport const getPublicKey = R.pipe(\n  (x) => x.toString(16),\n  R.prop(R.__, publicKeyMap),\n);\n\nexport default pems;\n","/* eslint no-bitwise: 0 */\nimport aesjs from 'aes-js';\nimport * as R from 'ramda';\n\nimport {\n  arrayBufferToUint8Array,\n  copyBytes,\n  mergeAllArrayBuffers,\n  sliceBuffer,\n  uint8ToArrayBuffer,\n} from './utils';\nimport { sha1 } from './sha';\n\n/**\n * Takes uint8 nonce arrays and rturns sha1 of them\n * @param {Uint8Array|Number[]} aNonce\n * @param {Uint8Array|Number[]} bNonce\n * @returns {Uint8Array}\n */\nconst hashFromNonces = R.unapply(R.pipe(\n  R.map(uint8ToArrayBuffer),\n  mergeAllArrayBuffers,\n  sha1,\n  arrayBufferToUint8Array,\n));\n\n/**\n * Generates key, iv values for AES encryption\n *\n * answer_with_hash := SHA1(answer) + answer + (0-15 random bytes); such that the length\n * be divisible by 16;\n * tmp_aes_key := SHA1(new_nonce + server_nonce) + substr (SHA1(server_nonce + new_nonce), 0, 12);\n * tmp_aes_iv := substr (SHA1(server_nonce + new_nonce), 12, 8) + SHA1(new_nonce + new_nonce) +\n * substr (new_nonce, 0, 4);\n *\n * @param {Uint8Array|Number[]} serverNonce\n * @param {Uint8Array|Number[]} newNonce\n * @returns {{iv: Uint8Array, key: Uint8Array}} - byte strings of data\n */\nexport function generateKeyDataFromNonce(serverNonce, newNonce) {\n  const newNonceServerNonceHash = uint8ToArrayBuffer(hashFromNonces(newNonce, serverNonce));\n  const serverNonceNewNonceHash = uint8ToArrayBuffer(hashFromNonces(serverNonce, newNonce));\n  const newNonceNewNonceHash = uint8ToArrayBuffer(hashFromNonces(newNonce, newNonce));\n\n  const key = mergeAllArrayBuffers([\n    newNonceServerNonceHash,\n    sliceBuffer(serverNonceNewNonceHash, 0, 12),\n  ]);\n\n  const iv = mergeAllArrayBuffers([\n    sliceBuffer(serverNonceNewNonceHash, 12),\n    newNonceNewNonceHash,\n    sliceBuffer(uint8ToArrayBuffer(newNonce), 0, 4),\n  ]);\n\n  return { key: arrayBufferToUint8Array(key), iv: arrayBufferToUint8Array(iv) };\n}\n\n\n/**\n * Decryptes data with ige mode. Please check:\n * https://github.com/LonamiWebs/Telethon/blob/6817e199234b68688c5ae1a128353df34f15ba18/telethon/crypto/aes.py#L35\n * @param {ArrayBuffer} encodedMessage - encodedMessage that should encoded\n * @param {ArrayBuffer} key - AES-key\n * @param {ArrayBuffer} iv - AES initialization value\n */\nexport function decryptIge(encodedMessage, key, iv) {\n  const cipherTextBuffer = encodedMessage;\n\n  const keyBlock = arrayBufferToUint8Array(key);\n\n  const iv1 = new Uint8Array(iv, 0, iv.byteLength / 2);\n  const iv2 = new Uint8Array(iv, iv.byteLength / 2);\n  /* eslint-disable-next-line */\n  const aesECB = new aesjs.ModeOfOperation.ecb(keyBlock);\n\n  const blocksCount = cipherTextBuffer.byteLength / 16;\n  const plainTextBuffer = new ArrayBuffer(cipherTextBuffer.byteLength);\n\n  const cipherTextBlockBuffer = new ArrayBuffer(16);\n  const cipherTextBlock = new Uint8Array(cipherTextBlockBuffer);\n\n  for (let blockIdx = 0; blockIdx < blocksCount; blockIdx += 1) {\n    const cipherText = new Uint8Array(cipherTextBuffer, blockIdx * 16, 16);\n    for (let i = 0; i < 16; i += 1) {\n      cipherTextBlock[i] = cipherText[i] ^ iv2[i];\n    }\n\n    const plainTextBlockBuffer = new ArrayBuffer(16);\n    const bytes = aesECB.decrypt(cipherTextBlock);\n    const plainTextBlock = new Uint8Array(plainTextBlockBuffer);\n    copyBytes(bytes, plainTextBlock);\n\n    for (let i = 0; i < 16; i += 1) {\n      plainTextBlock[i] ^= iv1[i];\n    }\n\n    copyBytes(cipherText, iv1);\n    copyBytes(plainTextBlock, iv2);\n\n    const plainText = new Uint8Array(plainTextBuffer, blockIdx * 16, 16);\n    copyBytes(plainTextBlock, plainText);\n  }\n\n  return plainTextBuffer;\n}\n\n\n/**\n * Encrypts by AES-IGE algorithm\n * @param {ArrayBuffer} message\n * @param {ArrayBuffer} key\n * @param {ArrayBuffer} iv\n */\nexport function encryptIge(message, key, iv) {\n  const plainTextBuffer = message;\n\n  const keyBlock = new Uint8Array(key);\n\n  const iv1 = new Uint8Array(iv, 0, iv.byteLength / 2);\n  const iv2 = new Uint8Array(iv, iv.byteLength / 2);\n\n  /* eslint-disable-next-line */\n  const aesECB = new aesjs.ModeOfOperation.ecb(keyBlock);\n\n  const blocksCount = plainTextBuffer.byteLength / 16;\n  const encryptedBuffer = new ArrayBuffer(plainTextBuffer.byteLength);\n\n  const cipherTextBlockBuffer = new ArrayBuffer(16);\n  const cipherTextBlock = new Uint8Array(cipherTextBlockBuffer);\n\n  for (let blockIdx = 0; blockIdx < blocksCount; blockIdx += 1) {\n    const plainTextBlock = new Uint8Array(plainTextBuffer, blockIdx * 16, 16);\n    for (let i = 0; i < 16; i += 1) {\n      cipherTextBlock[i] = plainTextBlock[i] ^ iv1[i];\n    }\n\n    const aesEncryptedBuffer = new ArrayBuffer(16);\n    const bytes = aesECB.encrypt(cipherTextBlock);\n    const encryptedTextBlock = new Uint8Array(aesEncryptedBuffer);\n    copyBytes(bytes, encryptedTextBlock);\n\n    for (let i = 0; i < 16; i += 1) {\n      encryptedTextBlock[i] ^= iv2[i];\n    }\n\n    copyBytes(encryptedTextBlock, iv1);\n    copyBytes(plainTextBlock, iv2);\n\n    const encryptedText = new Uint8Array(encryptedBuffer, blockIdx * 16, 16);\n    copyBytes(encryptedTextBlock, encryptedText);\n  }\n\n  return encryptedBuffer;\n}\n\n\n/**\n * Build AES-CTR cipher\n * @param {ArrayBuffer} key\n * @param {ArrayBuffer} iv\n */\nexport function getCipher(key, iv) {\n  const keyView = new Uint8Array(key);\n  const ivView = new Uint8Array(iv);\n\n  /* eslint-disable new-cap */\n  return new aesjs.ModeOfOperation.ctr(keyView, new aesjs.Counter(ivView));\n  /* eslint-enable */\n}\n","import * as R from 'ramda';\nimport {\n  applyAll,\n  arrayBufferToUint8Array,\n  bigIntToUint8Array,\n  powModulo, uint8ToArrayBuffer,\n  uint8ToBigInt,\n} from './utils';\n/**\n *\n * @param {ArrayBuffer} origin - message as array buffer that should be encoded\n * @param {{ n: BigInt, e: BigInt }} pubKey - public keys that applied for encoding\n * @returns {ArrayBuffer} - encoded result\n */\nexport default R.unapply(R.pipe(\n  applyAll([\n    R.pipe(R.nth(0), arrayBufferToUint8Array, uint8ToBigInt),\n    R.pipe(R.nth(1), R.prop('e')),\n    R.pipe(R.nth(1), R.prop('n')),\n  ]),\n  R.apply(powModulo),\n  bigIntToUint8Array,\n  uint8ToArrayBuffer,\n));\n","import * as R from 'ramda';\n\nimport {\n  TYPE_KEY,\n  RES_PQ_TYPE,\n  METHOD_KEY,\n  REQ_PQ_METHOD,\n  PQ_INNER_DATA_TYPE,\n  CONSTRUCTOR_KEY,\n  PQ_INNER_DATA_CONSTRUCTOR,\n  SERVER_DH_PARAMS_TYPE,\n  REQ_DH_PARAMS_METHOD,\n  CLIENT_DH_INNER_DATA_TYPE,\n  CLIENT_DH_INNER_DATA_CONSTRUCTOR,\n  SET_CLIENT_DH_PARAMS_ANSWER_TYPE,\n  SET_CLIENT_DH_PARAMS_METHOD,\n  DH_GEN_FAIL_CONSTRUCTOR,\n  DH_GEN_RETRY_CONSTRUCTOR,\n  DH_GEN_OK_CONSTRUCTOR, SERVER_DH_PARAMS_FAIL_CONSTRUCTOR,\n} from './constants';\nimport {\n  bigIntToUint8Array,\n  findPrimeFactors,\n  uint8ToBigInt,\n  copyBytes,\n  getNRandomBytes,\n  powModulo,\n  uint8ToArrayBuffer,\n  uint8ArrayToHex,\n  arrayBufferToUint8Array,\n  mergeAllArrayBuffers,\n  sliceBuffer,\n  arrayBufferToHex,\n} from './utils';\nimport { getPublicKey } from './pems';\nimport {\n  decryptIge as decryptAesIge,\n  encryptIge as encryptAesIge,\n  generateKeyDataFromNonce,\n} from './aes';\nimport { sha1 } from './sha';\nimport rsaEncrypt from './rsa';\nimport { dumpPQInnerData } from './tl/p_q_inner_data';\nimport { isMessageOf } from './tl/utils';\nimport { loadServerDHInnerData } from './tl/server_DH_inner_data';\nimport { dumpClientDHInnerData } from './tl/client_DH_inner_data';\n\nfunction getRandomNonce(bytes = 16) {\n  return uint8ToBigInt(getNRandomBytes(bytes));\n}\n\n/**\n * Generates message for p q authorization\n * @returns {Object}\n */\nexport function getInitialDHExchangeMessage() {\n  return {\n    [TYPE_KEY]: RES_PQ_TYPE,\n    [METHOD_KEY]: REQ_PQ_METHOD,\n    nonce: getRandomNonce(),\n  };\n}\n\n/* eslint-disable */\n/**\n * Parse response PQ from schema:\n * resPQ#05162463 nonce:int128 server_nonce:int128 pq:string server_public_key_fingerprints:Vector long = ResPQ;\n * @param {ArrayBuffer} resPQ - buffer with server pq response\n * @returns {Object} - resPQ with with response\n */\n/* eslint-enable */\nexport function parseResponsePQ(resPQ) {\n  const constructor = new Uint32Array(resPQ, 0, 1);\n  const nonce = new Uint8Array(resPQ, 4, 16);\n  const serverNonce = new Uint8Array(resPQ, 20, 16);\n  const pq = new Uint8Array(resPQ, 37, 8);\n  const vectorLong = new Uint8Array(resPQ, 48, 4);\n  const count = new Uint32Array(resPQ, 52, 1);\n  const fingerprint = new Uint8Array(resPQ, 56, 8);\n  const fingerprintBuffer = resPQ.slice(56, 64);\n\n  return {\n    constructor,\n    nonce,\n    server_nonce: serverNonce,\n    pq,\n    vector_long: vectorLong,\n    count,\n    fingerprint,\n    fingerprint_buffer: fingerprintBuffer,\n    buffer: resPQ,\n  };\n}\n\n/**\n * Checks that nonce of init message and response are equal\n * @param {Object} aMessage\n * @param {Object} bMessage\n * @param {string} nonceField - nonce field name\n */\nexport function areNonceEqual(aMessage, bMessage, nonceField) {\n  if (!nonceField) {\n    nonceField = 'nonce';\n  }\n\n  const aNonce = R.prop(nonceField, aMessage);\n  const bNonce = R.prop(nonceField, bMessage);\n  for (let i = 0; i < aNonce.length; i += 1) {\n    if (aNonce[i] !== bNonce[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function buildPQInnerData(responsePQ) {\n  const pqValue = uint8ToBigInt(responsePQ.pq);\n  const [pValue, qValue] = findPrimeFactors(pqValue);\n  const p = bigIntToUint8Array(pValue);\n  const q = bigIntToUint8Array(qValue);\n\n  const newNonce = getRandomNonce(32);\n\n  const data = {\n    [TYPE_KEY]: PQ_INNER_DATA_TYPE,\n    [CONSTRUCTOR_KEY]: PQ_INNER_DATA_CONSTRUCTOR,\n    p,\n    q,\n    pq: responsePQ.pq,\n    nonce: responsePQ.nonce,\n    server_nonce: responsePQ.server_nonce,\n    new_nonce: newNonce,\n  };\n\n  return data;\n}\n\nexport function encryptPQInner(responsePQ, pqInnerData) {\n  const pqInnerBuffer = dumpPQInnerData(pqInnerData);\n  const hash = sha1(pqInnerBuffer);\n  const randomBytesCount = 255 - (hash.byteLength + pqInnerBuffer.byteLength);\n  const randomBytes = R.pipe(\n    R.curry(getNRandomBytes),\n    uint8ToArrayBuffer,\n  )(randomBytesCount);\n\n  const fingerprint = responsePQ.fingerprints[0];\n  const pubKey = getPublicKey(fingerprint);\n\n  const originBuffer = mergeAllArrayBuffers([hash, pqInnerBuffer, randomBytes]);\n  const encryptedBuffer = rsaEncrypt(originBuffer, pubKey);\n  return arrayBufferToUint8Array(encryptedBuffer);\n}\n\n\n/**\n *\n * @param {Object} responsePQ - object with response pq data\n * @param {Object} innerPQ - object with inner pq data\n * @param {Uint8Array} encryptedInnerPQ- object with encrypted inner pq data\n */\nexport function buildDHExchangeMessage(responsePQ, innerPQ, encryptedInnerPQ) {\n  return {\n    [TYPE_KEY]: SERVER_DH_PARAMS_TYPE,\n    [METHOD_KEY]: REQ_DH_PARAMS_METHOD,\n    nonce: responsePQ.nonce,\n    server_nonce: responsePQ.server_nonce,\n    p: innerPQ.p,\n    q: innerPQ.q,\n    fingerprint: responsePQ.fingerprints[0],\n    encrypted_data: encryptedInnerPQ,\n  };\n}\n\n/**\n * Decryptes inner data of dh params and build object for them\n * @param encryptedDHParams\n * @param pqInnerData\n * @returns {{}}\n */\nexport function decryptDHParams(encryptedDHParams, pqInnerData) {\n  const { key, iv } = generateKeyDataFromNonce(\n    bigIntToUint8Array(encryptedDHParams.server_nonce, true),\n    bigIntToUint8Array(pqInnerData.new_nonce, true),\n  );\n\n  const answerBuffer = decryptAesIge(\n    uint8ToArrayBuffer(encryptedDHParams.encrypted_answer),\n    uint8ToArrayBuffer(key),\n    uint8ToArrayBuffer(iv),\n  );\n  const answerWithoutHash = sliceBuffer(answerBuffer, 20);\n\n  return {\n    key,\n    iv,\n    ...loadServerDHInnerData(answerWithoutHash),\n  };\n}\n\n/**\n * Takes decrypted dhParams and builds gab, ga values\n * @param dhParams\n */\nexport function dhComputation(dhParams) {\n  const b = uint8ToBigInt(getNRandomBytes(256));\n\n  const ga = uint8ToBigInt(dhParams.g_a);\n  const g = BigInt(dhParams.g);\n  const dhPrime = uint8ToBigInt(dhParams.dh_prime);\n\n  const gb = powModulo(g, b, dhPrime);\n  const gab = powModulo(ga, b, dhPrime);\n\n  return {\n    b, g, ga, gb, gab,\n  };\n}\n\n/**\n * Builds inner message for client DH data\n * @param {Object} encryptedDHParams - encrypted values of server dh\n * @param {Object} dhValues - computed dhValues\n * @returns {ArrayBuffer}\n */\nexport function buildDHInnerMessage(encryptedDHParams, dhValues) {\n  return {\n    [TYPE_KEY]: CLIENT_DH_INNER_DATA_TYPE,\n    [CONSTRUCTOR_KEY]: CLIENT_DH_INNER_DATA_CONSTRUCTOR,\n    nonce: encryptedDHParams.nonce,\n    server_nonce: encryptedDHParams.server_nonce,\n    retry_id: BigInt('0'),\n    g_b: bigIntToUint8Array(dhValues.gb),\n  };\n}\n\n/**\n * Encrypts messsage with key and iv values\n * @param {Object} dhInnerMessage\n * @param {forge.util.ByteBuffer} key\n * @param {forge.util.ByteBuffer} iv\n * @returns {ArrayBuffer}\n */\nexport function encryptInnerMessage(dhInnerMessage, key, iv) {\n  const dhInnerMessageBuffer = dumpClientDHInnerData(dhInnerMessage);\n  const innerHash = sha1(dhInnerMessageBuffer);\n  const innerHashBytes = arrayBufferToUint8Array(innerHash);\n  const dataWithHashLength = innerHashBytes.length + dhInnerMessageBuffer.byteLength;\n  const randomDataLength = (16 - (dataWithHashLength % 16)) % 16;\n\n  const dataWithHashBuffer = new ArrayBuffer(dataWithHashLength + randomDataLength);\n  const hashBytes = new Uint8Array(dataWithHashBuffer, 0, innerHashBytes.length);\n  copyBytes(innerHashBytes, hashBytes);\n\n  const dhInnerMessageBytes = new Uint8Array(dhInnerMessageBuffer);\n  const messageBytes = new Uint8Array(\n    dataWithHashBuffer,\n    innerHashBytes.length,\n    dhInnerMessageBytes.length,\n  );\n  copyBytes(dhInnerMessageBytes, messageBytes);\n\n  const randomBytes = getNRandomBytes(randomDataLength);\n  const randomMessageBytes = new Uint8Array(dataWithHashBuffer, dataWithHashLength);\n  copyBytes(randomBytes, randomMessageBytes);\n\n  const encryptedMessage = encryptAesIge(\n    dataWithHashBuffer,\n    uint8ToArrayBuffer(key),\n    uint8ToArrayBuffer(iv),\n  );\n  return encryptedMessage;\n}\n\nexport function buildSetClientDhParamsMessage(encodedMessage, dhParams) {\n  return {\n    [TYPE_KEY]: SET_CLIENT_DH_PARAMS_ANSWER_TYPE,\n    [METHOD_KEY]: SET_CLIENT_DH_PARAMS_METHOD,\n    nonce: dhParams.nonce,\n    server_nonce: dhParams.server_nonce,\n    encrypted_data: arrayBufferToUint8Array(encodedMessage),\n  };\n}\n\n\nexport function checkDHVerifyResponse(verifyResponse) {\n  if (isMessageOf(DH_GEN_FAIL_CONSTRUCTOR, verifyResponse)) {\n    const errorMessage = 'DH generation failed';\n    console.error(errorMessage);\n    throw new Error(errorMessage);\n  }\n\n  if (isMessageOf(DH_GEN_RETRY_CONSTRUCTOR, verifyResponse)) {\n    const errorMessage = 'DH generation need to be retried';\n    console.error(errorMessage);\n    throw new Error(errorMessage);\n  }\n\n  if (!isMessageOf(DH_GEN_OK_CONSTRUCTOR, verifyResponse)) {\n    const errorMessage = 'Unexpected DH generation error';\n    console.error(errorMessage);\n    throw new Error(errorMessage);\n  }\n}\n\nfunction buildAuthKeyHash(authKey) {\n  const authKeyBuffer = new ArrayBuffer(authKey.length);\n  const authKeyBufferBytes = new Uint8Array(authKeyBuffer);\n  copyBytes(authKey, authKeyBufferBytes);\n  return R.pipe(\n    sha1,\n    arrayBufferToUint8Array,\n  )(authKeyBuffer);\n}\n\nconst buildAuthKeyId = R.slice(12, 20);\nconst buildAuthKeyAuxHash = R.slice(0, 8);\n\nfunction verifyNewNonce(newNonce, authKeyAuxHash, verifyResponse) {\n  const nonceNumberWithAuxHash = R.flatten([\n    bigIntToUint8Array(newNonce, true),\n    [1],\n    authKeyAuxHash,\n  ]);\n\n  const buffer = uint8ToArrayBuffer(nonceNumberWithAuxHash);\n  const result = R.pipe(\n    sha1,\n    R.partialRight(sliceBuffer, [4]),\n    arrayBufferToHex,\n  )(buffer);\n\n  const newNonceHash1Str = R.pipe(\n    R.prop('new_nonce_hash1'),\n    R.partialRight(bigIntToUint8Array, [true]),\n    uint8ArrayToHex,\n  )(verifyResponse);\n\n  if (result !== newNonceHash1Str) {\n    const message = 'Verify new nonce issue';\n    console.error(message);\n    throw new Error(message);\n  }\n}\n\nfunction buildSalt({ server_nonce: serverNonce, new_nonce: newNonce }) {\n  const serverNonceUint = bigIntToUint8Array(serverNonce, true);\n  const newNonceUint = bigIntToUint8Array(newNonce, true);\n  const salt = new Uint8Array(8);\n  for (let i = 0; i < 8; i += 1) {\n    /* eslint-disable */\n    salt[i] = newNonceUint[i] ^ serverNonceUint[i];\n    /* eslint-enable */\n  }\n  return salt;\n}\n\nexport default function createAuthorizationKey(sendRequest) {\n  const initDHMessage = getInitialDHExchangeMessage();\n\n  return Promise.race([\n    sendRequest(initDHMessage)\n      .then((responsePQ) => {\n        if (initDHMessage.nonce !== responsePQ.nonce) {\n          throw Error('Nonce are not equal');\n        }\n\n        const pqInnerData = buildPQInnerData(responsePQ);\n        const encryptedData = encryptPQInner(responsePQ, pqInnerData);\n        const exchangeMessage = buildDHExchangeMessage(responsePQ, pqInnerData, encryptedData);\n\n        return Promise.all([\n          sendRequest(exchangeMessage),\n          Promise.resolve(pqInnerData),\n        ]);\n      })\n      .then(([serverDHParams, pqInnerData]) => {\n        if (\n          serverDHParams.nonce !== pqInnerData.nonce\n          || serverDHParams.server_nonce !== pqInnerData.server_nonce\n        ) {\n          throw Error('Nonce are not equal');\n        }\n\n        if (isMessageOf(SERVER_DH_PARAMS_FAIL_CONSTRUCTOR, serverDHParams)) {\n          throw Error('Server dh params fail');\n        }\n\n        const dhParams = decryptDHParams(serverDHParams, pqInnerData);\n        const dhValues = dhComputation(dhParams);\n        const dhInnerMessage = buildDHInnerMessage(dhParams, dhValues);\n        const encryptedMessage = encryptInnerMessage(dhInnerMessage, dhParams.key, dhParams.iv);\n        const setClientDHParamsMessage = buildSetClientDhParamsMessage(encryptedMessage, dhParams);\n        return Promise.all([\n          sendRequest(setClientDHParamsMessage),\n          Promise.resolve(dhValues),\n          Promise.resolve(pqInnerData),\n        ]);\n      })\n      .then(([verifyResponse, dhValues, pqInnerData]) => {\n        checkDHVerifyResponse(verifyResponse);\n        const serverSalt = buildSalt(pqInnerData);\n        const authKey = bigIntToUint8Array(dhValues.gab);\n        const authKeyHash = buildAuthKeyHash(authKey);\n        const authKeyId = buildAuthKeyId(authKeyHash);\n        const authKeyAuxHash = buildAuthKeyAuxHash(authKeyHash);\n\n        verifyNewNonce(pqInnerData.new_nonce, authKeyAuxHash, verifyResponse);\n        return { authKey, authKeyId, serverSalt };\n      }),\n    new Promise((resolve, reject) => setTimeout(reject, 600 * 100))\n      .then(() => {\n        console.error('request is too long');\n      }),\n  ]);\n}\n","import {\n  getNRandomBytes,\n  mergeAllArrayBuffers,\n  sliceBuffer,\n  uint8ToArrayBuffer,\n} from './utils';\n\nexport const tag = 0xeeeeeeee;\n\n/**\n * Encode message for wrapper\n * @param {ArrayBuffer} buffer\n * @returns {ArrayBuffer} padded value\n */\nexport function encode(buffer) {\n  const padSize = 0;\n  // console.log('Pad size:', padSize);\n  const randomBytes = getNRandomBytes(padSize);\n  const randomBuffer = uint8ToArrayBuffer(randomBytes);\n  const tlen = padSize + buffer.byteLength;\n\n  const tlenBuffer = new ArrayBuffer(4);\n  const tlenView = new Uint32Array(tlenBuffer);\n  tlenView[0] = tlen;\n\n  return mergeAllArrayBuffers([tlenBuffer, buffer, randomBuffer]);\n}\n\n/**\n * Cut padded intermidiate\n * @param {ArrayBuffer} encodedBuffer\n */\nexport function decode(encodedBuffer) {\n  const tlen = (new Uint32Array(encodedBuffer, 0, 1))[0];\n  const paddingSize = tlen % 4;\n  return sliceBuffer(encodedBuffer, 4, tlen - paddingSize + 4);\n}\n","import _curry2 from './internal/_curry2.js';\nimport map from './map.js';\nimport prop from './prop.js';\n\n/**\n * Returns a new list by plucking the same named property off all objects in\n * the list supplied.\n *\n * `pluck` will work on\n * any [functor](https://github.com/fantasyland/fantasy-land#functor) in\n * addition to arrays, as it is equivalent to `R.map(R.prop(k), f)`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Functor f => k -> f {k: v} -> f v\n * @param {Number|String} key The key name to pluck off of each object.\n * @param {Array} f The array or functor to consider.\n * @return {Array} The list of values for the given key.\n * @see R.props\n * @example\n *\n *      var getAges = R.pluck('age');\n *      getAges([{name: 'fred', age: 29}, {name: 'wilma', age: 27}]); //=> [29, 27]\n *\n *      R.pluck(0, [[1, 2], [3, 4]]);               //=> [1, 3]\n *      R.pluck('val', {a: {val: 3}, b: {val: 5}}); //=> {a: 3, b: 5}\n * @symb R.pluck('x', [{x: 1, y: 2}, {x: 3, y: 4}, {x: 5, y: 6}]) = [1, 3, 5]\n * @symb R.pluck(0, [[1, 2], [3, 4], [5, 6]]) = [1, 3, 5]\n */\nvar pluck = /*#__PURE__*/_curry2(function pluck(p, list) {\n  return map(prop(p), list);\n});\nexport default pluck;","import _curry1 from './internal/_curry1.js';\nimport curryN from './curryN.js';\nimport max from './max.js';\nimport pluck from './pluck.js';\nimport reduce from './reduce.js';\n\n/**\n * Takes a list of predicates and returns a predicate that returns true for a\n * given list of arguments if at least one of the provided predicates is\n * satisfied by those arguments.\n *\n * The function returned is a curried function whose arity matches that of the\n * highest-arity predicate.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Logic\n * @sig [(*... -> Boolean)] -> (*... -> Boolean)\n * @param {Array} predicates An array of predicates to check\n * @return {Function} The combined predicate\n * @see R.allPass\n * @example\n *\n *      const isClub = R.propEq('suit', '♣');\n *      const isSpade = R.propEq('suit', '♠');\n *      const isBlackCard = R.anyPass([isClub, isSpade]);\n *\n *      isBlackCard({rank: '10', suit: '♣'}); //=> true\n *      isBlackCard({rank: 'Q', suit: '♠'}); //=> true\n *      isBlackCard({rank: 'Q', suit: '♦'}); //=> false\n */\nvar anyPass = /*#__PURE__*/_curry1(function anyPass(preds) {\n  return curryN(reduce(max, 0, pluck('length', preds)), function () {\n    var idx = 0;\n    var len = preds.length;\n    while (idx < len) {\n      if (preds[idx].apply(this, arguments)) {\n        return true;\n      }\n      idx += 1;\n    }\n    return false;\n  });\n});\nexport default anyPass;","import * as R from 'ramda';\nimport {\n  arrayBufferToUint8Array,\n  getRandomInt,\n  mergeAllArrayBuffers,\n  sliceBuffer, uint8ToArrayBuffer,\n} from './utils';\nimport { getCipher } from './aes';\n\nconst checkFirstByte = R.pipe(\n  (buffer) => (new Uint8Array(buffer, 0, 1))[0],\n  R.equals(0xef),\n  R.not,\n);\nconst checkFirstInt = R.pipe(\n  (buffer) => (new Uint32Array(buffer, 0, 1))[0],\n  R.anyPass([\n    R.equals(0x44414548),\n    R.equals(0x54534f50),\n    R.equals(0x20544547),\n    R.equals(0x4954504f),\n    R.equals(0xdddddddd),\n    R.equals(0xeeeeeeee),\n  ]),\n  R.not,\n);\nconst checkSecondInt = R.pipe(\n  (buffer) => (new Uint32Array(buffer, 4, 1))[0],\n  R.equals(0x00000000),\n  R.not,\n);\n/**\n * Takes ArrayBuffer init payload and return is it valid or not\n * @param {ArrayBuffer} buffer\n * @returns {boolean}\n */\nexport const isValidInitPayload = R.allPass([\n  checkFirstByte,\n  checkFirstInt,\n  checkSecondInt,\n]);\n\n/**\n * Generates init payload for websocket communication. Please check:\n * https://core.telegram.org/mtproto/mtproto-transports#transport-obfuscation\n * @param {Number} protocolTag - protocol tag\n * @returns {ArrayBuffer}\n */\nexport function generateFirstInitPayload(protocolTag) {\n  const buffer = new ArrayBuffer(64);\n  const prefix = new Uint8Array(buffer, 0, 56);\n\n  const protocolView = new Uint32Array(buffer, 56, 1);\n  protocolView[0] = protocolTag;\n\n  const postfix = new Uint8Array(buffer, 60, 4);\n\n  while (!isValidInitPayload(buffer)) {\n    for (let i = 0; i < prefix.length; i += 1) {\n      prefix[i] = getRandomInt(256);\n    }\n\n    for (let i = 0; i < postfix.length; i += 1) {\n      postfix[i] += getRandomInt(256);\n    }\n  }\n\n  return buffer;\n}\n\n/**\n * Builds second init payload by reversing first init payload\n * @param {ArrayBuffer} initPayloadBuffer\n * @returns {ArrayBuffer}\n */\nexport function buildSecondInitPayload(initPayloadBuffer) {\n  const buffer = new ArrayBuffer(initPayloadBuffer.byteLength);\n\n  const firstView = new Uint8Array(initPayloadBuffer);\n  const secondView = new Uint8Array(buffer);\n\n  for (let i = 0; i < secondView.length; i += 1) {\n    secondView[secondView.length - i - 1] = firstView[i];\n  }\n\n  return buffer;\n}\n\n/**\n * @param {ArrayBuffer} init\n * @param {Function} encrypt\n */\nexport function buildHeader(init, encrypt) {\n  return mergeAllArrayBuffers([\n    sliceBuffer(init, 0, 56),\n    sliceBuffer(encrypt(init), 56, 64),\n  ]);\n}\n\n/**\n * Generates obfuscation header and encode/decode function\n * @param {Number} protocolTag - protocol tag\n * @returns {{header: ArrayBuffer, encrypt: Function, decrypt: Function }}\n */\nexport default function getObfuscation(protocolTag) {\n  const initBuffer = generateFirstInitPayload(protocolTag);\n  const reversedInitBuffer = buildSecondInitPayload(initBuffer);\n\n  const encryptKey = sliceBuffer(initBuffer, 8, 40);\n  const encryptIv = sliceBuffer(initBuffer, 40, 56);\n  const encryptCipher = getCipher(encryptKey, encryptIv);\n  const encrypt = R.pipe(\n    arrayBufferToUint8Array,\n    (x) => encryptCipher.encrypt(x),\n    uint8ToArrayBuffer,\n  );\n\n  const decryptKey = sliceBuffer(reversedInitBuffer, 8, 40);\n  const decryptIv = sliceBuffer(reversedInitBuffer, 40, 56);\n  const decryptCipher = getCipher(decryptKey, decryptIv);\n  const decrypt = R.pipe(\n    arrayBufferToUint8Array,\n    (x) => decryptCipher.decrypt(x),\n    uint8ToArrayBuffer,\n  );\n\n  const header = buildHeader(initBuffer, encrypt);\n\n  return { header, encrypt, decrypt };\n}\n","import _curry1 from './internal/_curry1.js';\nimport curryN from './curryN.js';\nimport max from './max.js';\nimport pluck from './pluck.js';\nimport reduce from './reduce.js';\n\n/**\n * Takes a list of predicates and returns a predicate that returns true for a\n * given list of arguments if every one of the provided predicates is satisfied\n * by those arguments.\n *\n * The function returned is a curried function whose arity matches that of the\n * highest-arity predicate.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Logic\n * @sig [(*... -> Boolean)] -> (*... -> Boolean)\n * @param {Array} predicates An array of predicates to check\n * @return {Function} The combined predicate\n * @see R.anyPass\n * @example\n *\n *      const isQueen = R.propEq('rank', 'Q');\n *      const isSpade = R.propEq('suit', '♠︎');\n *      const isQueenOfSpades = R.allPass([isQueen, isSpade]);\n *\n *      isQueenOfSpades({rank: 'Q', suit: '♣︎'}); //=> false\n *      isQueenOfSpades({rank: 'Q', suit: '♠︎'}); //=> true\n */\nvar allPass = /*#__PURE__*/_curry1(function allPass(preds) {\n  return curryN(reduce(max, 0, pluck('length', preds)), function () {\n    var idx = 0;\n    var len = preds.length;\n    while (idx < len) {\n      if (!preds[idx].apply(this, arguments)) {\n        return false;\n      }\n      idx += 1;\n    }\n    return true;\n  });\n});\nexport default allPass;","import { tag, encode, decode } from './intermediate';\nimport getObfuscation from './obfuscation';\n\n/**\n * Base class to work with telegram websocket\n */\nexport default class Connection extends EventTarget {\n  constructor(url) {\n    super();\n    this.url = url;\n    this.tag = tag;\n    this.ws = undefined;\n    this.encode = encode;\n    this.decode = decode;\n    const { header, encrypt, decrypt } = getObfuscation(this.tag);\n    this.header = header;\n    this.encrypt = encrypt;\n    this.decrypt = decrypt;\n  }\n\n  init() {\n    this.ws = new WebSocket(this.url, ['binary']);\n    this.ws.binaryType = 'arraybuffer';\n    this.ws.addEventListener('open', (e) => {\n      const event = new Event('wsOpen');\n      event.originEvent = e;\n      this.ws.send(this.header);\n      this.dispatchEvent(event);\n    });\n\n    this.ws.addEventListener('close', (e) => {\n      const event = new Event('wsClose');\n      event.originEvent = e;\n      this.dispatchEvent(event);\n    });\n\n    this.ws.addEventListener('error', (e) => {\n      const event = new Event('wsError');\n      event.originEvent = e;\n      this.dispatchEvent(event);\n    });\n\n    this.ws.addEventListener('message', (e) => {\n      const paddedBuffer = this.decrypt(e.data);\n      const buffer = this.decode(paddedBuffer);\n\n      const event = new Event('wsMessage');\n      event.originEvent = e;\n      event.buffer = buffer;\n      this.dispatchEvent(event);\n    });\n  }\n\n  get readyState() {\n    if (!this.ws) {\n      return undefined;\n    }\n    return this.ws.readyState;\n  }\n\n  /**\n   * @param {ArrayBuffer} buffer\n   */\n  send(buffer) {\n    if (this.readyState !== 1) {\n      throw new Error('Can`t send request');\n    }\n    const paddedBuffer = this.encode(buffer);\n    const encryptedBuffer = this.encrypt(paddedBuffer);\n    this.ws.send(encryptedBuffer);\n  }\n}\n","import _curry3 from './internal/_curry3.js';\nimport pathOr from './pathOr.js';\n\n/**\n * If the given, non-null object has an own property with the specified name,\n * returns the value of that property. Otherwise returns the provided default\n * value.\n *\n * @func\n * @memberOf R\n * @since v0.6.0\n * @category Object\n * @sig a -> String -> Object -> a\n * @param {*} val The default value.\n * @param {String} p The name of the property to return.\n * @param {Object} obj The object to query.\n * @return {*} The value of given property of the supplied object or the default value.\n * @example\n *\n *      const alice = {\n *        name: 'ALICE',\n *        age: 101\n *      };\n *      const favorite = R.prop('favoriteLibrary');\n *      const favoriteWithDefault = R.propOr('Ramda', 'favoriteLibrary');\n *\n *      favorite(alice);  //=> undefined\n *      favoriteWithDefault(alice);  //=> 'Ramda'\n */\nvar propOr = /*#__PURE__*/_curry3(function propOr(val, p, obj) {\n  return pathOr(val, [p], obj);\n});\nexport default propOr;","import _objectAssign from './internal/_objectAssign.js';\nimport _curry2 from './internal/_curry2.js';\n\n/**\n * Create a new object with the own properties of the first object merged with\n * the own properties of the second object. If a key exists in both objects,\n * the value from the first object will be used.\n *\n * @func\n * @memberOf R\n * @category Object\n * @sig {k: v} -> {k: v} -> {k: v}\n * @param {Object} l\n * @param {Object} r\n * @return {Object}\n * @see R.mergeRight, R.mergeDeepLeft, R.mergeWith, R.mergeWithKey\n * @example\n *\n *      R.mergeLeft({ 'age': 40 }, { 'name': 'fred', 'age': 10 });\n *      //=> { 'name': 'fred', 'age': 40 }\n *\n *      const resetToDefault = R.mergeLeft({x: 0});\n *      resetToDefault({x: 5, y: 2}); //=> {x: 0, y: 2}\n * @symb R.mergeLeft(a, b) = {...b, ...a}\n */\nvar mergeLeft = /*#__PURE__*/_curry2(function mergeLeft(l, r) {\n  return _objectAssign({}, r, l);\n});\nexport default mergeLeft;","import nth from './nth.js';\n\n/**\n * Returns the last element of the given list or string.\n *\n * @func\n * @memberOf R\n * @since v0.1.4\n * @category List\n * @sig [a] -> a | Undefined\n * @sig String -> String\n * @param {*} list\n * @return {*}\n * @see R.init, R.head, R.tail\n * @example\n *\n *      R.last(['fi', 'fo', 'fum']); //=> 'fum'\n *      R.last([]); //=> undefined\n *\n *      R.last('abc'); //=> 'c'\n *      R.last(''); //=> ''\n */\nvar last = /*#__PURE__*/nth(-1);\nexport default last;","import * as R from 'ramda';\nimport { sliceBuffer } from './utils';\nimport { loadBigInt } from './tl/bigInt';\n\nconst getPlainMessageId = R.pipe(\n  R.partialRight(sliceBuffer, [8, 16]),\n  loadBigInt,\n);\n\n/**\n * Takes array buffer with wrapped message and\n * returns message id and buffer contained only message data\n * @param {ArrayBuffer} wrappedMessageBuffer\n * @return {{messageId: bigint, buffer: ArrayBuffer}}\n */\nexport default function unwrapPlainMessage(wrappedMessageBuffer) {\n  return {\n    messageId: getPlainMessageId(wrappedMessageBuffer),\n    buffer: sliceBuffer(wrappedMessageBuffer, 20),\n  };\n}\n","import { getMessageId } from './utils';\nimport wrapPlainMessage from './wrapPlainMessage';\nimport unwrapPlainMessage from './unwrapPlainMessage';\n\n/**\n * @param {Connection} ws - ws MTProto connection object\n * @param {Function} loads - loads object by MTProto schema\n * @param {Function} dumps - dumps object by MTProto schema\n * @param {*} payload - payload to send request\n */\nexport default function sendWsRequest(ws, loads, dumps, payload) {\n  return new Promise((resolve, reject) => {\n    function handleSuccess(event) {\n      ws.removeEventListener('wsMessage', handleSuccess);\n      /* eslint-disable */\n      ws.removeEventListener('wsError', handleError);\n      ws.removeEventListener('wsClose', handleError);\n      /* eslint-enable */\n      const { buffer: plainMessageBuffer } = unwrapPlainMessage(event.buffer);\n      resolve(loads(plainMessageBuffer));\n    }\n\n    function handleError(error) {\n      console.warn(error);\n      ws.removeEventListener('wsMessage', handleSuccess);\n      ws.removeEventListener('wsError', handleError);\n      ws.removeEventListener('wsClose', handleError);\n      reject(error);\n    }\n\n    ws.addEventListener('wsMessage', handleSuccess);\n    ws.addEventListener('wsError', handleError);\n    ws.addEventListener('wsClose', handleError);\n\n    const payloadBuffer = dumps(payload);\n    const messageId = getMessageId();\n    const messageBuffer = wrapPlainMessage(messageId, payloadBuffer);\n    ws.send(messageBuffer);\n  });\n}\n","/**\n * Wraps payload message buffer to plain message\n * @param {ArrayBuffer} payloadBuffer\n */\nimport { copyBuffer } from './utils';\n\n/**\n * Wraps messageId and message buffer to unencrypt message buffer\n * for more details please check https://core.telegram.org/mtproto/description#unencrypted-message\n * @param {BigInt} messageId\n * @param {ArrayBuffer} payloadBuffer\n * @return {ArrayBuffer}\n */\nexport default function wrapPlainMessage(messageId, payloadBuffer) {\n  const buffer = new ArrayBuffer(8 + 8 + 4 + payloadBuffer.byteLength);\n\n  const authKeyBytes = new BigUint64Array(buffer, 0, 1);\n  authKeyBytes[0] = BigInt(0);\n\n  const messageIdBytes = new BigUint64Array(buffer, 8, 1);\n  messageIdBytes[0] = messageId;\n\n  const messageLengthBytes = new Uint32Array(buffer, 16, 1);\n  messageLengthBytes[0] = payloadBuffer.byteLength;\n\n  copyBuffer(payloadBuffer, buffer, 20);\n\n  return buffer;\n}\n","export default function* seqNoGenerator() {\n  let seqNo = 1;\n  let isContentRelated = false;\n  while (true) {\n    if (isContentRelated) {\n      seqNo += 1;\n    } else {\n      seqNo += 2;\n    }\n    isContentRelated = yield seqNo;\n  }\n}\n","import * as R from 'ramda';\nimport { sha256 } from './sha';\nimport { arrayBufferToUint8Array, uint8ToArrayBuffer } from './utils';\n\n\n/**\n * Generates message key from u\n *\n * @param {Uint8Array} authKey from 88 to 88 + 32\n * @param {Uint8Array} - payload with padding\n * @returns {Uint8Array} - sha1 of messageBuffer\n */\nconst getMsgKey = R.pipe(\n  R.unapply(R.flatten),\n  uint8ToArrayBuffer,\n  sha256,\n  arrayBufferToUint8Array,\n  R.slice(8, 24),\n);\n\nexport default getMsgKey;\n","import * as R from 'ramda';\n\nimport { arrayBufferToUint8Array, copyBytes } from './utils';\nimport { sha256 } from './sha';\n\n/**\n * @param {Uint8Array} arr\n */\nfunction buildBuffer(arr) {\n  const buffer = new ArrayBuffer(arr.length);\n  const bufferBytes = new Uint8Array(buffer);\n  copyBytes(arr, bufferBytes);\n  return buffer;\n}\n\nconst getSha256 = R.pipe(\n  buildBuffer,\n  sha256,\n  arrayBufferToUint8Array,\n);\n\n/**\n * Generating key, iv values for aes encoding\n * For algorithm please check\n * https://core.telegram.org/mtproto/description_v1#defining-aes-key-and-initialization-vector\n * @param {Uint8Array} authKey\n * @param {Uint8Array} msgKey\n * @param {boolean} fromServer\n * @return {{key: Uint8Array, iv: Uint8Array}}\n */\nexport default function generateKeyIv(authKey, msgKey, fromServer) {\n  const x = fromServer ? 8 : 0;\n\n  const sha256a = getSha256(R.flatten([msgKey, R.slice(x, 36 + x, authKey)]));\n  const sha256b = getSha256(R.flatten([R.slice(40 + x, 76 + x, authKey), msgKey]));\n\n  return {\n    key: R.flatten([\n      R.slice(0, 8, sha256a),\n      R.slice(8, 24, sha256b),\n      R.slice(24, 32, sha256a),\n    ]),\n    iv: R.flatten([\n      R.slice(0, 8, sha256b),\n      R.slice(8, 24, sha256a),\n      R.slice(24, 32, sha256b),\n    ]),\n  };\n}\n","import * as R from 'ramda';\n\nimport addSessionInfo from './addSessionInfo';\nimport getMsgKey from './getMsgKey';\nimport generateKeyIv from './generateKeyIv';\nimport { encryptIge as encryptAesIge } from './aes';\nimport padBytes from './padBytes';\nimport addExternalHeader from './addExternalHeader';\nimport { uint8ToArrayBuffer } from './utils';\n\nexport default function encryptMessage(\n  authKey,\n  authKeyId,\n  salt,\n  sessionId,\n  seqNo,\n  messageId,\n  messageBuffer,\n) {\n  const messageWithHeaders = addSessionInfo(salt, sessionId, messageId, seqNo, messageBuffer);\n\n  const paddedBuffer = padBytes(messageWithHeaders.buffer);\n  const padded = new Uint8Array(paddedBuffer);\n  const messageKey = getMsgKey(R.slice(88, 88 + 32, authKey), padded);\n\n  const { key, iv } = generateKeyIv(authKey, messageKey);\n  const encryptedBuffer = encryptAesIge(\n    uint8ToArrayBuffer(padded),\n    uint8ToArrayBuffer(key),\n    uint8ToArrayBuffer(iv),\n  );\n\n  return addExternalHeader(authKeyId, messageKey, encryptedBuffer);\n}\n","import { copyBuffer, copyBytes, getNRandomBytes } from './utils';\n\nexport default function padBytes(buffer) {\n  const minPad = 12;\n  const lengthWithMinPad = buffer.byteLength + minPad;\n  const roundPad = (16 - (lengthWithMinPad % 16)) % 16;\n  const totalPad = minPad + roundPad;\n  const length = buffer.byteLength + totalPad;\n  const paddedBuffer = new ArrayBuffer(length);\n  copyBuffer(buffer, paddedBuffer);\n\n  const randomBytes = getNRandomBytes(totalPad);\n  const paddingBytes = new Uint8Array(paddedBuffer, buffer.byteLength);\n  copyBytes(randomBytes, paddingBytes);\n\n  return paddedBuffer;\n}\n","/**\n * Wraps message buffer with session info\n * @param {Uint8Array} salt\n * @param {BigInt} sessionId\n * @param {BigInt} messageId\n * @param {ArrayBuffer} messageBuffer\n */\nimport { copyBuffer, copyBytes } from './utils';\n\nexport default function addSessionInfo(salt, sessionId, messageId, seqNo, messageBuffer) {\n  const buffer = new ArrayBuffer(8 + 8 + 8 + 4 + 4 + messageBuffer.byteLength);\n\n  const saltBytes = new Uint8Array(buffer, 0, 8);\n  copyBytes(salt, saltBytes);\n\n  const sessionIdBytes = new Uint8Array(buffer, 8, 8);\n  copyBytes(sessionId, sessionIdBytes);\n\n  const messageIdBytes = new BigUint64Array(buffer, 16, 1);\n  messageIdBytes[0] = messageId;\n\n  const seqNoArr = new Uint32Array(buffer, 24, 1);\n  seqNoArr[0] = seqNo;\n\n  const messageLength = new Uint32Array(buffer, 28, 1);\n  messageLength[0] = messageBuffer.byteLength;\n\n  copyBuffer(messageBuffer, buffer, 32);\n\n  return {\n    buffer,\n    salt,\n    sessionId,\n    messageId,\n  };\n}\n","import { copyBuffer, copyBytes } from './utils';\n\n/**\n * Adds external header\n * @param {Uint8Array|Number[]} authKeyId - 8 bytes of auth id\n * @param {Uint8Array|Number[]} messageKey - 16 bytes of message id\n * @param {ArrayBuffer} encryptedMessage - buffer array of encrypted message\n * @returns {ArrayBuffer} - buffer with external header\n */\nexport default function addExternalHeader(authKeyId, messageKey, encryptedMessage) {\n  const buffer = new ArrayBuffer(8 + 16 + encryptedMessage.byteLength);\n\n  const authKeyIdBytes = new Uint8Array(buffer, 0, 8);\n  copyBytes(authKeyId, authKeyIdBytes);\n\n  const messageKeyIdBytes = new Uint8Array(buffer, 8, 16);\n  copyBytes(messageKey, messageKeyIdBytes);\n\n  copyBuffer(encryptedMessage, buffer, 24);\n\n  return buffer;\n}\n","import parseExternalHeader from './parseExternalHeader';\nimport generateKeyIv from './generateKeyIv';\nimport { decryptIge as decryptAesIge } from './aes';\nimport parseSessionInfo from './parseSessionInfo';\nimport { uint8ToArrayBuffer } from './utils';\n\n/**\n * Decrypts servers message\n * @param {Uint8Array} authKey\n * @param {Uint8Array} authKeyId\n * @param {Uint8Array} salt\n * @param {Uint8Array} sessionId\n * @param {ArrayBuffer} serverMessage\n */\nexport default function decryptMessage(authKey, authKeyId, salt, sessionId, serverMessage) {\n  const {\n    messageKey: serverMessageKey,\n    encryptedMessage,\n  } = parseExternalHeader(serverMessage);\n\n  const { key, iv } = generateKeyIv(authKey, serverMessageKey, true);\n  const messageWithHeaders = decryptAesIge(\n    encryptedMessage,\n    uint8ToArrayBuffer(key),\n    uint8ToArrayBuffer(iv),\n  );\n  const {\n    seqNo,\n    messageId,\n    message,\n  } = parseSessionInfo(messageWithHeaders);\n  return { seqNo, messageId, message };\n}\n","/**\n * Parses server response and gets authKeyId, messageKey and encryptedMessage\n * @param {ArrayBuffer} serverResponse\n * @returns {{authKeyId: Uint8Array, messageKey: Uint8Array, encryptedMessage: ArrayBuffer }}\n */\nexport default function parseExternalHeader(serverResponse) {\n  const authKeyId = new Uint8Array(serverResponse, 0, 8);\n  const messageKey = new Uint8Array(serverResponse, 8, 16);\n  const encryptedMessage = serverResponse.slice(24, serverResponse.byteLength);\n\n  return { authKeyId, messageKey, encryptedMessage };\n}\n","/**\n * Parses session info from message\n * @param {ArrayBuffer} messageWithSessionInfo\n * @returns {{\n *  salt: Uint8Array,\n *  seqNo: number,\n *  messageId: bigint,\n *  sessionId: Uint8Array,\n *  message: ArrayBuffer\n * }}\n */\nexport default function parseSessionInfo(messageWithSessionInfo) {\n  const salt = new Uint8Array(messageWithSessionInfo, 0, 8);\n  const sessionId = new Uint8Array(messageWithSessionInfo, 8, 8);\n\n  const messageIdArr = new BigUint64Array(messageWithSessionInfo, 16, 1);\n  const messageId = messageIdArr[0];\n\n  const seqNoArr = new Uint32Array(messageWithSessionInfo, 24, 1);\n  const seqNo = seqNoArr[0];\n\n  const messageLengthArr = new Uint32Array(messageWithSessionInfo, 28, 1);\n  const messageLength = messageLengthArr[0];\n\n  const message = messageWithSessionInfo.slice(32, 32 + messageLength);\n\n  return {\n    salt, sessionId, messageId, seqNo, messageLength, message,\n  };\n}\n","import * as R from 'ramda';\nimport { isObjectOf } from './tl/schema/utils';\n\n/**\n * Returns file type string\n * @param {*} typeObj -  Takes telegram file type object,\n * @returns {string}\n */\nexport const getFileType = R.cond([\n  [isObjectOf('storage.fileJpeg'), R.always('image/jpg')],\n  [isObjectOf('storage.fileGif'), R.always('image/gif')],\n  [isObjectOf('storage.filePng'), R.always('image/png')],\n  [isObjectOf('storage.fileMp3'), R.always('audio/mpeg')],\n  [isObjectOf('storage.fileMov'), R.always('video/quicktime')],\n  [isObjectOf('storage.fileMp4'), R.always('video/mp4')],\n  [R.T, R.always(undefined)],\n]);\n\n/**\n * Returns file type string\n * @param {*} typeObj -  Takes telegram file type object,\n * @returns {string}\n */\nexport const getFileName = R.cond([\n  [isObjectOf('storage.fileJpeg'), R.always('image.jpg')],\n  [isObjectOf('storage.fileGif'), R.always('image.gif')],\n  [isObjectOf('storage.filePng'), R.always('image.png')],\n  [isObjectOf('storage.fileMp3'), R.always('audio.mp3')],\n  [isObjectOf('storage.fileMov'), R.always('video.mov')],\n  [isObjectOf('storage.fileMp4'), R.always('video.mp4')],\n  [R.T, R.always('file')],\n]);\n","import * as R from 'ramda';\n\nimport sendWsRequest from './sendWsRequest';\nimport createAuthorizationKey from './createAuthorizationKey';\nimport seqNoGenerator from './seqNoGenerator';\nimport {\n  dumps, loads, methodFromSchema, constructorFromSchema,\n} from './tl';\nimport encryptMessage from './encryptMessage';\nimport decryptMessage from './decryptMessage';\nimport {\n  arrayBufferToUint8Array,\n  getMessageId,\n  getNRandomBytes,\n  promiseChain, promiseChainUntil,\n  sliceBuffer, uint8ToArrayBuffer,\n  uint8ToBigInt,\n} from './utils';\nimport { isMessageOfType } from './tl/utils';\nimport {\n  BAD_SERVER_SALT_CONSTRUCTOR, CONSTRUCTOR_KEY,\n  HTTP_WAIT_CONSTRUCTOR,\n  MESSAGE_CONTAINER_CONSTRUCTOR, MESSAGE_CONTAINER_TYPE,\n  MSGS_ACK_CONSTRUCTOR, MSGS_ACK_TYPE,\n  NEW_SESSION_CREATED_CONSTRUCTOR,\n  PONG_CONSTRUCTOR, RPC_ERROR_TYPE,\n  RPC_RESULT_TYPE,\n  TYPE_KEY,\n} from './constants';\nimport { dumpBigInt } from './tl/bigInt';\nimport Connection from './Connection';\nimport { getFileName, getFileType } from './downloadHelpers';\n\nexport const INIT = 'INIT';\nexport const AUTH_KEY_CREATED = 'AUTH_KEY_CREATED';\nexport const AUTH_KEY_CREATE_FAILED = 'AUTH_KEY_CREATE_FAILED';\nexport const AUTH_KEY_ERROR = 'AUTH_KEY_ERROR';\n\nexport const STATUS_CHANGED_EVENT = 'statusChanged';\nexport const UPDATE_EVENT = 'telegramUpdate';\n\nexport const UPLOAD_PART_SIZE = 512 * 1024; // one part of file is 512KB\nexport const DOWNLOAD_PART_SIZE = 512 * 1024; // download part size\n\nconst getAuthKey = R.propOr(null, 'authKey');\nconst getAuthKeyId = R.propOr(null, 'authKeyId');\nconst getServerSalt = R.propOr(null, 'serverSalt');\n\nconst generateSessionId = R.partial(getNRandomBytes, [8]);\n\nconst getDownloadLimitOffset = R.pipe(\n  R.of,\n  R.ap([R.identity, R.always(1)]),\n  R.map(R.multiply(DOWNLOAD_PART_SIZE)),\n  R.zip(['offset', 'limit']),\n  R.fromPairs,\n);\n\n/**\n * Class for working with mtproto protocols\n * Creates base connection on init. allows to send rpc calls, upload file to telegram server.\n * Emits events when connection status has been changed,\n */\nexport default class MTProto extends EventTarget {\n  /**\n   * Creates authorizationKey for mtproto on object init\n   * @param {string} serverUrl - url of data center that will be used\n   * @param {{constructors: *, methods: *}} schema - should be used for sending/receiving\n   * @param {{ authKey: Uint8Array, authKeyId: Uint8Array, serverSalt: Uint8Array}} [authData]\n   * messages from protocol\n   */\n\n  constructor(serverUrl, schema, authData) {\n    super();\n    this.status = INIT;\n    this.serverUrl = serverUrl;\n    this.schema = schema;\n    this.ws = new Connection(serverUrl); // init ws connection;\n\n    this.authKey = getAuthKey(authData);\n    this.authKeyId = getAuthKeyId(authData);\n    this.serverSalt = getServerSalt(authData);\n\n    this.genSeqNo = null;\n    this.sessionId = null;\n\n    this.rpcPromises = {}; // dict where key is message id and value is resolve and reject functions\n    this.acknowledgements = []; // array of message ids that should be send for acknowledgement\n  }\n\n  /**\n   * Inits connection\n   */\n  init() {\n    this.ws.addEventListener('wsOpen', () => {\n      this.buildAuthKey();\n    });\n    this.ws.init();\n  }\n\n  /**\n   * Checks has auth key been set before, if not tries to create it;\n   */\n  buildAuthKey() {\n    if (this.isAuthKeyDataSet()) {\n      this.genSeqNo = seqNoGenerator();\n      this.sessionId = generateSessionId();\n      this.emitAuthKeyCreated();\n      this.ws.addEventListener('wsMessage', this.read.bind(this));\n    } else {\n      createAuthorizationKey(\n        R.partial(\n          sendWsRequest,\n          [\n            this.ws,\n            R.partial(loads, [this.schema]),\n            R.partial(dumps, [this.schema]),\n          ],\n        ),\n      )\n        .then((authData) => {\n          this.authKey = getAuthKey(authData);\n          this.authKeyId = getAuthKeyId(authData);\n          this.serverSalt = getServerSalt(authData);\n          this.genSeqNo = seqNoGenerator();\n          this.sessionId = generateSessionId();\n\n          this.emitAuthKeyCreated();\n          this.ws.addEventListener('wsMessage', this.read.bind(this));\n        })\n        .catch((error) => {\n          this.status = AUTH_KEY_CREATE_FAILED;\n          this.fireStatusChange(error);\n        });\n    }\n  }\n\n  isAuthKeyDataSet() {\n    return Boolean(this.authKey);\n  }\n\n  emitAuthKeyCreated() {\n    this.status = AUTH_KEY_CREATED;\n    this.fireStatusChange();\n  }\n\n  handleAuthKeyError(error) {\n    console.warn('Wrong auth key data', this.authKey, error);\n  }\n\n  fireStatusChange(error) {\n    const event = new Event(STATUS_CHANGED_EVENT);\n    event.status = this.status;\n    if (error) {\n      event.error = error;\n    } else {\n      event.detail = {\n        authKey: this.authKey,\n        authKeyId: this.authKeyId,\n        serverSalt: this.serverSalt,\n      };\n    }\n    this.dispatchEvent(event);\n  }\n\n  getSeqNo(isContentRelated) {\n    const { value } = this.genSeqNo.next(isContentRelated);\n\n    if (!isContentRelated && (value % 2 === 0)) {\n      return this.genSeqNo.next(true).value;\n    }\n\n    return value;\n  }\n\n\n  /**\n   * Handles message event from ws connection\n   * @param {Event} encryptedBuffer\n   */\n  read(event) {\n    const messageData = decryptMessage(\n      this.authKey,\n      this.authKeyId,\n      this.serverSalt,\n      this.sessionId,\n      event.buffer,\n    );\n    const message = this.loadFromDecrypted(messageData);\n    this.handleResponse(message);\n  }\n\n  /**\n   * Sending message to telegram server. if message is http wait don't store message promise in\n   * rpcPromises map, just return them. Checks have we got acknowledgements and if yest send request\n   * with them\n   * @param {*} message\n   * @returns {Promise} - promise with handling request\n   */\n  request(message) {\n    if (this.status !== 'AUTH_KEY_CREATED') {\n      return Promise.reject(new Error('Auth key has not been created'));\n    }\n\n    const buffer = dumps(this.schema, message);\n\n    if (buffer.byteLength === 0) {\n      return Promise.reject(new Error('empty array buffer of message'));\n    }\n\n    if (this.acknowledgements.length > 0) {\n      return this.sendRequestWithAcknowledgements(message);\n    }\n    return this.sendRequestOnly(message);\n  }\n\n  sendRequestOnly(message) {\n    return new Promise((resolve, reject) => {\n      const seqNo = this.getSeqNo();\n      const messageId = getMessageId();\n\n      const encrypt = R.partial(\n        encryptMessage,\n        [this.authKey, this.authKeyId, this.serverSalt, this.sessionId, seqNo, messageId],\n      );\n\n      const sendEncryptedRequest = R.pipe(\n        R.partial(dumps, [this.schema]),\n        encrypt,\n        (x) => this.ws.send(x),\n      );\n\n      sendEncryptedRequest(message);\n      this.rpcPromises[messageId] = { resolve, reject, message };\n    });\n  }\n\n  sendRequestWithAcknowledgements(message) {\n    return new Promise((resolve, reject) => {\n      const ackMessage = this.buildAcknowledgementMessage();\n      const ackMsgId = getMessageId();\n      const ackSeqNo = this.getSeqNo();\n\n      const messageId = getMessageId();\n      const seqNo = this.getSeqNo();\n\n      const containerMessage = {\n        [TYPE_KEY]: MESSAGE_CONTAINER_TYPE,\n        [CONSTRUCTOR_KEY]: MESSAGE_CONTAINER_CONSTRUCTOR,\n        messages: [\n          {\n            seqNo: ackSeqNo,\n            msgId: ackMsgId,\n            body: ackMessage,\n          },\n          {\n            seqNo,\n            msgId: messageId,\n            body: message,\n          },\n        ],\n      };\n      const containerMessageId = getMessageId();\n      const containerSeqNo = (seqNo % 2 === 0) ? seqNo : this.getSeqNo(true);\n\n      const encrypt = R.partial(\n        encryptMessage,\n        [\n          this.authKey,\n          this.authKeyId,\n          this.serverSalt,\n          this.sessionId,\n          containerSeqNo,\n          containerMessageId,\n        ],\n      );\n\n      const sendEncryptedRequest = R.pipe(\n        R.partial(dumps, [this.schema]),\n        encrypt,\n        (x) => this.ws.send(x),\n      );\n\n      const promise = sendEncryptedRequest(containerMessage);\n\n      if (isMessageOfType(HTTP_WAIT_CONSTRUCTOR, message)) {\n        promise.then(resolve).catch(reject);\n      } else {\n        this.rpcPromises[messageId] = { resolve, reject, message };\n      }\n    });\n  }\n\n  handleResponse(message) {\n    if (isMessageOfType(MESSAGE_CONTAINER_CONSTRUCTOR, message.body)) {\n      R.pipe(\n        R.path(['body', 'messages']),\n        R.map(this.handleResponse.bind(this)),\n      )(message);\n    } else if (isMessageOfType(MSGS_ACK_CONSTRUCTOR, message.body)) {\n      this.handleMsgsAck(message);\n    } else if (isMessageOfType(PONG_CONSTRUCTOR, message.body)) {\n      this.handlePong(message);\n    } else if (isMessageOfType(NEW_SESSION_CREATED_CONSTRUCTOR, message.body)) {\n      this.handleNewSessionCreated(message);\n    } else if (isMessageOfType(BAD_SERVER_SALT_CONSTRUCTOR, message.body)) {\n      this.handleBadServerSalt(message);\n    } else if (isMessageOfType(RPC_RESULT_TYPE, message.body)) {\n      this.handleRpcResult(message);\n    } else if (isMessageOfType('Updates')) {\n      this.handleUpdates(message);\n    } else {\n      this.handleUnExpected(message);\n    }\n    return message;\n  }\n\n  /* eslint-disable */\n  handleUnExpected(message) {\n    console.warn('Unhandled message:');\n    console.warn(message);\n  }\n\n  handleMsgsAck() {\n  }\n  /* eslint-enable */\n\n  handlePong(message) {\n    const { msgId } = message.body;\n    const resolve = R.pathOr(() => {}, ['rpcPromises', msgId, 'resolve'], this);\n    resolve(message.body);\n    delete this.rpcPromises[msgId];\n  }\n\n  handleNewSessionCreated(message) {\n    const msgId = R.prop('msgId', message);\n    this.acknowledgements.push(msgId);\n\n    const serverSalt = R.path(['body', 'serverSalt'], message);\n    const buffer = dumpBigInt(serverSalt);\n    this.serverSalt = new Uint8Array(buffer);\n  }\n\n  handleBadServerSalt(message) {\n    const serverSalt = R.path(['body', 'newServerSalt'], message);\n    const buffer = dumpBigInt(serverSalt);\n    this.serverSalt = new Uint8Array(buffer);\n\n    const badMsgId = R.path(['body', 'badMsgId'], message);\n\n    if (R.has(badMsgId, this.rpcPromises)) {\n      const { resolve, reject, message: requestMessage } = this.rpcPromises[badMsgId];\n      this.request(requestMessage).then(resolve).catch(reject);\n    }\n  }\n\n  handleRpcResult(message) {\n    const msgId = R.prop('msgId', message);\n    const reqMsgId = R.path(['body', 'reqMsgId'], message);\n    const result = R.path(['body', 'result'], message);\n    this.acknowledgements.push(msgId);\n\n    if (isMessageOfType(RPC_ERROR_TYPE, result)) {\n      if (result.errorCode === 401) {\n        this.handleAuthKeyError(result.errorMessage);\n      }\n      const reject = R.pathOr(() => {}, ['rpcPromises', reqMsgId, 'reject'], this);\n      reject(result);\n      delete this.rpcPromises[reqMsgId];\n    } else {\n      const resolve = R.pathOr(() => {}, ['rpcPromises', reqMsgId, 'resolve'], this);\n      resolve(result);\n      delete this.rpcPromises[reqMsgId];\n    }\n  }\n\n  handleUpdates(message) {\n    this.acknowledgements.push(message.msgId);\n    const event = new Event(UPDATE_EVENT);\n    event.detail = message.body;\n    this.dispatchEvent(event);\n  }\n\n  buildAcknowledgementMessage() {\n    const msg = {\n      [TYPE_KEY]: MSGS_ACK_TYPE,\n      [CONSTRUCTOR_KEY]: MSGS_ACK_CONSTRUCTOR,\n      msgIds: [...this.acknowledgements],\n    };\n    this.acknowledgements = [];\n    return msg;\n  }\n\n  loadFromDecrypted({ messageId, message, seqNo }) {\n    const body = loads(this.schema, message);\n    return {\n      seqNo,\n      body,\n      msgId: messageId,\n    };\n  }\n\n  /**\n   * Takes file that should be uploaded, split by parts and upload them one by one.\n   * Returns stream\n   * @param {File} file - file that will be uploaded to telegram server\n   * @param {Function} progressCb - callback function to track progress\n   * @returns {{\n   *  promise: PromiseLike<{ filename: string, fileId: BigInt, md5sum: string, parts: number}>,\n   *  cancel: Function,\n   * }}\n   */\n  upload(file, progressCb) {\n    let canceled = false;\n    let cancelChain;\n\n    function cancel() {\n      console.log('Cancel promise for uploading');\n      canceled = true;\n      if (cancelChain) {\n        console.log('call cancel chain func', cancelChain);\n        cancelChain();\n      }\n    }\n\n    const promise = file\n      .arrayBuffer()\n      .then((buffer) => {\n        console.log('Is canceled: ', canceled);\n        if (canceled) {\n          return Promise.reject(new Error('canceled'));\n        }\n        const fileId = uint8ToBigInt(getNRandomBytes(8));\n        const parts = Math.ceil(buffer.byteLength / UPLOAD_PART_SIZE);\n\n        if (parts > 3000) {\n          throw Error(`File ${file.filename} is too big`);\n        }\n\n        const sliceBufferByPart = R.pipe(\n          R.pipe(R.of, R.ap([R.identity, R.add(1)]), R.map(R.multiply(UPLOAD_PART_SIZE))),\n          R.apply(R.partial(sliceBuffer, [buffer])),\n          arrayBufferToUint8Array,\n        );\n\n        const buildPartLoadObjects = R.pipe(\n          R.of,\n          R.ap([R.always(fileId), R.always(parts), R.identity, sliceBufferByPart]),\n          R.zip(['file_id', 'file_total_parts', 'file_part', 'bytes']),\n          R.fromPairs,\n        );\n\n        const bigFile = buffer.byteLength / (1024 * 1024) > 10;\n        const uploadMethod = bigFile ? 'upload.saveBigFilePart' : 'upload.saveFilePart';\n\n        const uploadPromiseFuncs = R.times(\n          R.pipe(\n            buildPartLoadObjects,\n            R.partial(methodFromSchema, [this.schema, uploadMethod]),\n            (message) => () => this.request(message),\n          ),\n          parts,\n        );\n\n        const inputFileConstructor = bigFile ? 'inputFileBig' : 'inputFile';\n        const {\n          promise: chainablePromise,\n          cancel: cancelChainFunc,\n        } = promiseChain(uploadPromiseFuncs, progressCb);\n        cancelChain = cancelChainFunc;\n        return chainablePromise\n          .then(() => (constructorFromSchema(\n            this.schema,\n            inputFileConstructor,\n            {\n              parts,\n              id: fileId,\n              md5_checksum: '',\n              name: file.name,\n            },\n          )));\n      });\n    return { cancel, promise };\n  }\n\n  /**\n   * Downloads file by his location. If not `InputFileLocation` then reject file downloading,\n   * If size has been passed then split file to download parts and download them one by one\n   * If size hasn't been passed then download parts one by one until part lesser\n   * then size of part wouldn't come. Join all parts and return whole file on promise\n   * If location isn't `InputFileLocation` then raise error\n   * @param {*} location - object of InputFileLocation telegrams type\n   * @param {{ size: Number, progressCb: Function }} [options]- size and progress tracker\n   * @returns {PromiseLike<File>}}\n   */\n  download(location, options) {\n    if (location[TYPE_KEY] !== 'InputFileLocation') {\n      throw new Error('Only `InputFileLocation` type is supported for downloading');\n    }\n\n    const progressCb = R.propOr(() => {}, 'progressCb', options);\n    const size = R.propOr(null, 'size', options);\n    let promise;\n    let cancel;\n\n    const buildDownloadRequest = R.pipe(\n      R.mergeLeft({ location }),\n      R.partial(methodFromSchema, [this.schema, 'upload.getFile']),\n    );\n\n    if (!size) {\n      const getPromiseFunc = R.pipe(\n        R.nthArg(1),\n        getDownloadLimitOffset,\n        buildDownloadRequest,\n        (x) => this.request(x),\n      );\n\n      const isDownloadedPartSmaller = R.pipe(\n        R.nthArg(0),\n        R.path(['bytes', 'length']),\n        R.gt(DOWNLOAD_PART_SIZE),\n      );\n\n      const result = promiseChainUntil(getPromiseFunc, isDownloadedPartSmaller, progressCb);\n      promise = result.promise;\n      cancel = result.cancel;\n    } else {\n      const parts = Math.ceil(size / DOWNLOAD_PART_SIZE);\n      const downloadPromiseList = R.pipe(\n        R.times(getDownloadLimitOffset),\n        R.map(R.pipe(buildDownloadRequest, (x) => () => this.request(x))),\n      )(parts);\n      const result = promiseChain(downloadPromiseList, progressCb);\n      promise = result.promise;\n      cancel = result.cancel;\n    }\n\n    return {\n      cancel,\n      promise: promise\n        .then((result) => new File(\n          R.map(R.pipe(R.prop('bytes'), uint8ToArrayBuffer))(result),\n          R.pipe(R.last, R.prop('type'), getFileName)(result),\n          { type: R.pipe(R.last, getFileType)(result) },\n        )),\n    };\n  }\n}\n","import { partial } from 'ramda';\n\n/* eslint-disable */\nimport { dumps, loads } from './tl';\nimport { default as schema_ } from './tl/schema/layer108.json';\nimport{\n  constructorFromSchema as constructorFromSchema_,\n  methodFromSchema as methodFromSchema_\n} from './tl';\nimport { isMessageOfType } from './tl/utils';\nimport { RPC_ERROR_TYPE, PROTOCOL_ID } from './constants';\nimport { getInitialDHExchangeMessage } from './createAuthorizationKey';\nexport { isMessageOfType, isMessageOf } from './tl/utils';\nexport { isObjectOf, isMethodOf } from './tl/schema/utils';\nexport { dumpString, loadString} from './tl/string';\nexport { default as Connection } from './Connection';\nexport { default as getObfuscation } from './obfuscation'\nexport { tag, decode as padDecode, encode as padEncode} from './intermediate';\nexport { getInitialDHExchangeMessage } from './createAuthorizationKey';\nexport {sha256} from './sha';\nexport {\n  mergeAllArrayBuffers,\n  mergeArrayBuffer,\n  uint8ToBigInt,\n  uint8ToArrayBuffer,\n  arrayBufferToUint8Array,\n  arrayBufferToHex,\n  hexToArrayBuffer,\n  bigIntToUint8Array,\n  powModulo,\n} from './utils'\n\nexport { TYPE_KEY, CONSTRUCTOR_KEY, METHOD_KEY, RPC_ERROR_TYPE } from './constants';\nexport { default as MTProto } from './MTProto';\n\n\nexport const schema = schema_;\n\nexport const methodFromSchema = methodFromSchema_;\nexport const constructorFromSchema = constructorFromSchema_;\n\nexport const method = partial(methodFromSchema, [schema]);\nexport const construct = partial(constructorFromSchema, [schema]);\nexport const isRpcError = isMessageOfType(RPC_ERROR_TYPE);\n\nexport const tlDumps = dumps;\nexport const tlLoads = loads;\n"],"sourceRoot":""}