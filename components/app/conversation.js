import Component, {html, css} from '../../script/ui/Component.js';

const style = css`
  :host {
    display: grid;
    cursor: pointer;
    margin: 0 8px 2px;
    border-radius: 8px;
    padding: 8px;
    transition: background-color .2s ease;
    box-sizing: border-box;
    grid-template-areas:
        'avatar header'
        'avatar content';
  }

  :host(:hover) {
    background-color: var(--background-aside-hover);
  }

  ui-avatar {
    width: 3.6rem;
    height: 3.6rem;
    grid-area: avatar;
    margin-right: 8px;
  }

  header, main {
    display: grid;
    align-items: center;
  }

  header > p, main > p {
    margin: 0;
    white-space: nowrap;
  }

  header {
    grid-area: header;
    grid-template-areas: 'caption last timestamp';
    grid-template-columns: auto fit-content(0) fit-content(0);
  }

  header > p {
    color: var(--foreground);
    font-weight: 500;
    overflow: hidden;
    text-overflow: ellipsis;
    grid-area: caption;
  }

  header > p > ui-icon { /* verify */
    margin-left: 4px;
  }

  header > p + ui-icon { /* sended, received */
    grid-area: last;
    width: 16px;
    height: 16px;
    margin-right: 4px;
  }

  header > span {
    grid-area: timestamp;
    font-size: .8rem;
    font-weight: 300;
    color: #5f6369;
    white-space: nowrap;
  }

  main {
    grid-area: content;
    grid-template-areas: 'author preview badge';
    grid-template-columns: fit-content(0) auto fit-content(0);
  }

  main > p {
    font-weight: 400;
    color: var(--foreground-accent);
    margin-right: 4px;
  }
  main > p:after {
    content: ':';
  }

  main > span {
    display: block;
    color: #707579;
    font-weight: 300;
    /* word-break: break-word; */
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }`;

const attributes = {};
const properties = {};

/** {AppConversation} @class
  * @description –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–∞—Ç–∞ –≤ —Å–ø–∏—Å–∫–µ —á–∞—Ç–æ–≤
  */
  export default class AppConversation extends Component {
    static template = html`
      <template>
        <style>${style}</style>
        <ui-avatar></ui-avatar>
        <header>
          <p>–Ø–Ω–¥–µ–∫—Å.–î–∏–∞–ª–æ–≥–∏ (—Å–æ–æ–±—â–µ—Å—Ç–≤–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤)</p>
          <ui-icon>receive</ui-icon>
          <span>Mar 1</span>
        </header>
        <main>
          <p>Daria Dugina</p>
          <span>üñº –ü–æ –¥–∞–Ω–Ω—ã–º Variety, –≤ —Å–µ—Ä–∏–∞–ª–µ-–ø—Ä–∏–∫–≤–µ–ª–µ ¬´–ò–∑–≥–æ—è-–æ–¥–∏–Ω¬ª —Å–Ω–∏–º—É—Ç—Å—è –ö–∞–π–ª –°–æ–ª–ª–µ—Ä (¬´–ü–æ–ª–¥–∞—Ä–∫¬ª) –∏ –°—Ç–µ–ª–ª–∞–Ω –°–∫–∞—Ä—Å–≥–∞—Ä–¥, –∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ ¬´–ß–µ—Ä–Ω–æ–±—ã–ª—é¬ª –∏ —Ñ–∏–ª—å–º–∞–º –õ–∞—Ä—Å–∞ —Ñ–æ–Ω –¢—Ä–∏–µ—Ä–∞.</span>
          <ui-badge>36</ui-badge>
        </main>
      </template>`;

  /** –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ {AppConversation} @constructor
    * @param {string?} text —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç–ª–µ–º–µ–Ω—Ç–∞
    */
    constructor(text) {
      super();
      if (text) this.innerText = text;
    }

  /** –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ DOM (DOM –¥–æ—Å—Ç—É–ø–µ–Ω) / mount @lifecycle
    * @param {HTMLElement} node –∫–æ—Ä–Ω–µ–≤–æ–π —É–∑–µ–ª —ç–ª–µ–º–µ–Ω—Ç–∞
    * @return {Component} @this {AppConversation} —Ç–µ–∫—É—â–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
    */
    mount(node) {
      return super.mount(node, attributes, properties);
    }
  }

Component.init(AppConversation, 'app-conversation', {attributes, properties});
